{
  
    
        "post0": {
            "title": "CollegeBoard 2020 MCQ",
            "content": ". Q66: . You need to remove line 5 because the count should only be increased when the number is perfect, thus the count should be increased inside the loop. | Line 9 also needs to be remove because the currentNum needs to increment each time regardless whether or not the number is perfect, thus the currentNum increase line cannot be inside the for loop. | . Q58: The following procedure is intended to return true if at least two of the three parameters are equal in value and is intended to return false otherwise. For which of the following procedure calls does the procedure NOT return the intended value? . I chose the answer “AnyPairs (“bat”, “cat”, “rat”)” when the correct answer should be “AnyPairs (“bat”, “cat”, “bat”)” | both of these parameters, when sent through the function result in false. However, in the case of bat; cat; and rat, 2/3 of the parameters are not equal so the function is doing its job when the result is false | But in the case of bat; cat; and bat, the function results in false but this should not be the case because 2/3 of the parameters are the same | . Q50: . to run in reasonable time means that the time complexity is a polynomial. If it were to run in unreasonable time, the time complexity would be exponential | I is reasonable because the time complexity is 2n | II is reasonable because the time complexity is n^2 | III is reasonable because the time complexity is constant | So the answer is that all three run in reasonable time, not just III | . Q47:The procedure BinarySearch (numList, target) correctly implements a binary search algorithm on the list of numbers numList. The procedure returns an index where target occurs in numList, or -1 if target does not occur in numList. Which of the following conditions must be met in order for the procedure to work as intended? . I chose the answer “the length of numList must be even” but the answer was “the values in numList must be in sorted order” | what binary search does is it halves a list and checks to see if the “target” is higher or lower than the halfway cutoff. it continues this pattern till it lands on the target. | however, if the contents of the list are not sorted, binary search means nothing because there is no way to tell whether one half of the list has the target number or not. | . Q38:Internet protocol version 6 (IPv6) has been introduced to replace the previous version (IPv4). Which of the following best describes a benefit of IPv6 over IPv4? . just remember that IPv6 allows for a greater number of addresses than IPv4, which allows more devices to be connected to the internet | . Q18: . I misread the answers but it should be this one. Keep moving forward until that is no longer possible or (false) and then rotate right and repeat this all over again | . Q16: . the index should be decreased each time regardless of whether or not the word at that index is “the” or “or”, thus the line “index ← index - 1 “ should not be inside the loop, but outside the loop | . Q14: . the answer is “Step 3: Display the remainder of number divided by 10 and store the integer quotient in number.” | this is because we are trying to output the number in its opposite order. every time we divide the number by 10, the remainder is the last digit in the number so we return it first. | we then continue to divide the integer by 10 and returning the quotient and storing the integer until the number is 0 | . Q10: . the answer is: | a tip I learned is to only test the edge values, in this case 12 and 13. values that are not on the edge will always work, so to identify the function that actually works, use the edge numbers | . Q2:A small team of wildlife researchers is working on a project that uses motion-activated field cameras to capture images of animals at study sites. The team is considering using a “citizen science” approach to analyze the images. Which of the following best explains why such an approach is considered useful for this project? . the answer is “The image analysis is likely to take a longer time for the research team than for a distributed group of individuals.” | this is correct because Citizen science involves members of the general public participating in scientific research. Distributing the image analysis work to a larger group of individuals allows the work to be completed in less time. | the answer is not that “The image analysis is likely to require complex research methods” because since the work is distributed to many nonprofessional individuals, the research is not likely to be complex | .",
            "url": "https://vivianknee.github.io/FastPages/2023/04/25/2020mc.html",
            "relUrl": "/2023/04/25/2020mc.html",
            "date": " • Apr 25, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "SASS",
            "content": "Why SASS? . SASS is an improvement on CSS in that there are methods of abstraction. It is a stylesheet language that is compiled into CSS, which means that Sass will translate the sass code you wrote into CSS, which is what your web browser can read. . SASS vs SCSS . As you learn about Sass, you might notice something called Scss. They are basically the same thing except that Scss uses curly braces and semicolons to distinguish between lines. Sass uses indentation and newlines instead. . We will be teaching the Scss syntax because it is more commonly used. . Getting started . A easy way to write SASS and have it preprocessed into CSS is by using a Jekyll powered website, such as GitHub pages or Fastpages. . The first step is to clone a GitHub pages repo, such as this one. . Within the repository, head over to assets/css/, and open style.scss. . This is where you can create your SASS code. . To see your CSS-translated SASS code, head over to _site/assets/css/style.css . Note: You will need to run bundle exec jekyll serve before the _site directory appears. . The first few hundred lines are used to style Github&#39;s theme. Make sure to scroll to the very bottom to see the SASS code that you wrote, which is in the form of CSS. . Nesting . allows you to write styling code in a way that looks like an HTML hierarchy | For example, without nesting, CSS code might look like: | . .font .title { font-family: &quot;Times New Roman&quot;, serif; font-size: 3em; } .font .text { font-family: &quot;Times New Roman&quot;, serif; font-size: 1em; } . SASS allows you to reduce repetitiveness and put everything in one class | . .font { .title { font-family: &quot;Times New Roman&quot;, serif; font-size: 3em; .text { font-family: &quot;Times New Roman&quot;, serif; font-size: 1em;/div&gt; } } } . Mini-hack . Write out the SASS equivalent for the following CSS code: . .a .b { color: green; } .a .c { color: blue; } . SASS Equivalent . .a { .c { color: blue; } .b { color: green; } } . Extend/Inheritance . the buttons have the same width, height, and font but they have different background colors | SASS allows you to specify differences in one selector whereas with CSS, you would need to specify properties for separate buttons | SASS allows you to use @extend to inherit code if you want to reuse portions of code in multiple selectors | we can create a placeholder class that stores the code we want to reuse. A placeholder class looks like this: | . //syntax %class-name { } //Examples %buttonLayout { width: 15em; height: 15em; color: #ffffff; margin-right: 10%; } . this is what the code looks like to make the buttons share code. But, you can still individually customize each button | . .gettingStartedButton, .nestingButton, .extendButton { @extend %buttonLayout; } .gettingStartedButton { background: radial-gradient( #1539db, #8a8ce6); } .nestingButton { background: radial-gradient( #3a9fa7, #8ae0e6); } .extendButton { background: radial-gradient( #643aa7, #d78ae6); } . Mixin . similar to &quot;extend&quot; because it creates a code template that can be reused | it can also take in parameters so that you can create dynamic styling | you can also place styling rules that do not take in variables within mixin | This is how you create a @mixin | . @mixin buttonLayout($innerColor, $outerColor) { //the background takes in variables background: radial-gradient($innerColor, $outerColor); //these styling rules do not take in variables width: 15em; height: 15em; color: #ffffff; margin-right: 10%; border-radius: 2em; } . This is how to call the mixin in a scss selector . .gettingStartedButton { @include buttonLayout(#1539db, #8a8ce6); } . Mini-hack . Write out a mixin in SASS that takes in a color and a font size as the parameter. Within the mixin, set the background color and font color to the color parameter, and set the font size to the font size parameter. Then create a selector that calls the mixin, and pass in a color and font size of your choice as the arguments. . @mixin design($color, $fontsize) { background: $color; font-color: $color; font-size: $fontsize; } .designTest { @include design(#1539db, 24); } . Function . Function in SASS follow this format: | . @function name(parameters) [ //code @return value; ] . Here is how to create an invert function in SASS (for light mode or dark mode) | . @function sassInvert($r, $g, $b) { //the &quot;$&quot; creates new functions in sass $newColor: rgb(255 - $r, 255 - $g, 255 - $b); @return $newColor; } . functions are called by specifying the function name with parenthesis. inside the parenthesis you can specify arguments. For Example: | . //selector called invert. this would go in the styling section .invert { // instead of putting a single color, the background color calls the function to invert colors background-color: sassInvert(0, 0, 0); color: sassInvert(211,202,202); } . Import . import helps to prevent SASS files from getting cluttered | there is a way to split code into multiple files and import them into one file. Here are the steps to do so to put the styling for function.html in another SASS file, first create a directory called _sass | within the directory, create another SASS file. for example functionStyle.scss | write your sass code in that file. Once you have finished, switch back to style.scss and import the file with @import &quot;file-name&quot; | For instance, to import the functionStyle.scss file into style.scss , the import statement would be @import &quot;functionStyle&quot;. | . | . SASS Hacks . Take notes and complete the mini-hacks. (0.9) DONE | Complete the quiz questions and provide your answers in this notebook. (0.9) DONE | What is SASS? b. A scripting language that has many styling operations . What is the difference between SASS and SCSS? a. They are very similar in their function, but their syntax is slightly different . What is an example of an advantage of using SASS over just CSS? a. SASS has more functions than CSS . What does SASS stand for? b. Systematically Awesome Sample Sheets . Which of the following is NOT an example of an available SASS directive? d. compute . The __ directive is used to share rules and relationships between selectors. b. extend . What is “@___” called? b. Directive . Use SASS to create something that uses either extend or mixin. (0.9) | // mixin to align text @mixin align-text($alignment) { text-align: $alignment; } // using the mixin for different selectors .text-center { @include align-text(center); } .text-left { @include align-text(left); } .text-right { @include align-text(right); } .text-justify { @include align-text(justify); } . Extra credit: Research other SASS features and blog about what you learned or add to your SASS project with any extra features not covered in this lesson. More points will be given if both are done. |",
            "url": "https://vivianknee.github.io/FastPages/2023/04/24/sassLesson.html",
            "relUrl": "/2023/04/24/sassLesson.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Basic JavaScript Knowledge",
            "content": "Variables . - declare JavaScript variables with var, let or const. - If the value of the variable can change, like a total, use let. If the value is set, like prices, use const. Variables can hold any data type. . var x = 5; var y = 6; var z = x + y; z . Data types- there are 8 JS data types. . List a few data types that you already knowNumber String Boolean . | . 1. String: a series of characters, written with single or double quotes . let text = &quot;Mort&quot;; text . &#39;Mort&#39; . let text2 = &#39;Yeung&#39;; text2 . &#39;Yeung&#39; . 2. Number: can be integers or decimals. . - You can also have exponential notation for large/small numbers . 3. Bigint: used to store integer values that are too big to be represented by a normal JS number . - JavaScript integers are only accurate up to 15 digits . let number = 1234567890123456789012345n; let Largenum = BigInt(1234567890123456789012345) let typeLargenum = typeof Largenum; typeLargenum . &#39;bigint&#39; . Largenum . 1234567890123456824475648n . 4. Boolean: true or false, used in conditional testing . Boolean(10 &gt; 9) . false . Write a boolean statement that outputs true . 5. Undefined: a variable without a value, has the value undefined/empty values . let name; name . grade = undefined; . 6. Null: represents the intentional absence of any object value . - variable is empty at the moment and may have a value later . let result; result = Boolean(undefined); console.log(result); // false result = Boolean(null); console.log(result); // false . false false . 7. Symbol: used to represent unique values that can be used as identifiers/keys in objects. . - They are also used to create private properties and methods in classes. - unique and immutable, so they can be used as unique identifiers in objects and classes. - useful for creating constants that can be shared across different parts of your code. . // Create a Symbol const mySymbol = Symbol(); console.log(mySymbol); // expected output: Symbol() . Symbol() . const myObject = { [mySymbol]: &#39;Hello World&#39; }; console.log(myObject); . { [Symbol()]: &#39;Hello World&#39; } . Edit/add to the code above so that it outputs &quot;Hello World&quot; . 8. Object: an unordered collection of key-value pairs. Each key-value pair is called a property. . - object: written with curly braces {}, name:value pairs - array: written with square brackets, separated by commas . Object . Identify the name/keys in the object below: , , __ | Identify the values in the object below: , , __ | . const dogs = {name: &quot;Elly&quot;, breed:&quot;Rottweiler&quot;, age:4, color:&quot;black&quot;} dogs . { name: &#39;Elly&#39;, breed: &#39;Rottweiler&#39;, age: 4, color: &#39;black&#39; } . Array . const songs = [&quot;Love Story&quot;, &quot;Blank Space&quot;, &quot;I Knew You Were Trouble&quot;]; songs . [ &#39;Love Story&#39;, &#39;Blank Space&#39;, &#39;I Knew You Were Trouble&#39; ] . Const . - We use const to declare variables whose value can be initialized only at the time of declaration. - Const means that the identifier cannot be reassigned. . const cost1 = 2; const cost2 = 11; let totalCost = cost1 + cost2; totalCost . 13 . Conditionals: control behavior, decides whether or not pieces of code can run. . - If: if a condition is true it is used to specify execution for a block of code. - Else: if the same condition is false it specifies the execution for a block of code. - Else If: new test if the first condition is false. . if (10 &gt; 5) { var outcome = &quot;True&quot;; } outcome; . &#39;True&#39; . if (&quot;red&quot; === &quot;blue&quot;) { var outcome = &quot;if block&quot;; } else { var outcome = &quot;else block&quot;; } outcome; . &#39;else block&#39; . let temperature = 54 if (temperature &lt; 70) { cast = &quot;Chilly&quot;; } else if (temperature &lt; 60) { cast = &quot;Cold&quot;; } else { cast = &quot;Warm&quot;; } cast . &#39;Chilly&#39; . Create a conditional statement about how you would greet someone based on the time of day. . Functions: . - defining: define with function + functionName(parameter) { function code }. It can be unnamed/anonymous can be defined based on a condition. - calling: simply put the function name with a parameter and semicolon, or a function can call itself (recursive) . Iteration: . - for loop: repeats until a specified condition evaluates to false - do...while: repeats until a specified condition evaluates to false - while statement: executes its statements as long as a specified condition evaluates to true - label: provides a statement with an identifier that lets you refer to it later in the code. ex. you can use a label to identify a loop, and then use the break or continue statements to indicate whether a program should interrupt the loop or continue its execution - break: used to terminate a loop, switch, or in conjunction with a labeled statement - continue: can be used to restart a while, do-while, for, or label statement - for...in: iterates a specified variable over all the enumerable properties of an object - for...of statement creates a loop Iterating over iterable objects, invoking a custom iteration hook with statements to be executed for the value of each distinct property . JavaScript in HTML- Questions . Where do you store the JavaScript Code? | How do you import a JS file into HTML? | What is onClick? | What tag do you use to write JavaScript code? | Hacks . Add notes in this notebook | Complete the code portions, questions, and prompts throughout the notebook | Extra Credit: code a small JavaScript game |",
            "url": "https://vivianknee.github.io/FastPages/2023/04/24/JSlesson.html",
            "relUrl": "/2023/04/24/JSlesson.html",
            "date": " • Apr 24, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieves and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: | Memory in GB: | Storage in GB: | OS: | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from the year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path- a: is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Route- e: is the process of finding a path from sender to receiver. | Computer System- b: a group of computing devices and programs working together for a common purpose. | Computer Device- c: a physical artifact that can run a program. some examples include computers, tablets, servers, routers, and smart sensors. | Bandwidth- d: the maximum amount of data that can be sent in a fixed amount of time. | Computer Network- f: a group of interconnected computing devices capable of sending or receiving data. | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions Open standards and protocols enable different manufacturers and developers to build hardware and software that can communicate with hardware and software on the rest of the internet: True Open standards and protocols are technical specifications that are publicly available and not proprietary to any specific company or organization | . | IETF is a task force used to enforce laws to keep manufacturers out of the internet: False IETF stands for “Internet Engineering Task Force.” It is not a task force used to enforce laws, nor is it intended to keep manufacturers out of the internet. | it is a community of engineers and technical experts who work together to develop and promote internet standards and protocols. | . | Routes are determined in advance and are not flexible: False Routing is the process of selecting the best path for data to travel through a network | it is based on factors such as network congestion, available bandwidth, and the number of hops between devices thus it varies | . | A protocol is an agreed upon set of rules that specify the behavior of a system: True | UDP guarantees transfers and is faster: False UDP does not guarantee the delivery of data | UDP ,however, is generally faster than TCP due to its lack of error-checking and retransmission mechanisms | . | The world wide web is the internet: False The World Wide Web is an information system that operates over the Internet | it is one of many applications that run over the Internet | . | HTTP is a protocol used by the world wide web: True used for transferring data between web servers and web clients | . | . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprietary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highlight vocabulary by illustration. The below illustration have some ideas | . . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is transported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . in class activity | . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. fewer direct connections means that you dont have to expend as many resources, however if one connection breaks, the whole system might be unconnected | if every device has a direct connection to one another, this means there is redundancy. redundancy is good in ensuring that if one connection goes down, there are more to support it. | However, having a lot of direct connections uses up more resources | redundancy is the inclusion of extra components that can be used to mitigate failure of a system if other components fail | . | . . for each of the devices, there are at least two other paths to the other devices so this network is fault tolerant | . . most of the devices have two paths which it can use to communicate to other devices. | however, device F has only once connection, so if that connection is cut off, it can no longer communicate with other devices thus this network is faulty | . . every single connection is made through the path A-G so if the connection between A and G were to be broken, the entire network would be down. Thus this network is faulty | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily video 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend architecture? workload: The frontend and backend components typically run on separate machines or servers, allowing them to handle different tasks independently. This distribution of workload can help improve performance and scalability, as each component can be optimized for its specific tasks and resources can be allocated more efficiently. | data storage: The backend component typically handles data storage and retrieval, allowing the frontend component to focus on presentation and user interaction. | communication: The two components communicate via APIs or other protocols, allowing them to exchange data and coordinate their actions. | . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article The command sets an environment variable GUNICORN_CMD_ARGS with the value --workers=1 --bind=0.0.0.0:8086 in a Dockerfile. | The option --workers=1 in GUNICORN_CMD_ARGS specifies the number of worker processes that Gunicorn should spawn. In this case, it is set to 1, meaning that Gunicorn will only use a single worker process to handle incoming requests. | Therefore, this command does not enable parallel computing within the server that runs Python/Gunicorn. Instead, it restricts Gunicorn to using only one worker process, which may limit its ability to handle multiple requests concurrently. However, setting the number of workers to 1 may be appropriate for some applications with low traffic volume or for development purposes. | . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. For image processing tasks, the appropriate parallelization strategy might involve using a data parallel approach, where the same computation is applied to different parts of the image simultaneously. | . | Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://vivianknee.github.io/FastPages/2023/04/05/computer-networks.html",
            "relUrl": "/2023/04/05/computer-networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 4.3a Parallel Computing",
            "content": "Analyzing Parallel Computing . Once again we will use image lab, this time to review Parallel Computing. . Change baseWidth in this line in code to increase computation requirements:def process_image(image, baseWidth=512): For instance 320, 512, 1024, 2048, 4096.- Compare Sequential and Parallel computing code and time to achieve outputs | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as PIL Image is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Scale to baseWidth def scale_image(img, baseWidth): scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Convert pixels to Grey Scale def grey_pixel(pixel): average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: return( (average, average, average, pixel[3]) ) # PNG format else: return( (average, average, average) ) # Convert pixels to Red Scale def red_pixel(pixel): if len(pixel) &gt; 3: return( (pixel[0], 0, 0, pixel[3]) ) # PNG format else: return( (pixel[0], 0, 0) ) # Convert pixels to Red Scale def green_pixel(pixel): if len(pixel) &gt; 3: return( (0, pixel[1], 0, pixel[3]) ) # PNG format else: return( (0, pixel[1], 0) ) # Convert pixels to Red Scale def blue_pixel(pixel): if len(pixel) &gt; 3: return( (0, 0, pixel[2], pixel[3]) ) # PNG format else: return( (0, 0, pixel[2]) ) # Set Properties of Image, Scale, and convert to Base64 def image_management(image, baseWidth): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img, baseWidth) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;numpy&#39;] = np.array(img.getdata()) # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Grey HTML # each pixel in numpy array is turned to grey # then resulting list, using List Comprehension, is put back into img img.putdata([grey_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Red HTML img.putdata([red_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Green HTML img.putdata([green_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) # Blue HTML img.putdata([blue_pixel(pixel) for pixel in image[&#39;numpy&#39;]]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, image[&#39;format&#39;]) def process_image(image, baseWidth=320): image_management(image, baseWidth) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- images --&quot;) display(HTML(image[&#39;html&#39;])) display(HTML(image[&#39;html_grey&#39;])) display(HTML(image[&#39;html_red&#39;])) display(HTML(image[&#39;html_green&#39;])) display(HTML(image[&#39;html_blue&#39;])) . Sequential Processing . The for loop iterates over the list of images and processes them one at a time, in order. . if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Sequential Processing for image in images: process_image(image) print() . Parallel Computing . In parallel or concurrent mode, the ThreadPoolExecutor is used to submit each image to a separate worker thread, allowing multiple images to be processed simultaneously. Multithreading allows multiple concurrent tasks of a process at the same time. The executor.map() method is used to apply the process_image function to each image in the images list. . The order in which the images are processed is not guaranteed, as threads are performed simultaneously. | . import concurrent.futures # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # setup default images images = image_data() # Parallel Processsing # executor allocates threads, it considers core execution capability of machine with concurrent.futures.ThreadPoolExecutor() as executor: executor.map(process_image, images) # order is not predictable print() . Observing Parallel Computing and Threads . You can observe Processes, CPU Percentage, and Threads with Tools on your machine. Common tools to monitor performance are Activity Monitor on MacOS or Task Manager on Windows. . This example is using top launched in VSCode Terminal. (mac) | Try top -H for linux. PID is Process ID. | COMMAND is task running on machine. Python is activated when running this Jupyter notebook. | #TH is number of threads. This increases from 15/1 to 18/1 on my machine when running python parallel computing example. | . | . Hacks . AP Classroom. Provide answers and thoughts on theo-critical question form college board Video in section 4.3. They start at about the 9 minute mark. . . since two processors can run at the same time, I would run the two processes that take the longest at the same time first, that being the 50 and 30sec one. The 30sec one will finish before the 50sec one so another process can be run immediately after, that being the 10s one. The 10sec one would still finish before the 50sec one. Thus the minimum time to run all 3 algorithms would be 50s. | . . if the two processes are run in parallel, the total time to run all the algorithms would be 45sec. | if the two processes are run one after the other however, the time it would take to run the algorithms would be 45 + 25 = 70sec. | . Build List Comprehension examples . first of all, what exactly is list comprehension? | List comprehension is a way to create a new list in Python. It allows you to create a new list by iterating over an existing iterable (such as a list, tuple, or string), applying a certain condition or transformation to each element of the iterable, and adding the result to the new list. | . squares = [i**2 for i in range(10)] print(squares) . [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] . nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] even_nums = [x for x in nums if x % 2 == 0] print(even_nums) . [2, 4, 6, 8, 10] . words = [&#39;hello&#39;, &#39;world&#39;, &#39;python&#39;] upper_words = [w.upper() for w in words] print(upper_words) . [&#39;HELLO&#39;, &#39;WORLD&#39;, &#39;PYTHON&#39;] . nums = [1, 2, 3, 4] squares = [(x, x**2) for x in nums] print(squares) . [(1, 1), (2, 4), (3, 9), (4, 16)] .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/29/parallel-computing.html",
            "relUrl": "/2023/03/29/parallel-computing.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "CollegeBoard MCQ 4 Review",
            "content": "Q50: Suppose a large group of people in a room were all born in the same year. Consider the following three algorithms, which are each intended to identify the people in the room who have the earliest birthday based on just the month and day. For example, a person born on February 10 is considered to have an earlier birthday than a person born on March 5. Which of the three algorithms will identify the correct people? . I thought “Beginning with the number 1, ask if anyone was born on that day of any month. Continue with the numbers 2, 3, and so on until a positive response is received. If only one person responds, that person has the earliest birthday. If more than one person responds, determine which person was born in the earliest month, and that person or those persons have the earliest birthday.” this was a correct algorithm but it is not | algorithm III will incorrectly determine that a person born on February 1 has an earlier birthday than a person born on January 5. | . Q49: A teacher stores the most recent quiz scores for her class in the list scores. The first element in the list holds the maximum possible number of points that can be awarded on the quiz, and each remaining element holds one student’s quiz score. Assume that scores contains at least two elements. Which of the following code segments will set the variable found to true if at least one student scored the maximum possible number of points on the quiz and will set found to false otherwise? . my answer was wrong because while it correctly compares the student’s score to the maximum score, the code segment will fail to check the last element in the list. When index is equal to the length of the list, the loop will terminate without comparing the last student score in the list to the maximum possible score. | . Q45 . for this question, I failed to do math so I got it wrong | . Q43: A computer science student completes a program and asks a classmate for feedback. The classmate suggests rewriting some of the code to include more procedural abstraction. Which of the following is NOT a benefit of procedural abstraction? . the correct answer was “making the code run faster” because modularity and code reuse do not necessarily lead to faster-running code. | . Q37: Based on the values in the table, which of the following best characterizes the algorithm for drawing n shapes, where n is a very large number? . the correct answer is “The algorithm runs in a reasonable amount of time because it will use approximately n^2 steps to draw n shapes.” | This is because As n increases, the number of steps is approximately equal to n^2 , which would make the algorithm polynomial. An algorithm with an efficiency that approximates n^2 is said to run in a reasonable amount of time. | . Q27: Digital images are often represented by the red, green, and blue values (an RGB triplet) of each individual pixel in the image. A photographer is manipulating a digital image and overwriting the original image. Which of the following describes a lossless transformation of the digital image? . the correct answer is “Creating the negative of an image by creating a new RGB triplet for each pixel in which each value is calculated by subtracting the original value from 255. The negative of an image is reversed from the original; light areas appear dark, and colors are reversed.” | this is because if a negative of the original image is made, each RGB triplet value will be computed by subtracting the original value from 255. The original value can then be restored by subtracting the new value from 255. This process is lossless because the exact original can be restored. | . Q24: Based on the information in the table, which of the following tasks is likely to take the longest amount of time when scaled up for a very large company of approximately 100,000 customers? . the answer was sorting data not searching data but im not sure why | . Q22: An Internet service provider (ISP) is considering an update to its servers that would save copies of the Web pages most frequently visited by each user. Which of the following is LEAST likely to occur as a result of the update? . the answer is “Web sites that are not visited frequently might no longer be accessible to users.” | this is correct because the actions of the ISP will only affect how frequently visited pages are loaded into Web browsers. Pages not saved by the ISP are still accessed as they were before. | . Q3 . I counted how many links needed to be cut relative to point E but failed to consider that I should also count how many links need to be cut from point F. If I cut 3 links from point F then E would have no way of reaching F. | .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/29/mcq4-review.html",
            "relUrl": "/2023/03/29/mcq4-review.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Data Structures- Hashmaps, Sets, Hash Tables, Hashing and Collisions",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashtable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is O(1). | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # there are no duplicates. each type of number is outputted only once # the numbers are outputted in increasing order 1,2,3 # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # they are in the same ted talk because datastructures and hashtables also do not permit duplicates . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # strings, integers, list, dictionary # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] my_set = set(lover_album[&quot;producer&quot;]) print(my_set) # What can you change to make sure there are no duplicate producers? #use the &quot;set&quot; syntax to remove duplicates . {&#39;Taylor Swift&#39;, &#39;Frank Dukes&#39;, &#39;Joel Little&#39;, &#39;Louis Bell&#39;, &#39;Jack Antonoff&#39;} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would you add an additional genre to the dictionary, like electropop? #use &#39;append&#39; lover_album[&quot;genre&quot;].append(&quot;electropop&quot;) # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] . print(&quot;Title:&quot;, lover_album[&quot;title&quot;]) print(&quot;Artist:&quot;, lover_album[&quot;artist&quot;]) print(&quot;Year:&quot;, lover_album[&quot;year&quot;]) print(&quot;Genre:&quot;, &quot;, &quot;.join(lover_album[&quot;genre&quot;])) print(&quot;Tracks:&quot;) for track_number, track_title in lover_album[&quot;tracks&quot;].items(): print(&quot; {}: {}&quot;.format(track_number, track_title)) . Title: Lover Artist: Taylor Swift Year: 2019 Genre: Pop, Synth-pop, electropop Tracks: 1: I Forgot That You Existed 2: Cruel Summer 3: Lover 4: The Man 5: The Archer 6: I Think He Knows 7: Miss Americana &amp; The Heartbreak Prince 8: Paper Rings 9: Cornelia Street 10: Death By A Thousand Cuts 11: London Boy 12: Soon You&#39;ll Get Better (feat. Dixie Chicks) 13: False God 14: You Need To Calm Down 15: Afterglow 16: Me! (feat. Brendon Urie of Panic! At The Disco) 17: It&#39;s Nice To Have A Friend 18: Daylight 19: All Of The Girls You Loved Before . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # Add more functionality to the search function by allowing the user to search for specific information within the dictionary (e.g. album title, artist, year, genre, tracks, etc.) instead of just searching for a specific key. # Use more descriptive error messages to help the user understand why their search was invalid . [&#39;Pop&#39;, &#39;Synth-pop&#39;, &#39;electropop&#39;] . Hacks . Create a diagram or comparison illustration (Canva). | . . Build your own album showing features of a python dictionary | . vivian_album = { &quot;artists&quot;: [&quot;The Weekend&quot;, &quot;Billie Eilish&quot;, &quot;Joji&quot;, &quot;keshi&quot;, &quot;Rex Orange County&quot;, &quot;SZA&quot;, &quot;clairo&quot;, &quot;Taylor Swift&quot;], &quot;genre&quot;: [&quot;Pop&quot;, &quot;indie-pop&quot;, &quot;lofi&quot;, &quot;Rap&quot;], &quot;tracks&quot;: { 1: &quot;After Hours&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Sanctuary&quot;, 4: &quot;Its You&quot;, 5: &quot;Summer&quot;, 6: &quot;Amazing&quot;, 7: &quot;Best Friend&quot;, 8: &quot;Kill Bill&quot;, 9: &quot;Snooze&quot;, 10: &quot;Amobea&quot;, 11: &quot;Die for You&quot;, 12: &quot;Save your Tears&quot;, 13: &quot;good girls go to hell&quot;, 14: &quot;My Future&quot;, 15: &quot;Watch&quot;, 16: &quot;Bellyache&quot;, 17: &quot;cupid&quot;, 18: &quot;sour grapes&quot; } } def print_album(): print(&quot;Artists:&quot;) for artist in vivian_album[&quot;artists&quot;]: print(f&quot;- {artist}&quot;) print(&quot; nGenre:&quot;) for genre in vivian_album[&quot;genre&quot;]: print(f&quot;- {genre}&quot;) print(&quot; nTracks:&quot;) for track_number, track_title in vivian_album[&quot;tracks&quot;].items(): print(f&quot;{track_number}. {track_title}&quot;) print_album() . Artists: - The Weekend - Billie Eilish - Joji - keshi - Rex Orange County - SZA - clairo - Taylor Swift Genre: - Pop - indie-pop - lofi - Rap Tracks: 1. After Hours 2. Cruel Summer 3. Sanctuary 4. Its You 5. Summer 6. Amazing 7. Best Friend 8. Kill Bill 9. Snooze 10. Amobea 11. Die for You 12. Save your Tears 13. good girls go to hell 14. My Future 15. Watch 16. Bellyache 17. cupid 18. sour grapes . My favorite taylor swift song is Cruel Summer because, contrary to the title, it brings back great memories from my summer. I got to meet a bunch of new people at a summer camp that summer and we all got really close because we lived on the UCSD campus together. At the program, there was a dance and we danced so much to Cruel Summer so every time the song plays it&#39;s just such a bop and it reminds me of the good times. .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/29/hashmaps.html",
            "relUrl": "/2023/03/29/hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "CollegeBoard 2018 MCQ",
            "content": ". Q31: . I misinterpreted the path that the triangle follows with the first program. I thought the triangle would forever be looping in a circle but it in fact does not and moves and eventually reaches the gray square. | . Q21: . I guess I cant tell left from right because I imagined the robot to turn left in my head when the code actually tells it to turn right. | .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/29/2018mc.html",
            "relUrl": "/2023/03/29/2018mc.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "CSUSM",
            "content": "Their Stories . Worked in a research lab for quantum physics | Failed some classes kept going | Starting a pHd . | Palomar for 3 years | Associate in math physics and cs | Majoring in cs at csusm | . Reflection . From the experiences of the speakers, I can see that what matters more is having strong and clear goals on how to move forward with ones career whether it be finding a job or managing finances. It is totally okay to fail a few classes because those failures aren’t what define you, its what you do going forward that is the most important. | . CSUSM . Highest turnover for cal state college | A lot of opportunities for internships | Qualcomm, some other stuff | Pathways include: chem | biochem | physics | circuits | cs (software, engineering) | cybersecurity | Engineering (mechanical and electrical) | . | Clubs include Cybersecurity | Robotics | Women in Stem | Society of Physics | Society of women engineers | Ostem (LGBTQ+ in STEM) | . | Internships: 4 weeks to 2 years | How to join? Join clubs | Check emails | Go to campus events | Google | . | Tips Try to avoid unpaid internships | Apply if you feel under qualified | Ask faculty members for help | Go to writing center for applications | . | . | Programs: Summer scholars program Paid | . | Quantum Bridge Program Paid | 4 weeks | Quantum information sciences Money | . | . | Grant: government funded money | Scholarship: privately funded money | Grades matter | Income | FAFSA -&gt; more economic opportunities studentaid.gov | Loans Unsubsidized: insures interest | Subsidized: does not insure interest | . | .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/28/csusm-extra-credit.html",
            "relUrl": "/2023/03/28/csusm-extra-credit.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Data Structures- Space and Time Complexity",
            "content": "Space and Time Complexity . Space complexity refers to the amount of memory used by an algorithm to complete its execution, as a function of the size of the input. The space complexity of an algorithm can be affected by various factors such as the size of the input data, the data structures used in the algorithm, the number and size of temporary variables, and the recursion depth. Time complexity refers to the amount of time required by an algorithm to run as the input size grows. It is usually measured in terms of the &quot;Big O&quot; notation, which describes the upper bound of an algorithm&#39;s time complexity. . Why do you think a programmer should care about space and time complexity? . A programmer should care about space and time complexity because these are both two major factors that can effect the efficiency and readability of code. The code that can take the least amount of time and fill the least space will be the most efficient when it comes to larger scale projects. | . Take a look at our lassen volcano example from the data compression tech talk. The first code block is the original image. In the second code block, change the baseWidth to rescale the image. . from IPython.display import Image, display from pathlib import Path # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) if __name__ == &quot;__main__&quot;: lassen_volcano = image_data(images=[{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) image_display(lassen_volcano) . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def scale_image(img): #baseWidth = 625 #baseWidth = 1250 #baseWidth = 2500 baseWidth = 5000 # see the effect of doubling or halfing the baseWidth #baseWidth = 10000 #baseWidth = 20000 #baseWidth = 40000 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size image[&#39;width&#39;], image[&#39;height&#39;] = img.size image[&#39;pixels&#39;] = image[&#39;width&#39;] * image[&#39;height&#39;] # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size image[&#39;scaled_width&#39;], image[&#39;scaled_height&#39;] = img.size image[&#39;scaled_pixels&#39;] = image[&#39;scaled_width&#39;] * image[&#39;scaled_height&#39;] # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data(images = [{&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}]) # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;pixels&#39;]:,}&quot;) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;], &quot; pixels: &quot;, f&quot;{image[&#39;scaled_pixels&#39;]:,}&quot;) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) . Big O Notation . Constant O(1) | Linear O(n) | Quadratic O(n^2) | Logarithmic O(logn) | Exponential (O(2^n)) | . numbers = list(range(1000)) . Constant O(1) . Time . An example of a constant time algorithm is accessing a specific element in an array. It does not matter how large the array is, accessing an element in the array takes the same amount of time. Therefore, the time complexity of this operation is constant, denoted by O(1). . print(numbers[263]) . 263 . Space . This function takes two integer inputs and returns their sum. The function does not create any additional data structures or variables that are dependent on the input size, so its space complexity is constant, or O(1). Regardless of how large the input integers are, the function will always require the same amount of memory to execute. . def sum(a, b): return a + b; . Linear O(n) . Time . An example of a linear time algorithm is traversing a list or an array. When the size of the list or array increases, the time taken to traverse it also increases linearly with the size. Hence, the time complexity of this operation is O(n), where n is the size of the list or array being traversed. . for i in numbers: print(i) . Space . This function takes a list of elements arr as input and returns a new list with the elements in reverse order. The function creates a new list reversed_arr of the same size as arr to store the reversed elements. The size of reversed_arr depends on the size of the input arr, so the space complexity of this function is O(n). As the input size increases, the amount of memory required to execute the function also increases linearly. . def reverse_list(arr): n = len(arr) reversed_arr = [None] * n for i in range(n): reversed_arr[n-i-1] = arr[i] return reversed_arr . Quadratic O(n^2) . Time . An example of a quadratic time algorithm is nested loops. When there are two nested loops that both iterate over the same collection, the time taken to complete the algorithm grows quadratically with the size of the collection. Hence, the time complexity of this operation is O(n^2), where n is the size of the collection being iterated over. . for i in numbers: for j in numbers: print(i,j) . Space . This function takes two matrices matrix1 and matrix2 as input and returns their product as a new matrix. The function creates a new matrix result with dimensions m by n to store the product of the input matrices. The size of result depends on the size of the input matrices, so the space complexity of this function is O(n^2). As the size of the input matrices increases, the amount of memory required to execute the function also increases quadratically. . def multiply_matrices(matrix1, matrix2): m = len(matrix1) n = len(matrix2[0]) result = [[0] * n] * m #this creates the new matrix based on the size of matrix 1 and 2 for i in range(m): for j in range(n): for k in range(len(matrix2)): result[i][j] += matrix1[i][k] * matrix2[k][j] return result print(multiply_matrices([[1,2],[3,4]], [[3,4],[1,2]])) . [[18, 28], [18, 28]] . Logarithmic O(logn) . Time . An example of a log time algorithm is binary search. Binary search is an algorithm that searches for a specific element in a sorted list by repeatedly dividing the search interval in half. As a result, the time taken to complete the search grows logarithmically with the size of the list. Hence, the time complexity of this operation is O(log n), where n is the size of the list being searched. . def binary_search(arr, low, high, target): while low &lt;= high: mid = (low + high) // 2 if arr[mid] == target: return mid elif arr[mid] &lt; target: low = mid + 1 else: high = mid - 1 target = 263 result = binary_search(numbers, 0, len(numbers) - 1, target) print(result) . 263 . Space . The same algorithm above has a O(logn) space complexity. The function takes an array arr, its lower and upper bounds low and high, and a target value target. The function searches for target within the bounds of arr by recursively dividing the search space in half until the target is found or the search space is empty. The function does not create any new data structures that depend on the size of arr. Instead, the function uses the call stack to keep track of the recursive calls. Since the maximum depth of the recursive calls is O(logn), where n is the size of arr, the space complexity of this function is O(logn). As the size of arr increases, the amount of memory required to execute the function grows logarithmically. . Exponential O(2^n) . Time . An example of an O(2^n) algorithm is the recursive implementation of the Fibonacci sequence. The Fibonacci sequence is a series of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive implementation of the Fibonacci sequence calculates each number by recursively calling itself with the two preceding numbers until it reaches the base case (i.e., the first or second number in the sequence). The algorithm takes O(2^n) time in the worst case because it has to calculate each number in the sequence by making two recursive calls. . def fibonacci(n): if n &lt;= 1: return n else: return fibonacci(n-1) + fibonacci(n-2) print(fibonacci(3)) . 2 . Space . This function takes a set s as input and generates all possible subsets of s. The function does this by recursively generating the subsets of the set without the first element, and then adding the first element to each of those subsets to generate the subsets that include the first element. The function creates a new list for each recursive call that stores the subsets, and each element in the list is a new list that represents a subset. The number of subsets that can be generated from a set of size n is 2^n, so the space complexity of this function is O(2^n). As the size of the input set increases, the amount of memory required to execute the function grows exponentially. . def generate_subsets(s): if not s: return [[]] subsets = generate_subsets(s[1:]) return [[s[0]] + subset for subset in subsets] + subsets . Using the time library, we are able to see the difference in time it takes to calculate the fibonacci function above. . Based on what is known about the other time complexities, hypothesize the resulting elapsed time if the function is replaced. | . import time start_time = time.time() print(fibonacci(34)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) start_time = time.time() print(fibonacci(35)) end_time = time.time() total_time = end_time - start_time print(&quot;Time taken:&quot;, total_time, &quot;seconds&quot;) . 5702887 Time taken: 1.314479112625122 seconds 9227465 Time taken: 2.0933010578155518 seconds . Hacks . Record your findings when testing the time elapsed of the different algorithms. . linear algorithms run faster with smaller data sets | quadratic and exponential ones run faster with larger data sets. | . | Why is time and space complexity important when choosing an algorithm? . A programmer should care about space and time complexity because these are both two major factors that can effect the efficiency and readability of code. The code that can take the least amount of time and fill the least space will be the most efficient when it comes to larger scale projects. | . | Should you always use a constant time algorithm / Should you never use an exponential time algorithm? Explain? . No, it&#39;s not always necessary to use a constant time algorithm nor is it always bad to use an exponential time algorithm. The choice of algorithm depends on the specific problem you are trying to solve, the size of the input data, and the resources available to you. If you have a small input size and limited resources, a constant time algorithm might be the most efficient choice. But if your input size is large, it might not be possible to solve the problem with a constant time algorithm, and you might have to resort to an algorithm with higher time complexity, such as an exponential time algorithm. | For example, in cryptography, brute force algorithms that try every possible key are often exponential time algorithms. While these algorithms are slow, they are still useful because the only known way to break the encryption is to try all possible keys. Similarly, in certain scientific simulations, it might be necessary to use an exponential time algorithm to model complex physical systems accurately. | . | What are some general patterns that you noticed to determine each algorithm&#39;s time and space complexity? . Nested loops: If an algorithm contains one or more nested loops, the time complexity is typically O(n^2), O(n^3), or some other polynomial time complexity, where n is the size of the input data. | Recursive calls: If an algorithm is recursive, the time complexity is often expressed using a recurrence relation. The complexity of a recursive algorithm is usually related to the number of recursive calls and the size of the data being processed. | Sorting and searching: If an algorithm involves sorting or searching data, the time complexity is usually expressed in terms of the number of elements being sorted or searched. For example, quicksort and merge sort have a time complexity of O(n log n), while linear search has a time complexity of O(n). | Data structures: If an algorithm uses data structures like arrays, lists, or trees, the space complexity is usually proportional to the size of the data being stored. For example, an algorithm that creates an array of size n has a space complexity of O(n). | . | . Although we will go more in depth later, time complexity is a key concept that relates to the different sorting algorithms. Do some basic research on the different types of sorting algorithms and their time complexity. . Bubble Sort: It is one of the simplest sorting algorithms, where each element is compared with its adjacent element and swapped if the adjacent element is greater. This process is repeated until the list is sorted. The time complexity of the bubble sort algorithm is O(n^2). . | Selection Sort: In this algorithm, the smallest element in the list is found and swapped with the first element. Then, the smallest element in the remaining list is found and swapped with the second element, and so on. The time complexity of the selection sort algorithm is O(n^2). . | Insertion Sort: This algorithm works by iterating through the list and inserting each element into its proper position in the sorted sub-list. The time complexity of the insertion sort algorithm is also O(n^2). . | Merge Sort: This algorithm divides the list into two halves recursively until each sub-list contains only one element. Then, the sub-lists are merged back together in sorted order. The time complexity of the merge sort algorithm is O(n log n). . | Quick Sort: It is a divide-and-conquer algorithm that selects a pivot element and partitions the list into two sub-lists, one with elements smaller than the pivot and the other with elements greater than the pivot. This process is repeated recursively until the list is sorted. The time complexity of the quick sort algorithm is O(n log n). . | Heap Sort: This algorithm sorts the elements by constructing a binary heap and repeatedly extracting the maximum element from the heap until the list is sorted. The time complexity of the heap sort algorithm is also O(n log n). . | Complete the Time and Space Complexity analysis questions linked below. Practice . What is the time, and space complexity of the following code: O(N * M) time, O(1) space | O(N + M) time, O(N + M) space | O(N + M) time, O(1) space | O(N * M) time, O(N + M) space | . | import random a = 0 b = 0 for i in range(N): a = a + random() for i in range(M): b= b + random() . the answer is option 3 . this is because the first loop is O(N) and the second loop is O(M). Since N and M are independent variables, so we can’t say which one is the leading term. Therefore Time complexity of the given problem will be O(N+M). | Since variables size does not depend on the size of the input, therefore Space Complexity will be constant or O(1). The algorithm stores the sum of N random numbers in one variable which is a. Thus the only space being used is the variable a thus the space is always 1. | . What is the time complexity of the following code: O(N) | O(N*log(N)) | O(N * Sqrt(N)) | O(N*N) | . | a = 0 for i in range(N): for j in reversed(range(i, N)): a = a + i + j . the answer is option 4 . there are two nested loops that both iterate over the same collection, thus the time taken to complete the algorithm grows quadratically with the size of the collection. | . What is the time complexity of the following code: O(n) | O(N log N) | O(n^2) | O(n^2Logn) | . | k = 0; for i in range(n//2,n): #iterates over the second half of the range from &quot;n//2&quot; to &quot;n&quot;. for j in range(2,n,pow(2,j)): #the step size, &quot;pow(2,j)&quot;, finds the 2^&quot;j&quot;. So, the step size of the loop doubles with each iteration. k = k + n / 2; . the answer is option 2 . the first for statement is N. The second for statement is logN. pow(2,j) represents the step size so for each iteration of the second for, j increases until 2^j = n which means that j = log(2)n. Then it stops so the time complexity is N*logN. | . What does it mean when we say that an algorithm X is asymptotically more efficient than Y? X will always be a better choice for small inputs | X will always be a better choice for large inputs | Y will always be a better choice for small inputs | X will always be a better choice for all inputs | . | the answer is option 2 . The worst-case time complexity of an algorithm is a measure of the largest amount of time it takes to run for any input size n. When we say that algorithm X is asymptotically more efficient than algorithm Y, we mean that X has a smaller worst-case time complexity than Y. This implies that as the input size increases towards infinity, X will eventually become faster than Y for large enough inputs. | For example, if the worst-case time complexity of algorithm X is O(n log n) and the worst-case time complexity of algorithm Y is O(n^2), we say that X is asymptotically more efficient than Y, because the growth rate of X is slower than that of Y as the input size increases. In practice, this means that as the input size gets larger, X will become faster than Y for large enough inputs. | . What is the time complexity of the following code: O(N) | O(Sqrt(N)) | O(N / 2) | O(log N) | . | a = 0 i = N while (i &gt; 0): a += i # adds the current value of &quot;i&quot; to the value of &quot;a&quot; and assigns the result to &quot;a&quot;. i //= 2 #divides &quot;i&quot; by 2 and assigns result to &quot;i&quot;. halves &quot;i&quot; in each iteration of the loop. . the answer is option 4 . based on how the code works, I can determine that every time it iterates, the value of &quot;i&quot; is being halved and added and assigned to the variable a. As &quot;i&quot; is halved more and more, it slowly approaches 0 thus I can imagine that N decreases in larger quantities at first but slows down later which follows a pattern of log N. | . Which of the following best describes the useful criterion for comparing the efficiency of algorithms? Time | Memory | Both of the above | None of the above | . | the answer is option 3. . this is because both time and memory are things that programmers must take into consideration when determining the efficiency of algorithms. Coders need to ensure that the algorithm doesn&#39;t take up too much memory but also make sure the program runs in reasonable time. | . How is time complexity measured? By counting the number of algorithms in an algorithm. | By counting the number of primitive operations performed by the algorithm on a given input size. | By counting the size of data input to the algorithm. | None of the above | . | the answer is option 2 . To determine the time complexity of an algorithm, we first identify the operations that the algorithm performs, and then we count the number of times each operation is executed as a function of the input size n. | . What will be the time complexity of the following code? O(n) | O(k) | O(logk(n)) | O(logn(k)) | . | for i in range(n): i=i*k . the answer is option 3 . idg | . What will be the time complexity of the following code? n | (n+1) | n(n-1) | n(n+1) | . | value = 0; for i in range(n): #iterates &quot;n&quot; times, with &quot;i&quot; taking on values from 0 to n-1. for j in range(i): # iterates &quot;i&quot; times, with &quot;j&quot; taking on values from 0 to i-1. value=value+1 . the answer is option 3 . the first for statement runs (n) times. the second for runs (n-1) times because &quot;i&quot; takes on values from 0 to n-1. Thus the overall time complexity is n*(n-1) | . Algorithm A and B have a worst-case running time of O(n) and O(logn), respectively. Therefore, algorithm B always runs faster than algorithm A. True | False | . | the answer is False . to have a worst case running time means that as the input size increases towards infinity, algorithm B will eventually become faster than A for large enough inputs. However for smaller inputs, it may be the case that algorithm A is faster, thus B does not always run faster than A | .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/21/DS-space_time_complexity.html",
            "relUrl": "/2023/03/21/DS-space_time_complexity.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? . - the columns of a database aka the information that populates the datatable. . What is the purpose of identity Column in SQL database? the purpose is to have unique rows of data and to be able to differentiate different users. | . | What is the purpose of a primary key in SQL database? the primary key has to be unique because it is used as an identifier for different people. For example, name would not be a good primary key because two people could have the same name. | . | What are the Data Types in SQL table? strings, integers, boolean, images | . | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? Each open SQLite database is represented by a Connection object, which is created using sqlite3.connect() . Their main purpose is creating Cursor objects, and Transaction control. | . | Same for cursor object? simplifies the code for the user. an instance using which you can invoke methods that execute SQLite statements, fetch data from the result sets of the queries. | . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? the cursor object contains attributes like special variables, function variables, and class variables | conn object contains attributes like special variables and function variables | . | Is &quot;results&quot; an object? How do you know? results is an object because it has attributes | . | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$QoVt8evz1pMablC0$98a66528fde3a7d3fe022a014e832614cd6a8a04c550d735abf326323bbbe47f&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$w28s6eeKNx7AMYAE$c8f4e80f3880b223827c697343d4438ed58bc45af93143b9e8ae6e431396dc6a&#39;, &#39;2023-03-19&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$jd4uFrjYMwFIUdty$d3abec0d9826a22d02fe0d884023fd828da135fd5a7882dd1cf749b87f7441cc&#39;, &#39;2023-03-19&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$xW2HC2oJy1PShdKn$e12b8e24dc1e9f3dd2e23726abdc7f536e36587926eab6ecf1863249fd8bc423&#39;, &#39;2023-03-19&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$PUruJRF0pAbrmXmc$fb77c97c83b28897b3dfe5828c7eff080b656d1e13fe0bd91009e39ad9eb8bb3&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sjkncdkjnsd&#39;, &#39;1921-10-21&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? out of the two create(), i think the sqlite3 method using conn and cur is better. It is able to accomplish the same thing with less code. It is less complicated and just as efficient. | . | Explain purpose of SQL INSERT. Is this the same as User init? SQL INSERT is a command used to add new records or rows of data to a database table | User init is a method used in object-oriented programming languages like Python. The init method is used to initialize the properties or attributes of an object when it is created. | . | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() create() . A new user record vivian has been created . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? It serves like a warning message. When the length of my password is less than 2, the message will appear. | . | Explain try/except, when would except occur? except would occur if there is a sqlite3 error | . | What code seems to be repeated in each of these examples to point, why is it repeated? cursor = conn.cursor() is repeated in each example. Most likely because this line of code is necessary to connect to the database | . | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() update() . The row with user id vivian the password has been successfully updated . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? When you perform a delete operation on a SQLite database, you are permanently removing data from the database. If you accidentally delete the wrong data or forget to include a WHERE clause in your delete statement, you can end up losing valuable data. | . | . In the print statements, what is the &quot;f&quot; and what does {uid} do? {uid} gets the uid of the user in question | f is the syntax for formatted string literals. Inside this string, you can write a Python expression between { } characters that can refer to variables or literal values. | . | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() delete() . The row with uid vivian was successfully deleted . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? a recursion is happening. As the function continues, it calls itself, thus the menu is always repeating | . | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$QoVt8evz1pMablC0$98a66528fde3a7d3fe022a014e832614cd6a8a04c550d735abf326323bbbe47f&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$w28s6eeKNx7AMYAE$c8f4e80f3880b223827c697343d4438ed58bc45af93143b9e8ae6e431396dc6a&#39;, &#39;2023-03-19&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$jd4uFrjYMwFIUdty$d3abec0d9826a22d02fe0d884023fd828da135fd5a7882dd1cf749b87f7441cc&#39;, &#39;2023-03-19&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$xW2HC2oJy1PShdKn$e12b8e24dc1e9f3dd2e23726abdc7f536e36587926eab6ecf1863249fd8bc423&#39;, &#39;2023-03-19&#39;) (5, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$PUruJRF0pAbrmXmc$fb77c97c83b28897b3dfe5828c7eff080b656d1e13fe0bd91009e39ad9eb8bb3&#39;, &#39;1920-10-21&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$SQMXExGcwtpNJCma$35041321bf5c105b6561a24ca81ff64706554ef4af4d435107029cb7da907a27&#39;, &#39;1921-10-21&#39;) . Could you refactor this menu? Make it work with a List? yes its better to refactor this menu since recursion can lead to stack overflow. | . | . def menu(): db_funcs = [ (&#39;c&#39;, create), (&#39;r&#39;, read), (&#39;u&#39;, update), (&#39;d&#39;, delete), (&#39;s&#39;, schema) ] while True: operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if len(operation)==0: # Escape Key return found = False for func in db_funcs: if (func[0]) == operation.lower(): found = True func[1]() if not found: print(&quot;Please enter c, r, u, or d&quot;) try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . Hacks . In this implementation, do you see procedural abstraction? yes. For example, there are functions for create, read, delete, and update. All of which make the overall code simpler. This can be seen in the menu function where all the functions for CRUD are called. Instead of having long lines of code under each elif statement, the create/read/delete/etc functions can just be called. | . | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. yes. For example, the class User is an example of data abstraction. it initializes multiple objects with several parameters. It would be very hard to save properties of a user into a database if they were not all comprised into one object. Thus, in this sense, the data is abstracted | . | . | . Reference... sqlite documentation . My Own Table . Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///instance/sqlite.db&#39; # path and filename of database #database = &#39;sqlite:///files/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . import json from sqlalchemy.exc import IntegrityError class College(db.Model): __tablename__ = &#39;colleges&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, unique=True, primary_key=True) _uid = db.Column(db.String(255), unique=True, nullable=False) _name = db.Column(db.String(255), unique=False, nullable=False) _rank = db.Column(db.Integer, unique=False, nullable=False) _acceptanceRate = db.Column(db.Integer, unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, uid, name, rank, acceptanceRate): self._name = name self._rank = rank self._acceptanceRate = acceptanceRate self._uid = uid # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # gets the name the college @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # gets the rank of the college @property def rank(self): return self._rank # a setter function, allows rank to be updated after initial object creation @rank.setter def rank(self, rank): self._rank = rank # a acceptanceRate getter @property def acceptanceRate(self): return self._acceptanceRate # a setter function to set the college&#39;s acceptanceRate @acceptanceRate.setter def acceptanceRate(self, acceptanceRate): self._acceptanceRate = acceptanceRate # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot; : self.name, &quot;rank&quot; : self.rank, &quot;acceptanceRate&quot; : self.acceptanceRate, &quot;uid&quot;: self.uid } def update(self, name=&quot;&quot;, rank=&quot;&quot;, acceptanceRate=&quot;&quot;, uid=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(rank) &gt; 0: self.rank = rank if len(acceptanceRate) &gt; 0: self.acceptanceRate = acceptanceRate if len(uid) &gt; 0: self.uid = uid db.session.add(self) # performs update when id exists n&quot;, db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . def initCollege(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; c1 = College(name=&#39;Princeton&#39;, rank=&#39;1&#39;, acceptanceRate=&#39;4.4&#39;, uid=&#39;princeton&#39;) c2 = College(name=&#39;MIT&#39;, rank=&#39;2&#39;, acceptanceRate=&#39;4&#39;, uid=&#39;mit&#39;) c3 = College(name=&#39;Harvard&#39;, rank=&#39;3&#39;, acceptanceRate=&#39;4&#39;, uid=&#39;harvard&#39;) c4 = College(name=&#39;Stanford&#39;, rank=&#39;4&#39;, acceptanceRate=&#39;3.9&#39;, uid=&#39;stanford&#39;) c5 = College(name=&#39;Yale&#39;, rank=&#39;5&#39;, acceptanceRate=&#39;5.3&#39;, uid=&#39;yale&#39;) c6 = College(name=&#39;U of Chicago&#39;, rank=&#39;6&#39;, acceptanceRate=&#39;6.5&#39;, uid=&#39;uofchicago&#39;) c7 = College(name=&#39;Johns Hopkins&#39;, rank=&#39;7&#39;, acceptanceRate=&#39;7.5&#39;, uid=&#39;johnshopkins&#39;) c8 = College(name=&#39;UPENN&#39;, rank=&#39;8&#39;, acceptanceRate=&#39;5.9&#39;, uid=&#39;upenn&#39;) c9 = College(name=&#39;CalTech&#39;, rank=&#39;9&#39;, acceptanceRate=&#39;3.9&#39;, uid=&#39;caltech&#39;) c10 = College(name=&#39;Duke&#39;, rank=&#39;10&#39;, acceptanceRate=&#39;6&#39;, uid=&#39;duke&#39;) c11 = College(name=&#39;Northwestern&#39;, rank=&#39;11&#39;, acceptanceRate=&#39;7&#39;, uid=&#39;northwestern&#39;) c12 = College(name=&#39;Dartmouth&#39;, rank=&#39;12&#39;, acceptanceRate=&#39;6.2&#39;, uid=&#39;dartmouth&#39;) c13 = College(name=&#39;Brown&#39;, rank=&#39;13&#39;, acceptanceRate=&#39;5.5&#39;, uid=&#39;brown&#39;) c14 = College(name=&#39;Vanderbilt&#39;, rank=&#39;14&#39;, acceptanceRate=&#39;7.1&#39;, uid=&#39;vanderbilt&#39;) c15 = College(name=&#39;Rice&#39;, rank=&#39;15&#39;, acceptanceRate=&#39;9.5&#39;, uid=&#39;rice&#39;) colleges = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for college in colleges: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = college.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {college.uid}, or error.&quot;) initCollege() . Created new uid princeton Created new uid mit Created new uid harvard Created new uid stanford Created new uid yale Created new uid uofchicago Created new uid johnshopkins Created new uid upenn Created new uid caltech Created new uid duke Created new uid northwestern Created new uid dartmouth Created new uid brown Created new uid vanderbilt Created new uid rice . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a definition of purpose. Flask app object Seen this used in past projects in trimester 1 and 2 | the purpose of the app object is to represent your web application. It is an instance of the Flask class, and it is used to configure your application and define its behavior. The app object is used to register routes, set up configuration variables, and define extensions that your application may use. | . | SQLAlchemy db object I have observed this working in my own CPT project. I use a sqlite database and I use the db object to read and create the database. | the purpose of the SQLAlchemy db object is to interact with your application&#39;s database. It is an instance of the SQLAlchemy class, and it provides a high-level interface for interacting with databases using Python code. | . | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///instance/sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and definition. class User:define the properties of the user including name, dob, password, etc. - db.Model inheritance: he ability to create a new model class that inherits from an existing model class, thereby inheriting all of its fields and methods | init method: constructor of the user objects | @property, @&lt;column&gt;.setter: these are the getter and setter methods respectively | create, read, update, delete methods: these methods allow you to manipulate and access the data in the sqlite.db. Read allows you to view the data, create builds the data into the table, and update and delete do as the name states. | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.add(self) # performs update when id exists n&quot;, db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . My own Database Model: Cars . class Car(db.Model): __tablename__ = &#39;cars&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, unique=True, primary_key=True) _uid = db.Column(db.String(255), unique=True, nullable=False) _brand = db.Column(db.String(255), unique=False, nullable=False) _color = db.Column(db.Integer, unique=False, nullable=False) _powersource = db.Column(db.String(255), unique=False, nullable=False) _type = db.Column(db.String(255), unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, uid, brand, color, type, powersource): self._brand = brand self._color = color self._powersource = powersource self._type = type self._uid = uid # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # gets the brand the car @property def brand(self): return self._brand # a setter function, allows brand to be updated after initial object creation @brand.setter def brand(self, brand): self._brand = brand # gets the color of the car @property def color(self): return self._color # a setter function, allows color to be updated after initial object creation @color.setter def color(self, color): self._color = color # gets the type of the manufacturer or the car @property def type(self): return self._type # a setter function, allows type to be updated after initial object creation @type.setter def type(self, type): self._type = type # a powersource getter @property def powersource(self): return self._powersource # a setter function to set the car&#39;s powersource @powersource.setter def powersource(self, powersource): self._powersource = powersource # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;brand&quot; : self.brand, &quot;color&quot; : self.color, &quot;powersource&quot; : self.powersource, &quot;type&quot; : self.type, &quot;uid&quot;: self.uid } def update(self, brand=&quot;&quot;, color=&quot;&quot;, powersource=&quot;&quot;, type=&quot;&quot;, uid=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(brand) &gt; 0: self.brand = brand if len(color) &gt; 0: self.color = color if len(powersource) &gt; 0: self.powersource = powersource if len(type) &gt; 0: self.type = type if len(uid) &gt; 0: self.uid = uid db.session.add(self) # performs update when id exists n&quot;, db.session.commit() return self def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Comment on how these work? Create All Tables from db Object: Uses SQLALchemy db.create_all() to initialize rows into sqlite.db | . | User Object Constructors: uses getter and setter methods to initialize user objects. | . | Try / Except : this feature is cleaning out bad or replicated data. It ensures that there will be no user with the same id. | . | | . My database data initializer . def initCars(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; c1 = Car(uid=&#39;1&#39;, brand=&#39;Acura&#39;, color=&#39;gray&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c2 = Car(uid=&#39;2&#39;, brand=&#39;Hyundai&#39;, color=&#39;red&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c3 = Car(uid=&#39;3&#39;, brand=&#39;Mazda&#39;, color=&#39;white&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c4 = Car(uid=&#39;4&#39;, brand=&#39;Honda&#39;, color=&#39;gray&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c5 = Car(uid=&#39;5&#39;, brand=&#39;Dodge&#39;, color=&#39;black&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c6 = Car(uid=&#39;6&#39;, brand=&#39;Toyota&#39;, color=&#39;white&#39;, powersource=&#39;ice&#39;, type=&#39;truck&#39;) c7 = Car(uid=&#39;7&#39;, brand=&#39;Hyundai&#39;, color=&#39;blue&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c8 = Car(uid=&#39;8&#39;, brand=&#39;Chevrolet&#39;, color=&#39;gray&#39;, powersource=&#39;ice&#39;, type=&#39;truck&#39;) c9 = Car(uid=&#39;9&#39;, brand=&#39;Jeep&#39;, color=&#39;gray&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c10 = Car(uid=&#39;10&#39;, brand=&#39;Nissan&#39;, color=&#39;silver&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c11 = Car(uid=&#39;11&#39;, brand=&#39;Lexus&#39;, color=&#39;black&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c12 = Car(uid=&#39;12&#39;, brand=&#39;Kia&#39;, color=&#39;red&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c13 = Car(uid=&#39;13&#39;, brand=&#39;Mazda&#39;, color=&#39;red&#39;, powersource=&#39;ice&#39;, type=&#39;truck&#39;) c14 = Car(uid=&#39;14&#39;, brand=&#39;Ford&#39;, color=&#39;white&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c15 = Car(uid=&#39;15&#39;, brand=&#39;Kia&#39;, color=&#39;red&#39;, powersource=&#39;ice&#39;, type=&#39;truck&#39;) c16 = Car(uid=&#39;16&#39;, brand=&#39;Ford&#39;, color=&#39;gray&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c17 = Car(uid=&#39;17&#39;, brand=&#39;Jeep&#39;, color=&#39;red&#39;, powersource=&#39;ice&#39;, type=&#39;truck&#39;) c18 = Car(uid=&#39;18&#39;, brand=&#39;Toyota&#39;, color=&#39;red&#39;, powersource=&#39;electric&#39;, type=&#39;suv&#39;) c19 = Car(uid=&#39;19&#39;, brand=&#39;Kia&#39;, color=&#39;silver&#39;, powersource=&#39;ice&#39;, type=&#39;truck&#39;) c20 = Car(uid=&#39;20&#39;, brand=&#39;Honda&#39;, color=&#39;white&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c21 = Car(uid=&#39;21&#39;, brand=&#39;Hyundai&#39;, color=&#39;white&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c22 = Car(uid=&#39;22&#39;, brand=&#39;Chevrolet&#39;, color=&#39;white&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c23 = Car(uid=&#39;23&#39;, brand=&#39;Jeep&#39;, color=&#39;white&#39;, powersource=&#39;ice&#39;, type=&#39;suv&#39;) c24 = Car(uid=&#39;24&#39;, brand=&#39;BMW&#39;, color=&#39;gray&#39;, powersource=&#39;ice&#39;, type=&#39;sedan&#39;) c25 = Car(uid=&#39;25&#39;, brand=&#39;Ferrari&#39;, color=&#39;yellow&#39;, powersource=&#39;ice&#39;, type=&#39;sports&#39;) c26 = Car(uid=&#39;26&#39;, brand=&#39;Tesla&#39;, color=&#39;red&#39;, powersource=&#39;electric&#39;, type=&#39;suv&#39;) c27 = Car(uid=&#39;27&#39;, brand=&#39;Tesla&#39;, color=&#39;blue&#39;, powersource=&#39;electric&#39;, type=&#39;suv&#39;) c28 = Car(uid=&#39;28&#39;, brand=&#39;Ford&#39;, color=&#39;white&#39;, powersource=&#39;electric&#39;, type=&#39;truck&#39;) c29 = Car(uid=&#39;29&#39;, brand=&#39;Ford&#39;, color=&#39;blue&#39;, powersource=&#39;electric&#39;, type=&#39;truck&#39;) c30 = Car(uid=&#39;30&#39;, brand=&#39;Audi&#39;, color=&#39;black&#39;, powersource=&#39;electric&#39;, type=&#39;suv&#39;) c31 = Car(uid=&#39;31&#39;, brand=&#39;Ferrari&#39;, color=&#39;red&#39;, powersource=&#39;electric&#39;, type=&#39;sports&#39;) c32 = Car(uid=&#39;32&#39;, brand=&#39;Mercedes&#39;, color=&#39;silver&#39;, powersource=&#39;electric&#39;, type=&#39;sedan&#39;) c33 = Car(uid=&#39;33&#39;, brand=&#39;Mazda&#39;, color=&#39;silver&#39;, powersource=&#39;electric&#39;, type=&#39;suv&#39;) c34 = Car(uid=&#39;34&#39;, brand=&#39;Nissan&#39;, color=&#39;blue&#39;, powersource=&#39;electric&#39;, type=&#39;suv&#39;) c35 = Car(uid=&#39;35&#39;, brand=&#39;Subaru&#39;, color=&#39;red&#39;, powersource=&#39;electric&#39;, type=&#39;suv&#39;) cars = [c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15, c16, c17, c18, c19, c20, c21, c22, c23, c24, c25, c26, c27, c28, c29, c30, c31, c32, c33, c34, c35] #try: # db.session.query(Car).delete() # db.session.commit() #except: # db.session.rollback() &quot;&quot;&quot;Builds sample car/note(s) data&quot;&quot;&quot; for car in cars: try: object = car.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {car.uid}, or error.&quot;) initCars() . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by:- this filters the database by uid and identifies the user whose uid matches the input 2. user.password: once the uid is received, the function check-credentials compares that inputted password to the password of the user with the inputted uid. In essence, this is like a security feature. | . | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object def find_by_caruid(uid): with app.app_context(): car = Car.query.filter_by(_uid=uid).first() return car # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except:- the find_by_uid() filters the database by uid and identifies the user whose uid matches the input. it then returns that user. - the try/except feature is cleaning out bad or replicated data. It ensures that there will be no user with the same id. | user = User(...) this initializes the user objects before date of birth | . | user.dob and try/except: user.dob is a placeholder for the birth date of the user. It ensures that users write their date of birth in the right format otherwise an exception occurs and the date of birth is set to the default. | the try/except feature is cleaning out bad or replicated data. It ensures that there will be no user with the same id. | . | user.create() and try/except: user.create() creates a new user to add the the sqlite table based off of the input it receives from the user. | the try/except feature is cleaning out bad or replicated data. It ensures that there will be no user with the same id. | . | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Create and Read for Car database (my database) . def createCar(): uid = input(&quot;Enter your car id:&quot;) car = find_by_caruid(uid) try: print(&quot;Found n&quot;, car.read()) return except: pass # keep going # request value that ensure creating valid object brand = input(&quot;What brand is the car?&quot;) color = input(&quot;What color is the car?&quot;) powersource = input(&quot;What is the car&#39;s powersource?&quot;) type = input(&quot;What type of car is it?&quot;) # Initialize User object before date car = Car(brand=brand, color=color, powersource=powersource, type=type, uid=uid ) # write object to database with app.app_context(): try: object = car.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error powersource {uid}&quot;) createCar() . OperationalError Traceback (most recent call last) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3280, in Engine._wrap_pool_connect(self, fn, connection) 3279 try: -&gt; 3280 return fn() 3281 except dialect.dbapi.Error as e: File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:310, in Pool.connect(self) 303 &#34;&#34;&#34;Return a DBAPI connection from the pool. 304 305 The connection is instrumented such that when its (...) 308 309 &#34;&#34;&#34; --&gt; 310 return _ConnectionFairy._checkout(self) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:868, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy) 867 if not fairy: --&gt; 868 fairy = _ConnectionRecord.checkout(pool) 870 fairy._pool = pool File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:476, in _ConnectionRecord.checkout(cls, pool) 474 @classmethod 475 def checkout(cls, pool): --&gt; 476 rec = pool._do_get() 477 try: File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:256, in NullPool._do_get(self) 255 def _do_get(self): --&gt; 256 return self._create_connection() File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:256, in Pool._create_connection(self) 254 &#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34; --&gt; 256 return _ConnectionRecord(self) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:371, in _ConnectionRecord.__init__(self, pool, connect) 370 if connect: --&gt; 371 self.__connect() 372 self.finalize_callback = deque() File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:665, in _ConnectionRecord.__connect(self) 664 except Exception as e: --&gt; 665 with util.safe_reraise(): 666 pool.logger.debug(&#34;Error on connect(): %s&#34;, e) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70, in safe_reraise.__exit__(self, type_, value, traceback) 69 if not self.warn_only: &gt; 70 compat.raise_( 71 exc_value, 72 with_traceback=exc_tb, 73 ) 74 else: File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/util/compat.py:208, in raise_(***failed resolving arguments***) 207 try: --&gt; 208 raise exception 209 finally: 210 # credit to 211 # https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/ 212 # as the __traceback__ object creates a cycle File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:661, in _ConnectionRecord.__connect(self) 660 self.starttime = time.time() --&gt; 661 self.dbapi_connection = connection = pool._invoke_creator(self) 662 pool.logger.debug(&#34;Created new connection %r&#34;, connection) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/create.py:590, in create_engine.&lt;locals&gt;.connect(connection_record) 589 return connection --&gt; 590 return dialect.connect(*cargs, **cparams) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/default.py:597, in DefaultDialect.connect(self, *cargs, **cparams) 595 def connect(self, *cargs, **cparams): 596 # inherits the docstring from interfaces.Dialect.connect --&gt; 597 return self.dbapi.connect(*cargs, **cparams) OperationalError: unable to open database file The above exception was the direct cause of the following exception: OperationalError Traceback (most recent call last) Cell In[12], line 32 29 except: # error raised if object not created 30 print(&#34;Unknown error powersource {uid}&#34;) &gt; 32 createCar() Cell In[12], line 3, in createCar() 1 def createCar(): 2 uid = input(&#34;Enter your car id:&#34;) -&gt; 3 car = find_by_caruid(uid) 4 try: 5 print(&#34;Found n&#34;, car.read()) Cell In[9], line 9, in find_by_caruid(uid) 7 def find_by_caruid(uid): 8 with app.app_context(): -&gt; 9 car = Car.query.filter_by(_uid=uid).first() 10 return car File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/orm/query.py:2819, in Query.first(self) 2817 return self._iter().first() 2818 else: -&gt; 2819 return self.limit(1)._iter().first() File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/orm/query.py:2903, in Query._iter(self) 2900 params = self._params 2902 statement = self._statement_20() -&gt; 2903 result = self.session.execute( 2904 statement, 2905 params, 2906 execution_options={&#34;_sa_orm_load_options&#34;: self.load_options}, 2907 ) 2909 # legacy: automatically set scalars, unique 2910 if result._attributes.get(&#34;is_single_entity&#34;, False): File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/orm/session.py:1711, in Session.execute(self, statement, params, execution_options, bind_arguments, _parent_execute_state, _add_event, **kw) 1707 execution_options = execution_options.union( 1708 dict(future_result=False) 1709 ) 1710 else: -&gt; 1711 conn = self._connection_for_bind(bind) 1712 result = conn._execute_20(statement, params or {}, execution_options) 1714 if compile_state_cls: File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/orm/session.py:1552, in Session._connection_for_bind(self, engine, execution_options, **kw) 1549 TransactionalContext._trans_ctx_check(self) 1551 if self._transaction is not None or self._autobegin(): -&gt; 1552 return self._transaction._connection_for_bind( 1553 engine, execution_options 1554 ) 1556 assert self._transaction is None 1557 assert self.autocommit File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/orm/session.py:747, in SessionTransaction._connection_for_bind(self, bind, execution_options) 742 raise sa_exc.InvalidRequestError( 743 &#34;Session already has a Connection associated for the &#34; 744 &#34;given Connection&#39;s Engine&#34; 745 ) 746 else: --&gt; 747 conn = bind.connect() 748 local_connect = True 750 try: File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3234, in Engine.connect(self, close_with_result) 3219 def connect(self, close_with_result=False): 3220 &#34;&#34;&#34;Return a new :class:`_engine.Connection` object. 3221 3222 The :class:`_engine.Connection` object is a facade that uses a DBAPI (...) 3231 3232 &#34;&#34;&#34; -&gt; 3234 return self._connection_cls(self, close_with_result=close_with_result) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/base.py:96, in Connection.__init__(self, engine, connection, close_with_result, _branch_from, _execution_options, _dispatch, _has_events, _allow_revalidate) 91 self._has_events = _branch_from._has_events 92 else: 93 self._dbapi_connection = ( 94 connection 95 if connection is not None &gt; 96 else engine.raw_connection() 97 ) 99 self._transaction = self._nested_transaction = None 100 self.__savepoint_seq = 0 File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3313, in Engine.raw_connection(self, _connection) 3291 def raw_connection(self, _connection=None): 3292 &#34;&#34;&#34;Return a &#34;raw&#34; DBAPI connection from the connection pool. 3293 3294 The returned object is a proxied version of the DBAPI (...) 3311 3312 &#34;&#34;&#34; -&gt; 3313 return self._wrap_pool_connect(self.pool.connect, _connection) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3283, in Engine._wrap_pool_connect(self, fn, connection) 3281 except dialect.dbapi.Error as e: 3282 if connection is None: -&gt; 3283 Connection._handle_dbapi_exception_noconnection( 3284 e, dialect, self 3285 ) 3286 else: 3287 util.raise_( 3288 sys.exc_info()[1], with_traceback=sys.exc_info()[2] 3289 ) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/base.py:2117, in Connection._handle_dbapi_exception_noconnection(cls, e, dialect, engine) 2115 util.raise_(newraise, with_traceback=exc_info[2], from_=e) 2116 elif should_wrap: -&gt; 2117 util.raise_( 2118 sqlalchemy_exception, with_traceback=exc_info[2], from_=e 2119 ) 2120 else: 2121 util.raise_(exc_info[1], with_traceback=exc_info[2]) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/util/compat.py:208, in raise_(***failed resolving arguments***) 205 exception.__cause__ = replace_context 207 try: --&gt; 208 raise exception 209 finally: 210 # credit to 211 # https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/ 212 # as the __traceback__ object creates a cycle 213 del exception, replace_context, from_, with_traceback File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/base.py:3280, in Engine._wrap_pool_connect(self, fn, connection) 3278 dialect = self.dialect 3279 try: -&gt; 3280 return fn() 3281 except dialect.dbapi.Error as e: 3282 if connection is None: File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:310, in Pool.connect(self) 302 def connect(self): 303 &#34;&#34;&#34;Return a DBAPI connection from the pool. 304 305 The connection is instrumented such that when its (...) 308 309 &#34;&#34;&#34; --&gt; 310 return _ConnectionFairy._checkout(self) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:868, in _ConnectionFairy._checkout(cls, pool, threadconns, fairy) 865 @classmethod 866 def _checkout(cls, pool, threadconns=None, fairy=None): 867 if not fairy: --&gt; 868 fairy = _ConnectionRecord.checkout(pool) 870 fairy._pool = pool 871 fairy._counter = 0 File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:476, in _ConnectionRecord.checkout(cls, pool) 474 @classmethod 475 def checkout(cls, pool): --&gt; 476 rec = pool._do_get() 477 try: 478 dbapi_connection = rec.get_connection() File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/impl.py:256, in NullPool._do_get(self) 255 def _do_get(self): --&gt; 256 return self._create_connection() File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:256, in Pool._create_connection(self) 253 def _create_connection(self): 254 &#34;&#34;&#34;Called by subclasses to create a new ConnectionRecord.&#34;&#34;&#34; --&gt; 256 return _ConnectionRecord(self) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:371, in _ConnectionRecord.__init__(self, pool, connect) 369 self.__pool = pool 370 if connect: --&gt; 371 self.__connect() 372 self.finalize_callback = deque() File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:665, in _ConnectionRecord.__connect(self) 663 self.fresh = True 664 except Exception as e: --&gt; 665 with util.safe_reraise(): 666 pool.logger.debug(&#34;Error on connect(): %s&#34;, e) 667 else: 668 # in SQLAlchemy 1.4 the first_connect event is not used by 669 # the engine, so this will usually not be set File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/util/langhelpers.py:70, in safe_reraise.__exit__(self, type_, value, traceback) 68 self._exc_info = None # remove potential circular references 69 if not self.warn_only: &gt; 70 compat.raise_( 71 exc_value, 72 with_traceback=exc_tb, 73 ) 74 else: 75 if not compat.py3k and self._exc_info and self._exc_info[1]: 76 # emulate Py3K&#39;s behavior of telling us when an exception 77 # occurs in an exception handler. File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/util/compat.py:208, in raise_(***failed resolving arguments***) 205 exception.__cause__ = replace_context 207 try: --&gt; 208 raise exception 209 finally: 210 # credit to 211 # https://cosmicpercolator.com/2016/01/13/exception-leaks-in-python-2-and-3/ 212 # as the __traceback__ object creates a cycle 213 del exception, replace_context, from_, with_traceback File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/pool/base.py:661, in _ConnectionRecord.__connect(self) 659 try: 660 self.starttime = time.time() --&gt; 661 self.dbapi_connection = connection = pool._invoke_creator(self) 662 pool.logger.debug(&#34;Created new connection %r&#34;, connection) 663 self.fresh = True File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/create.py:590, in create_engine.&lt;locals&gt;.connect(connection_record) 588 if connection is not None: 589 return connection --&gt; 590 return dialect.connect(*cargs, **cparams) File ~/anaconda3/lib/python3.10/site-packages/sqlalchemy/engine/default.py:597, in DefaultDialect.connect(self, *cargs, **cparams) 595 def connect(self, *cargs, **cparams): 596 # inherits the docstring from interfaces.Dialect.connect --&gt; 597 return self.dbapi.connect(*cargs, **cparams) OperationalError: (sqlite3.OperationalError) unable to open database file (Background on this error at: https://sqlalche.me/e/14/e3q8) . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all | json_ready assignment, google List Comprehension | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . def readCar(): with app.app_context(): table = Car.query.all() json_ready = [car.read() for car in table] # &quot;List Comprehensions&quot;, for each car add car.read() to list return json_ready readCar() . Hacks . Update functionality . First for the Users | . def update(uid, new_name): with app.app_context(): user = db.session.query(User).filter_by(_uid=uid).first() try: print(&quot;Found n&quot;, user.read()) user.update(new_name) return except: pass # keep going uid = input(&quot;Enter your user id:&quot;) new_name = input(&quot;Enter new user name:&quot;) update(uid, new_name) . Found {&#39;id&#39;: 7, &#39;name&#39;: &#39;Vivian Ni&#39;, &#39;uid&#39;: &#39;vivian&#39;, &#39;dob&#39;: &#39;05-13-2006&#39;, &#39;age&#39;: 16} . for the cars | . def updateCar(uid, new_brand, new_color, new_powersource, new_type): with app.app_context(): car = db.session.query(Car).filter_by(_uid=uid).first() try: print(&quot;Found n&quot;, car.read()) car.update(new_brand, new_color, new_powersource, new_type) return except: pass # keep going uid = input(&quot;Enter your car id:&quot;) new_brand = input(&quot;Enter new brand:&quot;) new_color = input(&quot;Enter new color:&quot;) new_powersource = input(&quot;Enter new powersource:&quot;) new_type = input(&quot;Enter new type:&quot;) updateCar(uid, new_brand, new_color, new_powersource, new_type) . Found {&#39;id&#39;: 36, &#39;brand&#39;: &#39;tesla&#39;, &#39;color&#39;: &#39;pink&#39;, &#39;powersource&#39;: &#39;ice&#39;, &#39;type&#39;: &#39;sedan&#39;, &#39;uid&#39;: &#39;36&#39;} . Delete functionality . for the users | . def delete(uid): with app.app_context(): user = db.session.query(User).filter_by(_uid=uid).first() try: print(&quot;Found n&quot;, user.read()) user.delete() return except: pass # keep going uid = input(&quot;Enter your user id:&quot;) delete(uid) . for the cars | . def deleteCar(uid): with app.app_context(): car = db.session.query(Car).filter_by(_uid=uid).first() try: print(&quot;Found n&quot;, car.read()) car.delete() return except: pass # keep going uid = input(&quot;Enter your car uid:&quot;) deleteCar(uid) . Found {&#39;id&#39;: 36, &#39;brand&#39;: &#39;tesla&#39;, &#39;color&#39;: &#39;pink&#39;, &#39;powersource&#39;: &#39;electric&#39;, &#39;type&#39;: &#39;sedan&#39;, &#39;uid&#39;: &#39;36&#39;} .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "CollegeBoard TRI 2 MC Final Notes",
            "content": ". Takeaways . On my collegeboard MC #2, my score was 44/50 | The topics of questions I got wrong included Algorithmic Efficiency | Simulations | Calling Procedures | Beneficial and Harmful Effects | Legal and Ethical Concerns | Safe Computing | . | . Questions . Q50: A computer scientist is analyzing four different algorithms used to sort a list. The table below shows the number of steps each algorithm took to sort lists of different sizes. Based on the values in the table, which of the algorithms appear to run in reasonable time? . . I chose B and C when it was actually A and D | Notes I think I just didn’t understand what this question was asking me to do. | The reason the answer is neither B or C is because as the size of the list grows the number of steps required to sort them grows at an exponential rate and factorial rate respectively. This indicates that the algorithm does not run in reasonable time. | A and D are the answers because they increase at a rate that is reasonable as the list grows in size | . | . Q49: A city planner is using simulation software to study crowd flow out of a large arena after an event has ended. The arena is located in an urban city. Which of the following best describes a limitation of using a simulation for this purpose? . I chose: “The model used by the simulation software cannot be modified once the simulation has been used.” but the answer was “The model used by the simulation software often omits details so that it is easier to implement.” . | Notes . The model used by a simulation can be modified, both before and after running the simulation. In fact, one of the benefits of using a simulation is the ease of modification. | Simulations are limited by the model that is used. There may be many reasons for using a simplified model, including ease of implementation. Thus B was the answer | . | . Q43: What is displayed as a result of the procedure call proc2(“birthday”, “to you”) ? . . I chose “to you birthday happy” but the answer was “to you happy birthday” | Notes In proc2, the call to proc1 occurs before the DISPLAY statement, so “to you” and “happy” are displayed before “birthday”. | . | . Q17: Both online newspapers and social media sites are used to distribute information on the Internet. Which of the following best describes an advantage that online newspapers have over social media sites? . I chose the answer that said “The ability to provide information that is widely accessible” but the correct answer was “The ability to provide credibility to the information distributed” | Notes my answer choice doesn’t make total sense because not everyone has access to the internet or a device so online newspapers are in fact not accessible to everyone. This was something that we covered in the digital divide unit. | Online newspapers are usually run out in the open, in that the people who create the newspaper are clearly noted on the website. In addition, these online newspapers are often connected to physical newspapers, which are considered credible sources of information. | . | . Q13: An author is considering publishing an e-book using a Creative Commons license. In which of the following situations would it be better for the author to use a Creative Commons license instead of a traditional copyright? . The author wants to make the e-book available as a free download. | The author wants to prevent people from sharing copies of the e-book on peer-to-peer networks. | The author wants to allow people permission to use and modify the e-book. | I said 1 only but the answer was 1 and 3 | Notes Statement I is correct because the Creative Commons license is designed to increase the amount of content available to the public for free. | Statement III is correct because under Creative Commons the author can stipulate what kind of modification is allowed by users. | I need to review what licenses allow people to do | . | . Q2: Which of the following has the greatest potential for compromising a user’s personal privacy? . I chose “The Internet Protocol (IP) address of the user’s computer” | The correct answer was “A group of cookies stored by the user’s Web browser” | Notes The aggregation of information in browser cookies can be used by websites that the user visits to track the user and collect information about the user. This is why they are potential concerns for a user’s privacy | The IP address of a user’s computer is required for the user to send and receive information on the Internet. The IP address in itself does not contain any extra information about the user. However, isn’t it true that an IP address can reveal information on where your exact location is? Or is there security to prevent this? | . | .",
            "url": "https://vivianknee.github.io/FastPages/week25/2023/03/11/mc3final.html",
            "relUrl": "/week25/2023/03/11/mc3final.html",
            "date": " • Mar 11, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=True)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 0 123 3.57 1 246 4.00 2 578 2.78 3 469 3.45 4 324 4.75 5 313 3.33 6 145 2.95 7 167 3.90 8 235 3.15 9 nil 2.80 10 469 3.45 11 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=True)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . College Board practice problems for 2.3 . Q1: A researcher is analyzing data about students in a school district to determine whether there is a relationship between grade point average and number of absences. The researcher plans on compiling data from several sources to create a record for each student. Upon compiling the data, the researcher identifies a problem due to the fact that neither data source uses a unique ID number for each student. Which of the following best describes the problem caused by the lack of unique ID numbers? . Students who have the same name may be confused with each other. | A unique identifier would be required in order to distinguish between two students with the same first and last names. | . Q2: A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? . Different counties may organize data in different ways. | It will be a challenge to clean the data from the different counties to make the data uniform. The way pollution data is captured and organized may vary significantly from county to county. | . Q3: A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? . Users might enter abbreviations for the names of cities or Users might misspell the name of the city. | Different users may abbreviate city names differently. This may require the student to clean the data to make it uniform before it can be processed. | . Q4: A database of information about shows at a concert venue contains the following information: Name of artist performing at the show, Date of show, Total dollar amount of all tickets sold. Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? . Average ticket price | This makes sense because if an artist&#39;s ticket cost more, they are considered more valuable, and the reason why a person might be considered more valuable is because they are more popular. | . Q5: A camera mounted on the dashboard of a car captures an image of the view from the driver’s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car’s speed, the date and time, and the car’s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? . The number of bicycles the car passed on a particular day | Determining the number of bicycles the car encountered would require the use of image recognition software to examine the images collected by the camera. The images are the data collected and no metadata would be required. | . Q6: A teacher sends students an anonymous survey in order to learn more about the students’ work habits. The survey contains the following questions. Which of the following questions about the students who responded to the survey can the teacher answer by analyzing the survey results? . Do students who enjoy the subject material tend to spend more time on homework each night than the other students do? | Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do? | Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do? | 1 and 2 | The survey questions collect data on how much students enjoy a subject and how many hours they spend on hw and studying. As a result, putting together the data will give information about correlation between liking a subject and spending more time on hw (or any other combo). However, the data does not account for what type of student earns higher grades | . Find your own dataset . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous.Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) The data set I chose is synonymous with my CPT project. It is a car database from Kaggle. The US Cars&#39;data was scraped from AUCTION EXPORT.com. This dataset includes Information about 28 brands of clean and used vehicles for sale in US. Twelve features were assembled for each car in the dataset. | . | . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest data = pd.read_csv(&#39;files/cars.csv&#39;).sort_values(by=[&#39;price&#39;], ascending=False) columns = data[[&#39;brand&#39;,&#39;color&#39;,&#39;price&#39;]] print(&quot;--Price Top 10&quot;) print(columns.head(10)) print() print(&quot;--Price Bottom 10&quot;) print(columns.tail(10)) . --Price Top 10 brand color price 466 mercedes-benz silver 84900 274 dodge blue 67000 371 bmw black 61200 384 ford blue 58500 393 lexus silver 55600 44 ford black 55000 353 harley-davidson black 54680 49 ford black 54000 365 ford white 53500 95 bmw blue 53500 --Price Bottom 10 brand color price 312 chevrolet white 25 435 ford gray 25 366 ford gray 25 359 gmc white 25 356 chevrolet gray 25 431 chevrolet black 25 281 dodge dark blue 25 495 chevrolet white 25 337 ford white 25 420 chevrolet silver 0 . print(&quot;Max price&quot;) print(columns[columns.price == columns.price.max()]) print() print(&quot;Min price&quot;) print(columns[columns.price == columns.price.min()]) print() print(&quot;The median price of the cars is: &quot; + str(columns.price.median())) print() print(&quot;The mean price of the cars is: &quot; + str(columns.price.mean())) . Max price brand color price 466 mercedes-benz silver 84900 Min price brand color price 420 chevrolet silver 0 The median price of the cars is: 10565.0 The mean price of the cars is: 14239.672480620155 . I wanted to try fetching from the database I made . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://finalssvgcars.duckdns.org/api/cars/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json) # filter endpoint for brand print(df.loc[0:5, &#39;brand&#39;:&#39;type&#39;]) # show row 0 through 5 and columns brand through type fetch() . brand color id image powersource pricerange type 0 Acura gray 1 1 ice 2 suv 1 Hyundai red 2 2 ice 1 sedan 2 Mazda white 3 3 ice 1 sedan 3 Honda gray 4 4 ice 1 suv 4 Dodge black 5 5 ice 2 suv 5 Toyota white 6 6 ice 2 truck . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . Data compression is the reduction of the number of bits needed to represent data | Data compression is used to save transmission time and storage space. | lossy data can reduce data but the original data is not recovered | lossless data lets you restore and recover | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? cd, ls, cat, mv, etc | . | What are the command you use in Windows terminal to access files? cd, dir, del, move, etc | . | What are some of the major differences? the windows terminal commands are less abbreviated than the ones used by linux and Mac | . | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? If you list the wrong path, then the code will not be abel to display the image because the image does not exist at that path. | . | How does the meta data source and label relate to Unit 5 topics? . | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython is an interactive command-line interface for Python that provides features like tab completion, object introspection, and easy access to the system shell. IPython is interesting in Jupyter Notebooks because it provides a more powerful and flexible way to work with Pandas data frames and images. | IPython provides tab completion for column names and easy access to the documentation of Pandas functions. This makes it easier to explore and manipulate data frames interactively. In addition, IPython provides the ability to display data frames in a more readable format, making it easier to view and analyze large data sets. | . | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS. . How is Base64 similar or different to Binary and Hexadecimal? Binary is a base-2 numbering system that uses only two symbols, typically 0 and 1, to represent data. Hexadecimal, on the other hand, is a base-16 numbering system that uses 16 symbols to represent data, typically the digits 0-9 and the letters A-F. Base64 is a method of encoding data using a set of 64 characters, typically consisting of letters, digits, and symbols. Base64 is often used to represent binary data as text, for example in email attachments or in URLs. Unlike binary and hexadecimal, Base64 is specifically designed to be human-readable and easy to work with for non-technical users. | . | Translate first 3 letters of your name to Base64. viv -&gt; dml2 | . | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? When watching movies or shows on a computer, sometimes the screen will be in a buffering phase. This means that its probably queuing all the frames of the movie. | . | From your consumer experience, what effects have you experienced from buffering? Usually buffering is associated with lag so when a movie I&#39;m watching is buffering, I can expect the entire experience to be laggy and unenjoyable. | . | How do these effects apply to images? Really big images could buffer since there are a lot of frames that need to be loaded. | . | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? yes | . | Describe Grey Scale algorithm in English or Pseudo code? Load the colored image into memory. | Create a new empty image of the same size as the original image to store the grayscale version. | For each pixel in the original image:a. Retrieve the RGB color values for the pixel. b. Calculate the average of the RGB values. c. Assign the average value to all three RGB channels of the corresponding pixel in the new grayscale image. | Save the grayscale image to disk. | | Describe scale image? What is before and after on pixels in three images? Scaling an image refers to the process of resizing it to a larger or smaller size while maintaining its aspect ratio. The aspect ratio of an image is the ratio of its width to its height. | When an image is scaled, each pixel in the original image is either expanded or compressed to fit the new size. This can result in changes in the overall visual appearance of the image. | . | Is scale image a type of compression? If so, line it up with College Board terms described? Scaling an image can be seen as a form of compression, specifically as a form of lossy compression, which is a type of compression that reduces the file size of an image by removing or reducing redundant information or data that can be reconstructed to a certain extent without losing too much visual information. | . | . import sys print(sys.executable) # c: Users vivia AppData Local Programs Python Python310 -m pip install pillow . c: Users vivia AppData Local Programs Python Python310 python.exe . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL adds support for opening, manipulating, and saving many different image file formats | . | numpy used to perform a wide variety of mathematical operations on arrays. | . | base64 provides functions for encoding binary data to printable ASCII characters and decoding such encodings back to binary data. | . | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . Hacks . College Board practice problems for 2.2 . Q1: Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? . A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. | This is correct because lossless compression algorithms are guaranteed to be able to reconstruct the original data, while lossy compression algorithms are not. | . Q2: A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user’s needs? . Compressing the file using a lossless compression algorithm before uploading it | This is correct because lossless compression algorithms allow for complete reconstruction of the original data and typically reduce the size of the data. | . Q3: A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? . Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. | This is correct because since lossy data is unable to allow for complete reconstruction of the original data, that means less bits or packets(not sure of the exact term) are sent. Less data being transferred logically means that there is a reduction in transmission time. | . Lossless and Lossy Images . Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . This image is lossy This image is most likely lossy because it is a JPG. JPGs are a lossy format because they use a compression algorithm that discards some of the image data in order to reduce the file size . This image is lossless This image will more likely be lossless because it is in PNG format. PNG images are a lossless image format because they use a compression algorithm that preserves all of the original image data without discarding any information. Unlike JPEG images, which are designed to reduce the file size by discarding some of the data, PNG images use a different type of compression algorithm that is designed to preserve the data while still achieving a smaller file size. . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Programming Paradigm . Pick a programming paradigm and solve some of the following ... | . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;mountains&quot;, &#39;file&#39;: &quot;scenery.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;dog&quot;, &#39;file&#39;: &quot;test.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Red Scale Base64 representation of Image def image_management_add_html_red(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;red_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create red scale of image red = pixel[0] # rbg = red blue green so first integer being 0 means the red color is what remains if len(pixel) &gt; 3: image[&#39;red_data&#39;].append((red, 0, 0, pixel[3])) # PNG format else: image[&#39;red_data&#39;].append((red, 0, 0)) # end for loop for pixels img.putdata(image[&#39;red_data&#39;]) image[&#39;html_red&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Create Blue Scale Base64 representation of Image def image_management_add_html_blue(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;blue_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create blue scale of image blue = pixel[2] if len(pixel) &gt; 3: image[&#39;blue_data&#39;].append((0, 0, blue, pixel[3])) # PNG format else: image[&#39;blue_data&#39;].append((0, 0, blue)) # end for loop for pixels img.putdata(image[&#39;blue_data&#39;]) image[&#39;html_blue&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Create Green Scale Base64 representation of Image def image_management_add_html_green(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;green_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create green scale of image green = pixel[1] if len(pixel) &gt; 3: image[&#39;green_data&#39;].append((0, green, 0, pixel[3])) # PNG format else: image[&#39;green_data&#39;].append((0, green, 0)) # end for loop for pixels img.putdata(image[&#39;green_data&#39;]) image[&#39;html_green&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) image_management(image) print(&quot; red image -&quot;) image_management_add_html_red(image) display(HTML(image[&#39;html_red&#39;])) image_management(image) #reload og image again print(&quot; blue image -&quot;) image_management_add_html_blue(image) display(HTML(image[&#39;html_blue&#39;])) image_management(image) #reload og image again print(&quot; green image -&quot;) image_management_add_html_green(image) display(HTML(image[&#39;html_green&#39;])) print() . -- original image -- . red image - . blue image - . green image - . -- original image -- . red image - . blue image - . green image - . . PIL: Blur the image or write Meta Data on screen, aka Title, Author and Image size . from IPython.display import HTML, display from pathlib import Path from PIL import Image as pilImage from io import BytesIO import base64 import numpy as np from PIL import ImageFilter # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;mountains&quot;, &#39;file&#39;: &quot;scenery.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_data1(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;mountains&quot;, &#39;file&#39;: &quot;scenery.png&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;mountains&quot;, &#39;file&#39;: &quot;blurImage.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Red Scale Base64 representation of Image def image_management_add_html_blur(image): img = pilImage.open(image[&#39;filename&#39;]) blur = img.filter(ImageFilter.BLUR) blur.save(&#39;images/blurImage.jpg&#39;) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) image_management_add_html_blur(image) images = image_data1() for image in images: image_management(image) print(image[&#39;filename&#39;]) display(HTML(image[&#39;html&#39;])) print() . images scenery.png . images blurImage.jpg . .",
            "url": "https://vivianknee.github.io/FastPages/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Guide to Dealing with CORS",
            "content": "What is CORS? . Cross-Origin Resource Sharing (CORS) is an HTTP-header based mechanism that allows a server to indicate any origins (domain, scheme, or port) other than its own from which a browser should permit loading resources. | Its essentially a security feature | . How it goes down: . The browser(frontend) sends the GET request with an extra Origin HTTP header to service.example.com (deployed backend) containing the domain that served the parent page Origin: http://www.example.com // frontend url | The server at service.example.com sends one of these responses: Access-Control-Allow-Origin: http://www.example.com //backend allows the frontend url to access its contents Access-Control-Allow-Origin: * //backend allows any site to access its contents | What is the Access-Control-Allow-Origin response header? . The Access-Control-Allow-Origin header is included in the response(response comes from backend) from site B to a request(fetch from frontend) site A, and identifies the permitted origin of the request. A web browser compares the Access-Control-Allow-Origin with the requesting website&#39;s origin and permits access to the response if they match. | Including the Access-Control-Allow-Origin header in the client-side request can be useful in some cases, such as when you are working with a third-party API and want to make sure that your requests are allowed by the server. | It can also be used during development or testing, when you may not have control over the server-side configuration A better model: | . Issues with CORS . When trying to start a local server and test your frontend and backend connection, cors is often something that gets in the way. | Unfortunately this error can prevent any sort of backend connection without proper code. Usually this error will appear when a header for cors is not specified or your backend url is not permitted by cors | . . I&#39;m sure you&#39;ve seen it... So here&#39;s a method to bypass CORS locally. Eventually, when both your frontend and backend are deployed, it&#39;s good practice to have CORS implemented since your site could have some security risk if you simply bypass it. . Local x Local . Setup local backend . How to bypass CORS with a local backend and frontend running . Run your backend locally by running the main.py file on your flask repository in vscode | Get the url of your backend server. | . Setup local frontend . run the command bundle exec jekyll serve in terminal to start your frontend locally | Use the url from the picture above to write a &#39;fetch&#39; statement (doesn&#39;t have to be like whats written below) to reference the local url and your api | . fetch(&#39;http://127.0.0.1:8080/api/yourapi/&#39;).then(function(response) { return response.json(); }); . Solution 1: Code in main.py . In the main.py file on your flask server, there should be a section of code at the bottom of the page that is already built in (by Mr. Mort) to aid in any cors errors. | It looks like this: | . if __name__ == &quot;__main__&quot;: # change name for testing from flask_cors import CORS cors = CORS(app) app.run(debug=True, host=&quot;0.0.0.0&quot;, port=&quot;8080&quot;) . Background info on flask_cors . flask_cors is a Flask extension for handling Cross Origin Resource Sharing (CORS), making cross-origin AJAX possible. This package has a simple philosophy: when you want to enable CORS, you wish to enable it for all use cases on a domain. This means no mucking around with different allowed headers, methods, etc. | in simple terms, this extension allows you to avoid dealing with annoying headers and access the domains you need | . | Possible errors . &quot;module cannot be resolved&quot; cd to your repository file path | make sure you have the prefix (base) (aka type wsl) | pip install -U flask-cors | . | . | . Solution 2: Download google Extension . Good for quick testing purposes | Download this Google chrome extension: Allow CORS: Access-Control-Allow-origin | Toggle the extension so that its ON | . Now try interacting with your frontend site, and the fetch will work . Local x Deployed . It&#39;s worth noting that including the Access-Control-Allow-origin in the client-side(frontend repo) request does not actually enable cross-origin requests if the server(backend) is not configured to allow them. The server must still include the header in its response for the request to be allowed. | . Local Frontend . same steps as described previously to setup the local frontend. | Instead of fetching from the local url, replace it with the domain url of your backend server. | . fetch(&#39;https://finalssvgcars.duckdns.org/api/cars/&#39;).then(function(response) { return response.json(); }); . Deployed Backend . In order to get the combination of local frontend and deployed backend to work, the Access-Control-Allow-origin must be configured on the server side. And it is | Setup AWS by following the deployment guide on the APCSP Website | When you set up the nginx configuration files, you&#39;ll notice: | As you can see the header &quot;Access-Control-Allow-Origin&quot; * is present in the nginx files in sites-available and sites-enabled | The line proxy_pass http://localhost:8777 is allowing the frontend local url to access the deployed backend site | Another thing to note however is that the &quot;&quot; allows any frontend site to access the backend. In order to secure this, you need to put something different in place of the . Will go over this in the next sections | . Deployed x Local . This combination should work identical to the Local x Local combination. Thus any solutions for that combination also apply to this combination. | . Deployed Frontend . Go to your repository on github | when you scroll down, under the section called &quot;Environment&quot;, click the link that says &quot;github pages&quot; | Then click &quot;view deployment&quot; | Your frontend deployed url should follow this format: https://username.github.io/name_of_repository/ | Your fetch statement should use the local url of the backend server (identical to that of the Local x Local combination) | . Local Backend . run main.py | . Deployed x Deployed . Deployed Frontend . Your fetch statement should use the deployed url of the backend server (identical to that of the Local x Deployed combination) | . Deployed Backend . In the Local x Deployed we talked about the the header &quot;Access-Control-Allow-Origin&quot; * that is present in the nginx files in sites-available and sites-enabled | Instead of using the &quot;*&quot;, replace it with the url of your frontend site. | This secures you server and ensures that the only website that can access your backend server is the your frontend server! here is an example… | . location / { proxy_pass http://localhost:8085; # Preflighted requests if ($request_method = OPTIONS ) { add_header “Access-Control-Allow-Credentials” “true”; add_header “Access-Control-Allow-Origin” “https://nighthawkcoders.github.io”; add_header “Access-Control-Allow-Methods” “GET, POST, OPTIONS, HEAD”; add_header “Access-Control-Allow-MaxAge” 600; add_header “Access-Control-Allow-Headers” “Content-Type, Authorization, x-csrf-token”; return 200; } } .",
            "url": "https://vivianknee.github.io/FastPages/2023/02/17/cors.html",
            "relUrl": "/2023/02/17/cors.html",
            "date": " • Feb 17, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 5 Notes",
            "content": "Unit 5 Notes . 5.1 Beneficial and Harmful Effects . Come up with three of your own Beneficial and corresponding Harmful Effects of Computing | Beneficial Effects Harmful Effects . lots of technology allows us to have a better quality of life since there are tools that exist that allow us to have greater efficiency and less of a workload. | Computers allow us to stay connected to the internet which in turn allow us to be informed about whats happening in the world | Computers are a great way to store and organize data in a way that doesn&#39;t take up space. In addition, they are very easy to use making it so that anyone could utilize a computer | . | Computers come with digital divide, there will be people who don&#39;t have access to computers and thus lose out on all the benefits which is unfair | Computers can cause people to spend too much time sitting down and looking at a screen. This can have bad long term affects on ones eyesight and physical health. | some computing technology is used with bad intentions. These can include military technology and devices that invade privacy | Spending too much time on computers can effect a person&#39;s social life because they can become addicted to a screen | . | . Talk about dopamine issues above. Real? Parent conspiracy? Anything that is impacting your personal study and success in High School? Sometimes when i’m on my computer, I lose track of time and end up spending my entire day on my computer. This can be both good and bad. Far starters, it has a negative impact because I don’t spend any time with my family or socializing with people in person. Since a computer allows me to do everything online including communicating with others, it creates a lazy mindset that makes me less social and outgoing. However, computers are also a crucial and beneficial part of my life because it allows me organize and complete my school work. In addition, my computer gives me access to the internet which provides me with millions of resources that are just a click away. | 5.2 Digital Divide . Think of three beneficial effects of your projects based on 5.1 Unit Our project can help people make an informed decision about what type of car they are looking to buy. Users can gain specific information on the type, model, mileage, and price of a car. | Our project can help people save time when buying a car. Instead of having to spend hours going from car dealer to car dealer asking questions about a car, the user can find all the information they need in one place on one website. | Since our project has a sign up and log in feature, this means that users can “save” cars their account and refer beck to them by logging in to the website again. This feature makes looking for information easy and fast. | . | Think of a potential harmful effect of your project. I think that our website could potentially be a disruptor in how people look for a car to buy. Instead of seeing the car in person, the user might base their purchase only on what they see online but when they actually get the car, it isn’t what they were anticipating. This can create some false expectations which wouldn’t be good for someone trying to make an important purchase. | . | What concerns do you have personally about the digital divide? For yourself or for others. Its obviously very upsetting that digital divide is something that exists. I think its very unfair that not everyone has access to the same opportunities and education, something that is partially effected by the digital divide. Those who do not have computers lose access to the internet and all the information that comes with it. As a result, they fall behind other, not because they lack the skill, but because they lack the resources which is extremely unfair. | . | Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? | Pros Cons . prevents students from getting distracted (ex: games, youtube, instagram etc.). | . | could block websites and videos that are actually informational and needed during classroom work-time | This creates a bias against what should and should not be filtered. Some content that is actually purposeful and informational might get blocked just because of it&#39;s source which is considered &quot;bad&quot; | students don&#39;t have access to good internet which can impair the quality of learning | . | . 5.3 Computer Bias . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? . The age group that uses Facebook are people ages 25-34 | The age group uses tik tok are people ages 10-19 | there are purposeful exclusions on platforms like tik tok. For example, people who are 13 and under can’t sign up and tik tok does this to prevent young children from viewing possibly inappropriate content so it’s beneficial in that sense so it shouldn’t be corrected. It’s bad business for a company like Facebook which is primarily a platform for older people. Facebook thus loses younger users. | . Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? . using only female voices might imply to some that females fill the role of “submissiveness” as they serve the owner of the virtuous devices. It might also promote the bias that women are assistants. | this should be corrected and virtual assistants should include more male voices to make things more balanced | it’s good business because people might find female voices more pleasing and thus be more inclined to buy the device so in that sense, it’s very purposeful that these companies choose to set the voice to female by default. | . Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) . there are algorithms that different companies use to capture the users attention. For example, tik tok has a “for you page” which shows videos that appeal to the users interests and these interests are filled out beforehand by the user. In addition this algorithm pushes trends to the user which can have harmful effects such as in the case of the “devious lick” trend. In addition companies like Facebook and Amazon have ads on the side of your screen based on your search history. | . Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. . I don’t think the owner thinks its intentional because he’s carrying a light joking tone throughout the video showing how he’s more so making fun of the machine vs being angry at it. | . How do you think this happened? . the lightning might have been bad or during development, the developers may have only tested the technology with white testers thus failed to recognize the errors when a black man tested the tech | . Is this harmful? Was it intended to be harmful or exclude? . this is harmful because it’s unintentionally exclusive | . Should it be corrected? What would you or should you do to produce a better outcome? . this should be corrected and developers definitely need to solve the tech to make it inclusive of people with all skin colors. I think the company needs to do more testing. | . Write summary/thoughts/conclusions from each of the exercises above. Focus on avoiding Bias in algorithms or code you write. . Every product that is developed will have some type of bias. The best way to combat this bias is to get feedback and opinions from a diverse group of people. That way, any software can have an inclusive usage and be good for everyone | . 5.4 Crowd Sourcing . We have all experienced Crowdsourcing by using external data through API’s, namely RapidAPI. This data has influenced how we code and shown possibilities in obtaining and analyzing data. Discuss APIs you have used. . I have used an API with symptoms including cough, fever, etc. I used this in my tri1 project. Our crossover team used a Wikipedia API. | . We have all participated in code Crowdsourcing by using GitHub. Many of you have forked from the Teacher repository, or exchanged code with fellow students. Not only can we analyze GitHub code, but we can obtain profiles and history about the persons coding history. What is the biggest discovery you have found in GitHub? . the biggest discovery I’ve found on GitHub is GitHub.dev. It allows you to look at peoples code and it’s format through the web. | . Kaggle datasets for code and science exploration. The avenue of data points us youtube or netflix channels. Analyzing crowd data helps us make decisions. Exam top 10 to 20. Did you see anything interesting? . there is a lot of medical apis, car apis, covid data, election results, and even arrests in the city of Chicago. | . CompSci has 150 ish principles students. Describe a crowdsourcing idea and how you might initiate it in our environment? . I think slack is in a sense apcsps form of crowd sourcing. Important information is sent there and people can ask questions and get answers on the slack as well | . What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? . Del Norte definitely needs better crowd sourcing. Currently, a lot of decisions made by the school are done by the staff or ASB, however regular students don’t really have a chance to say much. I think making a board of students could help with this problem. These students could get feedback from classes and then give that input to those who make final decisions. | my own project could be better with crowd sourcing because it would gain more advice and perspectives thus allowing it to grow | . What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. . I could make a google form, but to make it more csp related, I could set up a SQLite database to collect feedback from every student who stops to see the project. This feedback would all be collected in one place. | . 5.5 Legal and Ethical Concerns . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. Creative Commons Zero v1.0 Universal: The Creative Commons CC0 Public Domain Dedication waives copyright interest in a work you’ve created and dedicates it to the world-wide public domain | Open Source GPL License: The GNU GPLv3 also lets people do almost anything they want with your project, except distributing closed source versions. | Open Source MIT License: This allows using code freely and making and distributing closed source versions. Typically, the author of software with MIT License want credit. Credit could be as simple as adding the authors name in comments. | . | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. There are different types of licenses, but there are open source and closed source licenses. Open source licenses force companies or individuals to have their code be public and closed source allows the code to be kept private. Some of these licenses prevent distribution of closed source versions of their work. | Digital rights are software to protect, play, and/or distribute content. An example of digital rights are the terms of service that you often have to agree to before purchasing something. I myself, have subscriptions to things like netflix and youtube that allow me to have privileges to view or listen to different content. However, there are some ways to bypass these digital rights such as through illegal websites. | in terms of ethics, there are some issues. Many people want to bypass digital rights through illegal website but by doing this the artists and owners of the content don’t get paid for their work, instead people can view it for free. This can have a negative impact on the income of those people. | . | Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. Fast Pages Blog: I added a license file called LICENSE.md. I added a GNU General Public License v.3.0 | I did the same thing for our teams backend and frontend servers | . | 5.6 Safe Computing . Describe PII you have seen on project in CompSci Principles. In our project, we have a user login and sign-up system which requires the users email as well as a password of their choice. Both these these are considered PII | . | What are your feelings about PII and your personal exposure? I believe that some PII will inevitably be out there for everyone to see but it’s crucial that more risky information like passwords and personal credentials stay to oneself. I have PII that I put on the internet. Specifically, I use instagram and linkedin where I have my name, accomplishments, etc. listed. | . | Describe good and bad passwords? What is another step that is used to assist in authentication. a bad password is one that has no system of authentication. For example, Symmetric encryption is not a good system for passwords as it is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information. A good password has a system of authentication. For example, good passwords use Multi-factor authentication which often requires you to enter a code that has been texted or emailed to you. Another good method to have a good password with good authentication is Asymmetric cryptography. Asymmetric cryptography, also known as public-key cryptography, is a process that uses a pair of related keys – one public key and one private key – to encrypt and decrypt a message and protect it from unauthorized access or use. | . | Try to describe Symmetric and Asymmetric encryption. Symmetric encryption is not a good system for passwords as it is a type of encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information. | Asymmetric cryptography, also known as public-key cryptography, is a process that uses a pair of related keys – one public key and one private key – to encrypt and decrypt a message and protect it from unauthorized access or use. We did this for the security of our fastpages site, using a public and private key | . | Provide an example of encryption we used in AWS deployment. | . | Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. sometimes I will get dms from my friends on discord with a link to “free nitro” but in reality the link gets you to fil out personal information which it then uses to hack your discord account. Unfortunately, Ive had this happen to me on discord and Instagram. | . |",
            "url": "https://vivianknee.github.io/FastPages/markdown/2023/02/05/unit5notes.html",
            "relUrl": "/markdown/2023/02/05/unit5notes.html",
            "date": " • Feb 5, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Rebecca's Presentation Notes",
            "content": "Slide Layout . 1 slide for the purpose | 1-2 slides explaining how we make a current system better with our project + goals | 1-5 slides going over features Frontend page | Car Database to filter cars | Car search to find the specific car model | What is the login and sign up pages’ purpose | Additional things we want to add in the future | . | Slides explaining the code and framework of the database for different features backend Model | view: what it looks like to the user frontend | Control flow | . | System and software slide How does our website work? | Flask for backend | Reunion fastpages for frontend | . | Project development plan Use spreadsheets or GitHub | Scrum board? | Every person has assignments | Scrum team manifesto | . | .",
            "url": "https://vivianknee.github.io/FastPages/week20/2023/01/25/rebecnotes.html",
            "relUrl": "/week20/2023/01/25/rebecnotes.html",
            "date": " • Jan 25, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Tri 2 Project BLog",
            "content": "Each individual performs starts “pre-view” outline/write-up of materials required for College Board. Describe portion of Project you will use for Create Performance task Describe code plan as it is required for CB, Consider what will be demonstrated in video, aka video plan .",
            "url": "https://vivianknee.github.io/FastPages/week20/2023/01/24/projectblog.html",
            "relUrl": "/week20/2023/01/24/projectblog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "CollegeBoard APCSP MC#2 Notes",
            "content": "Takeaways . On my collegeboard MC #2, my score was 44/50 | . Questions . Q12: Controlling an elevator in a building? . I chose “(onFloor1 AND callTo2) AND (onFloor2 AND callTo1)” but the answer was “(onFloor1 OR callTo2) AND (onFloor2 AND callTo1)” | Notes I overlooked the fact that there were two answers that were the same, the only difference being that one was AND and the other OR. In both the ways that the answer calls the function, the elevator will be able to move which is why the correct answer is “OR” | . | . Q15: Robot in maze series of ifs? . . I chose: . | Notes . I think I was confused with how the function worked so I wasn’t able to understand how the robot moved around the map. | . | . Q33: Find maximum value algorithms? . “Algorithm I : Set the value of a variable max to − 1. Iterate through the list of integer values. If a data value is greater than the value of the variable max, set max to the data value. | Algorithm II : Set the value of a variable max to the first data value. Iterate through the remaining values in the list of integers. If a data value is greater than the value of the variable max, set max to the data value. | I chose the answer that said that both algorithms will always work but the correct answer was that “Algorithm II always works correctly, but Algorithm I only works correctly when the maximum value is greater than or equal to − 1” | Notes | . | . Q34: binary search on a list of 500 elements . A sorted list of numbers contains 500 elements. Which of the following is closest to the maximum number of list elements that will be examined when performing a binary search for a value in the list? | I chose “250” but the answer was “10” | Notes The binary search algorithm starts in the center of the sorted list and continuously removes half of the elements until the target data is known or all of the items are removed. | A list of 500 elements would be chopped in half up to 9 times (with a total of 10 elements examined). | The particular prerequisites with 500 items and are decreased to 250 elements, then 125 aspects, then 62 elements, 31 aspects, 15 aspects, 7 aspects, 3 aspects, and ultimately 1 element. | . | . Q42: Car manufacturer simulations? . Using simulation software can save the company money by helping to compare designs early in the process, before prototype cars are built. | Using simulation software can help to identify safety issues by providing data about how different mechanical components will interact in a wide variety of situations. | The manufacturer can present simulation software to customers to demonstrate different design possibilities. | Notes the questions asked which options would be a benefit of using simulations for a company. I said that only the first to were correct but the answer was all 3. | I now think that the third one is correct because its important to go through user testing to get optimal results | . | . Q47: Programs that benefit from heuristics? . I chose “A program that calculates a student’s grade based on the student’s quiz and homework scores” | The correct answer was “TA program that finds the shortest driving route between two locations on a map” | Notes a grade calculator can calculate an exact score when given the students scores, so it does not need a heuristic solution Finding the shortest driving route is an optimization problem that cannot be solved in a reasonable time, and a heuristic is a technique that can find an approximate solution more quickly when exact methods are too slow. | . | .",
            "url": "https://vivianknee.github.io/FastPages/week20/2023/01/24/mc2-review.html",
            "relUrl": "/week20/2023/01/24/mc2-review.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation = Add setter and getter for classOf = | . | Add dob attribute to define date of birth = This will require investigation into Python datetime objects as shown in example code below = | Add setter and getter for dob = | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Class and Object Code . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, classOf, dob): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._classOf = classOf if type(dob) is date: self._dob = dob self.calculate_age() else: #terminates the code if type of dob isn&#39;t in datetime format. user has to start over. good for debugging raise Exception(&#39;dob is not in correct type!!&#39;) @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a classOf getter @property def classOf(self): return self._classOf # a setter function to set the users graduating class @classOf.setter def classOf(self, classOf): self._classOf = classOf #check if class parameter matchers user class in object def is_classOf(self, classOf): return self._classOf == classOf # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob self.calculate_age() #calls calculate_age function whenever user wants to change their dob # age is returned instead of calculating every single time because its already been assigned to the object in the calculate_age function @property def age(self): return self._age #calculates age and stores it by assigning it to object def calculate_age(self): today = date.today() #stores calculated age in the object self. self._age = today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class&quot; : self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, class={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, classOf=1999, dob=date(1847, 2, 11)) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) u2 = User(name=&#39;Vivian&#39;, uid=&#39;vivian&#39;, password=&#39;123vivian&#39;, classOf=1999, dob=&quot;1847, 2, 11&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;class&#34;: 1999} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$hWMZkBVAgwExf3Y8$79b6c4b2c9aa3246146b9ca1c15b414eacc9f783da61132bd1f7b0cdc6d65b79&#39;, &#39;_classOf&#39;: 1999, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_age&#39;: 175} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_age&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;calculate_age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_classOf&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$hWMZkBVAgwExf3Y8$79b6c4b2c9aa3246146b9ca1c15b414eacc9f783da61132bd1f7b0cdc6d65b79,dob=1847-02-11, class=1999) . Exception Traceback (most recent call last) c: Users vivia vscode FastPages _notebooks 2023-01-10-PBL-model.ipynb Cell 5 in &lt;cell line: 111&gt;() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/vivia/vscode/FastPages/_notebooks/2023-01-10-PBL-model.ipynb#X11sZmlsZQ%3D%3D?line=114&#39;&gt;115&lt;/a&gt; print(&#34;Raw Attributes and Methods of object: n&#34;, dir(u1), &#34; n&#34;) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/vivia/vscode/FastPages/_notebooks/2023-01-10-PBL-model.ipynb#X11sZmlsZQ%3D%3D?line=115&#39;&gt;116&lt;/a&gt; print(&#34;Representation to Re-Create the object: n&#34;, repr(u1), &#34; n&#34;) --&gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/vivia/vscode/FastPages/_notebooks/2023-01-10-PBL-model.ipynb#X11sZmlsZQ%3D%3D?line=116&#39;&gt;117&lt;/a&gt; u2 = User(name=&#39;Vivian&#39;, uid=&#39;vivian&#39;, password=&#39;123vivian&#39;, classOf=1999, dob=&#34;1847, 2, 11&#34;) c: Users vivia vscode FastPages _notebooks 2023-01-10-PBL-model.ipynb Cell 5 in User.__init__(self, name, uid, password, classOf, dob) &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/vivia/vscode/FastPages/_notebooks/2023-01-10-PBL-model.ipynb#X11sZmlsZQ%3D%3D?line=13&#39;&gt;14&lt;/a&gt; self.calculate_age() &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/vivia/vscode/FastPages/_notebooks/2023-01-10-PBL-model.ipynb#X11sZmlsZQ%3D%3D?line=14&#39;&gt;15&lt;/a&gt; else: &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/vivia/vscode/FastPages/_notebooks/2023-01-10-PBL-model.ipynb#X11sZmlsZQ%3D%3D?line=15&#39;&gt;16&lt;/a&gt; #terminates the code. user has to start over &gt; &lt;a href=&#39;vscode-notebook-cell:/c%3A/Users/vivia/vscode/FastPages/_notebooks/2023-01-10-PBL-model.ipynb#X11sZmlsZQ%3D%3D?line=16&#39;&gt;17&lt;/a&gt; raise Exception(&#39;dob is not in correct type!!&#39;) Exception: dob is not in correct type!! . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . import json class Car: def __init__(self, name, color, price): self._name = name # variables with self prefix become part of the object, self._color = color self._price = price self.determine_value() # gets the name of the manufacturer or the car @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a color getter @property def color(self): return self._color # a setter function to set the car&#39;s color @color.setter def color(self, color): self._color = color # a price getter @property def price(self): return self._price # a setter function to set the car&#39;s price @price.setter def price(self, price): self._price = price self.determine_value() #calls function whenever price of car changes @property def value(self): return self._value #determines car value based on price and stores it by assigning it to object def determine_value(self): if self._price &gt; 60000: self._value = &quot;Luxury Car&quot; elif self._price in range(30000, 60000): self._value =&quot;Middle-end Car&quot; else: self._value =&quot;Low-end/Second-hand Car&quot; # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;color&quot; : self.color, &quot;price&quot; : self.price, &quot;value&quot; : self.value } return dict # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, color={self._color}, price={self._price})&#39; if __name__ == &quot;__main__&quot;: u1 = Car(name=&#39;Toyota&#39;, color=&#39;white&#39;, price=6000) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Toyota&#34;, &#34;color&#34;: &#34;white&#34;, &#34;price&#34;: 6000, &#34;value&#34;: &#34;Low-end/Second-hand Car&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Toyota&#39;, &#39;_color&#39;: &#39;white&#39;, &#39;_price&#39;: 6000, &#39;_value&#39;: &#39;Low-end/Second-hand Car&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_color&#39;, &#39;_name&#39;, &#39;_price&#39;, &#39;_value&#39;, &#39;color&#39;, &#39;determine_value&#39;, &#39;dictionary&#39;, &#39;name&#39;, &#39;price&#39;, &#39;value&#39;] Representation to Re-Create the object: User(name=Toyota, color=white, price=6000) .",
            "url": "https://vivianknee.github.io/FastPages/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 3 Vocab",
            "content": "Vocab . Term Definition . algorithms | set of instructions that can accomplish a specific task | . Pseudocode | A blend of human language and coding format | . Strings | A string is a collection of characters. character can be anything from numbers, letters, spaces | . String concatenation | combining 2 or more strings to make a new strings in order to create a new string | . Substrings | A substring is a part of and already existing string | . Boolean | a data type with two possible values: true or false | . Logical Operators | these types of operators don&#39;t necessarily deal with equivalent/non-equivalent values | . Conditionals | determines which part of an algorithm are executed based on a condition being true or false | . Nested Conditionals | consist of conditional statements within other conditional statements | . Lists | sequence of variables | . Index | a term used to sort data in order to reference to an element in a list (allows for duplicates) | . Elements | the values in the list assigned to an index | . condition | is a boolean expression when an expression outputs either true or false | . Selection | process used in algorithms where a conditional if statement leads to one of two outcomes | . Iteration | process that allows certain things to happen until a condition is satisfied | . Binary Search | A search algorithm that locates the position of a target value within a sorted array by repeatedly dividing the search interval in half; can only be used when the list is sorted. Because of its divide-and-conquer approach, the amount of work required to find an item grows much more slowly with Binary Search than with Sequential Search. In fact, with this logarithmic behavior | . Linear Search | A process that checks every element in the list sequentially until the desired element is found or all elements have been searched. Can be used in any type of list. Has linear performance. | . Bits | most basic unit of information in computing and digital communications | . byte | a group of binary digits or bits (usually eight) operated on as a unit | . hexadecimal | relating to or using a system of numerical notation that has 16 rather than 10 as its base. | . Procedural Abstraction | provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | . Parameters | input values of a procedure | . Arguments | specify the values of the parameters when a procedure is called | . Libraries | collection of precompiled codes that can be used later on in a program for sme specific well-defined operations | . API | contains specific direction for how the procedures in a library can behave or be used | . Simulation | a tested scenario used for viewing results/outputs to prepare for them in real world situations | . heuristic solution | an approach to a problem that produces a solution that isn’t necessarily optimal but can be used when normal methods to an optimal solution would take forever | . algorithmic efficiency | The ability of an algorithm to solve a problem in an efficient way | . decidable problem | problem in cs and mathematics for which an algo can be created that can always produce a correct answer | . undecidable problem | problem in cs and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. | . Examples . Algorithm: . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) . Sure I will play outside! . Conditionals and Booleans: . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . True . Selection and Iteration: . sum = 1 counter = 3 loop = 0 while (loop &lt; 4): sum = sum + counter counter = counter + 2 loop = loop + 1 else: print(sum) . 25 . List, Index, and Element : . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . grape . String Concatenation and Substrings: . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[0:6] yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; print(yoda) . Very handsome Mr.Mor is. . Logical Operators: . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;7 &gt; 8:&quot;, not 7 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . 1 &gt; 2 or 5 &lt; 12: True 7 &gt; 8: True 10 &gt; 20: False . Binary Search: . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . Nested Conditionals: . infoP = [] infoP.append({ &quot;Product&quot;: &quot;Cheese&quot;, &quot;Expired&quot;: True, &quot;Cost&quot;: 15, }) infoP.append({ &quot;Product&quot;: &quot;Wine&quot;, &quot;Expired&quot;: False, &quot;Cost&quot;: 75, }) def print_info(p_rec): if (p_rec[&quot;Expired&quot;]): print(&quot; t&quot;, &quot;This product is no good&quot;) else: if (p_rec[&quot;Cost&quot;] &gt; 50): print(&quot; t&quot;, &quot;This product is too expensive&quot;) elif (p_rec[&quot;Cost&quot;] &gt; 25 and p_rec[&quot;Cost&quot;] &lt;= 50): print(&quot; t&quot;, &quot;This is a regular product&quot;) else: print(&quot; t&quot;, &quot;This is a cheap product&quot;) def print_data(p_rec): #formatting print(&quot; t&quot;, &quot;Product:&quot;, p_rec[&quot;Product&quot;]) print(&quot; t&quot;, &quot;Expired:&quot;, p_rec[&quot;Expired&quot;]) print(&quot; t&quot;, &quot;Cost:&quot;, p_rec[&quot;Cost&quot;]) print_info(p_rec) print(&quot; n&quot;) def data_entry(): #defining the function that asks for user input product = input(&quot;What is the product? (one word)&quot;) expired_string = input(&quot;Is it expired? (True or False)&quot;) cost = input(&quot;How much did it cost(dont include $, round to nearest whole number)&quot;) if (expired_string == &quot;True&quot;): expired = True else: expired = False infoP.append({ #appends the user input to the dictionary &quot;Product&quot;: product, &quot;Expired&quot;: expired, &quot;Cost&quot;: int(cost), }) def main(): Continue = True #defining continue as true while Continue: inp = input(&quot;Would you like to add a product to the database, type no if you want to exit)?&quot;) if inp == &quot;no&quot;: print(&quot;Come back again!&quot;) Continue = False elif inp == &quot;add&quot;: data_entry() else: print(&quot;Invalid input. Please try again&quot;) length = len(infoP) #defines length as the number of records print(&quot;Total Number of Records: &quot;, length) for record in infoP: print_data(record) main() . Simulation: . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/26/unit3-vocab.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/26/unit3-vocab.html",
            "date": " • Dec 26, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 3 Sections 17 and 18",
            "content": "Vocab . heuristic solution: an approach to a problem that produces a solution that isn’t necessarily optimal but can be used when normal methods to an optimal solution would take forever | algorithmic efficiency: The ability of an algorithm to solve a problem in an efficient way | decidable problem: problem in cs and mathematics for which an algo can be created that can always produce a correct answer | undecidable problem: problem in cs and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. | . Algorithm Efficiency and Undecidable Problems . algorithmic efficiency The ability of an algorithm to solve a problem in an efficient way | An efficient algorithm solves a problem quickly and with a min amount of resources, such as time and memory. | . | How do we determine if an algorithm is efficient or not? One way we can do this is by determining the time complexity of the algorithm. | Another way is through space complexity. | . | . Time complexity How does the runtime of the function grow as the size of the input grows | . | . array = [1, 5, 8, 3 …, 10] . def find_sum(array): total = 0 for each i in given array: total += i return total . heuristic solution an approach to a problem that produces a solution that isn’t necessarily optimal but can be used when normal methods to an optimal solution would take forever | Usually made up using logic | . | . Traveling Merchant Problem Hacks: What did you and your team discuss? (record below) start at Indianapolis, then Louisville Cincinnati, Columbus, Detroit, and finally Chicago (805 miles) | . | . | . . decidable problem problem in cs and mathematics for which an algo can be created that can always produce a correct answer | there exists an algo that can be used to determine whether a given input is a valid solution or not | . | . def divideThirteen(number): if number % 13 == 0: return True else: return False print(divideThirteen(26)) print(divideThirteen(30)) . True False . undecidable problem a problem in cs and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. | not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem | . | . i = 0 number = 1 def integerTest(n): # Testing if the number is an integer if n%1 ==0: return True else: return False # Using while loop to keep searching an a non-integer above 1. Note that the computer runs forever. while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . halting problem example of an undecidable problem | no way to write an algo to analyze and determine whether a body of code can run forever or not | . | . halting problem example HaltChecker analyzes the program, program P, and its input, input I. If program P halts with input I, HaltChecker returns an output of &quot;halts&quot;. If program P doesn&#39;t halt(runs forever) with input I, HaltChecker returns an output of &quot;never&quot;. For example, in the code where it tests if variable number, the code runs forever, so HaltChecker returns an output of “never”. | Then, we add another algorithm called Reverser which reverses HaltChecker&#39;s output. So, if &quot;never&quot; is the output of HaltChecker, then the output of Reverser is “halts”. It&#39;s also the same the other way around: if HaltChecker has an output of &quot;halts&quot;, then Reverser has an output of “never”. | We combine these algorithms into one entire body of code. | Since Reverser is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;never&quot; when in fact there is an end(As proved by HaltChecker), and how it also prints &quot;halts&quot; when there is in fact is no end to the code(Also proved by HaltChecker). As a result, HaltChecker is inaccurate and this is an undecidable problem | . | . . HW . Come up with one situation in which a computer runs into an undecidable problem. Explain why it is considered an undecidable problem an algorithm which finds all solutions of a Diophantine equation. | A Diophantine equation is a more general case of Fermat&#39;s Last Theorem; we seek the integer roots of a polynomial in any number of variables with integer coefficients. Since we have only one equation but n variables, infinitely many solutions exist in the complex plane | however, the problem becomes impossible if solutions are constrained to integer values only. | . | . graph activity Use the 1st code below and graph it (Desmos, TI Inpire Cas, e.t.c), change the x value only! | Label the number of loops done as x and the time (microseconds) to find the index as y | Connect the points | Do the same thing with the 2nd code | Compare the two graphs and explain which one of the two is more efficient and why (min. 2 sentences) | | . The first graph appears to be more linear while the second graph resembles the graph of logn. The linear graph is always increasing, meaning that the bigger your number is, the longer it takes to identify your number. However, in the second graph, while the curve does increase, it increases slower than the linear one. This means that as the range of a list of numbers increases, the linear graph shows that time will increase more steeply than the graph of logn. Hence lists with more numbers will take less time for the logn graph vs the linear graph because the logn graph makes it so that time increases in very small increments. Therefore, second graph is more efficient. In addition, the points of the first graph are calculated using linear search which iterates through each number in the list one by one until it identifies the number. On the other hand, the second graph&#39;s points are calculated using binary search. Binary search cuts the list in half each time, repeating this process until your number is found. Therefore, binary search is much faster than linear search, hence the second graph is much more efficient. . Graph 1 . . Graph 2 . . import time def linear_search(lst, x): start_time = time.perf_counter_ns() # records time (nanoseconds) for i in range(len(lst)): # loops through the entire list if lst[i] == x: # until the x value we are looking for is found end_time = time.perf_counter_ns() # records time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Found element after {} loops in {} microseconds&quot;.format(i+1, total_time)) # prints the results return print(&quot;Your number was found at&quot;, i) end_time = time.perf_counter_ns() # records the time again total_time = (end_time - start_time) // 1000 # subtracts last recorded time and first recorded time print(&quot;Element not found after {} loops in {} microseconds&quot;.format(len(lst), total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lst = list(range(1, 10001)) # list with numbers 1-10000 x = 10000 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) linear_search(lst, x) # runs procedure . Found element after 10000 loops in 616 microseconds Your number was found at 9999 . import time def binary_search(lt, x): start_time = time.perf_counter_ns() # starts timer low = 0 # sets the lower side mid = 0 # sets mid value high = len(lt) -1 # sets the higher side num_loops = 0 # number of loops the search undergoes to find the x value while low&lt;=high: # Loop ran until mid is reached num_loops += 1 # adds one loop each time process is repeated mid = (low + high) // 2 # takes the lowest and highest possible numbers and divides by 2 and rounds to closest whole # if lt[mid] == x: end_time = time.perf_counter_ns() # records time total_time = (end_time - start_time) // 1000 # time in microseconds print(&quot;Element found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return mid # returns the index value elif lt[mid] &gt; x: # if mid was higher than x value, then sets new highest value as mid -1 high = mid -1 elif lt[mid] &lt; x: low = mid + 1 # if mid was lower than x, sets the new low as mid + 1 end_time = time.perf_counter_ns() total_time = (end_time - start_time) // 1000 print(&quot;Element not found after {} loops in {} microseconds&quot;.format(num_loops, total_time)) # prints the results return &quot;Your number wasn&#39;t found :(&quot; lt = list(range(1, 10001)) # list with numbers 1-10000 x = 100 # replace with an integer between 1 and 10000 (I suggest big numbers like 500, 2000, so on) binary_search(lt, x) # runs procedure . Element found after 13 loops in 22 microseconds . 99 . Write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | . def isPrime(x): for i in (2, x-1): #each number until x if x % i == 0: #tests to see if the remainder is 0 return False return True isPrime(3793) . True . Write code to get the computer to run forever | . import random x = 1 y = x + random.randint(1, 100) #forces y to always be greater than x. aka y will never equal x while x != y: #since x and y will never be equal, the loop never ends. if x &lt; y: y = x - random.randint(1, 100) else: y = x + random.randint(1, 100) .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/14/algo-und-problems.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/14/algo-und-problems.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 3 Sections 16",
            "content": "Vocab . Simulation: a tested scenario used for viewing results/outputs to prepare for them in real world situations | . Simulations . Simulation a tested scenario used for viewing results/outputs to prepare for them in real world situations | Can be used for games like dice rolling, spinners, etc | Can be used for practical things such as building structures, testing car crashes, and other things before engaging in them in the real world | Can have the option of obeying real world physics (Gravity, collision) or they can go against these norms since this is a fictitious scenario, and couldn&#39;t happen in real life | . | . Big Questions Which of the following simulations could be the LEAST useful? A retailer trying to identify which products sold the most (correct!) | A restaurant determining the efficiency of robots | An insurance company studying the rain impact of cars | A sports bike company studying design changes to their new bike design | . | If you were making a simulation for making a new train station, which of the following would be true about this simulation? It could reveal potential problems/safety issues before construction starts (correct!) | It cannot be used to test the train station in different weather | Simulation will add high costs to projects | Simulation is not needed because this train station already exists | . | . | . Simulation 1 Both programs below do the same thing. Given a height and a weight, they calculate how long it will take for a object to fall to the ground in a vacuum subjected to normal Earth levels of gravity. | However, the second one is a simulation. It calculates the distance the object has fallen every 0.1 seconds. This is useful for if you wanted a visual representation of a falling object, which pure math can&#39;t do as smoothly. | . | . height = float(input(&quot;height in meters?&quot;)) weight = input(&quot;weight in pounds?&quot;) stuff = (2 * (height / 9.8))**(1/2) print(&quot;It will take&quot;, stuff,&quot;seconds for an object that weighs&quot;,weight,&quot;pounds&quot;,&quot;to fall &quot;,height,&quot;meters in a vacuum&quot;) . It will take 1.2777531299998797 seconds for an object that weighs 9 pounds to fall 8.0 meters in a vacuum . t = 0 g = 0 d = 0 false = True while false: t = t + 0.1 d = 9.8 / 2 * (t**2) if d &gt;= height: false = False #print(d) # if you want to print the distance every time it calculates it. Too long to output to a terminal, but this could be useful to display graphically. #print(t) print(t) print(d) . 1.3 8.281 . Simulation 2 This simulation is made in order to simulate movement on a 2d plane vs a 3d plane. | How it works: we have multiple variables, if statements and equations under a while command in order to random generate steps on a 2d plane. Once it reaches the set destination, it will say that the man made it home after x amount of steps. | For the 3D plane, it takes a lot longer due to how big and open the 3d environment is, so there are more if statements in the 3d plane | . | . import random x = 0 y = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): step = random.randrange(4) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 turn = turn + 1 if x == 0 and y == 0: nights = nights + 1 print(&quot;The Man Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y != 0: print(&quot;(&quot;, x,y, &quot;)&quot;) if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Average&quot;, average, &quot;Ones that when&#39;t too long &quot;, stopped) . import random x = 0 y = 0 z = 0 nights = 0 turn = 0 stopped = 0 turns = [] while (nights &lt; 100): #random movement step = random.randrange(6) if step == 0: x = x+1 if step == 1: x = x-1 if step == 2: y = y+1 if step == 3: y = y-1 if step == 4: z = z+1 if step == 5: z = z-1 #Turn counter turn = turn + 1 #Goal check if x == 0 and y == 0 and z == 0: nights = nights + 1 print(&quot;The Bird Has Made It Home After &quot;, turn, &quot;Turns&quot;) turns.append(turn) turn = 0 if turn/1000 % 1000 == 0 and x + y + z != 0: print(&quot;(&quot;, x,y, &quot;) &quot;,&quot;| &quot;, z) #Too long Stopper if (turn &gt; 10000000): stopped = stopped + 1 turn = 0 x = 0 y = 0 z = 0 nights = nights + 1 print(&quot;Caped&quot;) average = sum(turns) / len(turns) print(&quot;Average&quot;, average,&quot;Ones that when&#39;t too long &quot;, stopped) . HW . Create a simulation. It can be anything, just has to simulate something | . import random print(&quot;Welcome to my stock simulation. You will start with $1000. The goal is to reach $1,000,000 in the least amount of weeks. Test how good your strategies are and see how lucky you would be in real life! If you lose half of the initial investment, YOU LOSE, simulation over.&quot;) win_rate = int(input(&quot;What is your win rate? (input integer number 1-100)&quot;)) win_percent_floor = int(input(&quot;When you win, what is the minimum gain in percent? (input integer number)&quot;)) win_percent_ceiling = int(input(&quot;When you win, what is the maximum gain in percent? (input integer number)&quot;)) loss_percent_floor = int(input(&quot;When you lose, what is the minimum loss in percent? (input integer number)&quot;)) loss_percent_ceiling = int(input(&quot;When you lose, what is the maximum loss in percent? (input integer number)&quot;)) initial_invest = 1000 profit_target = 1000000 accumulated_profit = initial_invest trade_count = 1 while accumulated_profit &lt; profit_target: won = random.randint(1, 100) &lt; win_rate if won: win_percent = random.randint(win_percent_floor, win_percent_ceiling) accumulated_profit = accumulated_profit * (1 + float(win_percent / 100)) print(&quot;Winning trade! Accumulated profit: &quot; + str(round(accumulated_profit, 2))+ &quot; Trade count: &quot; + str(trade_count)) else: loss_percent = random.randint(loss_percent_floor, loss_percent_ceiling) accumulated_profit = accumulated_profit * (1 - float(loss_percent / 100)) print(&quot;Losing trade! Accumulated profit: &quot; + str(round(accumulated_profit, 2)) + &quot; Trade count: &quot; + str(trade_count)) if accumulated_profit &lt; 500: print(&quot;Game over, your strategy fell short of success&quot;) break trade_count = trade_count + 1 . Welcome to my stock simulation. You will start with $1000. The goal is to reach $1,000,000 in the least amount of weeks. Test how good your strategies are! If you lose half of the initial investment, YOU LOSE, simulation over. Winning trade! Accumulated profit: 1130.0 Trade count: 1 Winning trade! Accumulated profit: 1265.6 Trade count: 2 Winning trade! Accumulated profit: 1442.78 Trade count: 3 Losing trade! Accumulated profit: 1399.5 Trade count: 4 Losing trade! Accumulated profit: 1329.53 Trade count: 5 Winning trade! Accumulated profit: 1515.66 Trade count: 6 Winning trade! Accumulated profit: 1667.22 Trade count: 7 Winning trade! Accumulated profit: 1833.95 Trade count: 8 Winning trade! Accumulated profit: 2072.36 Trade count: 9 Winning trade! Accumulated profit: 2362.49 Trade count: 10 Winning trade! Accumulated profit: 2716.86 Trade count: 11 Winning trade! Accumulated profit: 3097.23 Trade count: 12 Losing trade! Accumulated profit: 2973.34 Trade count: 13 Winning trade! Accumulated profit: 3330.14 Trade count: 14 Winning trade! Accumulated profit: 3763.05 Trade count: 15 Losing trade! Accumulated profit: 3650.16 Trade count: 16 Winning trade! Accumulated profit: 4124.68 Trade count: 17 Winning trade! Accumulated profit: 4537.15 Trade count: 18 Losing trade! Accumulated profit: 4310.3 Trade count: 19 Winning trade! Accumulated profit: 4956.84 Trade count: 20 Winning trade! Accumulated profit: 5700.37 Trade count: 21 Losing trade! Accumulated profit: 5529.35 Trade count: 22 Winning trade! Accumulated profit: 6358.76 Trade count: 23 Winning trade! Accumulated profit: 7312.57 Trade count: 24 Winning trade! Accumulated profit: 8043.83 Trade count: 25 Losing trade! Accumulated profit: 7641.64 Trade count: 26 Winning trade! Accumulated profit: 8787.88 Trade count: 27 Winning trade! Accumulated profit: 10018.19 Trade count: 28 Winning trade! Accumulated profit: 11220.37 Trade count: 29 Losing trade! Accumulated profit: 10659.35 Trade count: 30 Winning trade! Accumulated profit: 11938.47 Trade count: 31 Winning trade! Accumulated profit: 13132.32 Trade count: 32 Winning trade! Accumulated profit: 15102.17 Trade count: 33 Winning trade! Accumulated profit: 17216.47 Trade count: 34 Losing trade! Accumulated profit: 16699.98 Trade count: 35 Winning trade! Accumulated profit: 19037.97 Trade count: 36 Losing trade! Accumulated profit: 18276.45 Trade count: 37 Winning trade! Accumulated profit: 20835.16 Trade count: 38 Losing trade! Accumulated profit: 20418.46 Trade count: 39 Winning trade! Accumulated profit: 23072.85 Trade count: 40 Losing trade! Accumulated profit: 22611.4 Trade count: 41 Winning trade! Accumulated profit: 25324.77 Trade count: 42 Winning trade! Accumulated profit: 28870.23 Trade count: 43 Losing trade! Accumulated profit: 28004.13 Trade count: 44 Losing trade! Accumulated profit: 26883.96 Trade count: 45 Winning trade! Accumulated profit: 30110.04 Trade count: 46 Winning trade! Accumulated profit: 34626.54 Trade count: 47 Winning trade! Accumulated profit: 38089.19 Trade count: 48 Winning trade! Accumulated profit: 41898.11 Trade count: 49 Winning trade! Accumulated profit: 46506.91 Trade count: 50 Winning trade! Accumulated profit: 52087.74 Trade count: 51 Losing trade! Accumulated profit: 50004.23 Trade count: 52 Winning trade! Accumulated profit: 56004.73 Trade count: 53 Losing trade! Accumulated profit: 54884.64 Trade count: 54 Losing trade! Accumulated profit: 53238.1 Trade count: 55 Winning trade! Accumulated profit: 60159.05 Trade count: 56 Losing trade! Accumulated profit: 58354.28 Trade count: 57 Winning trade! Accumulated profit: 65356.79 Trade count: 58 Winning trade! Accumulated profit: 73853.18 Trade count: 59 Winning trade! Accumulated profit: 84192.62 Trade count: 60 Losing trade! Accumulated profit: 79982.99 Trade count: 61 Winning trade! Accumulated profit: 91180.61 Trade count: 62 Losing trade! Accumulated profit: 88445.19 Trade count: 63 Losing trade! Accumulated profit: 84022.93 Trade count: 64 Winning trade! Accumulated profit: 96626.37 Trade count: 65 Winning trade! Accumulated profit: 108221.54 Trade count: 66 Winning trade! Accumulated profit: 120125.91 Trade count: 67 Losing trade! Accumulated profit: 116522.13 Trade count: 68 Winning trade! Accumulated profit: 129339.56 Trade count: 69 Losing trade! Accumulated profit: 122872.59 Trade count: 70 Winning trade! Accumulated profit: 137617.3 Trade count: 71 Losing trade! Accumulated profit: 134864.95 Trade count: 72 Winning trade! Accumulated profit: 152397.39 Trade count: 73 Winning trade! Accumulated profit: 173733.03 Trade count: 74 Winning trade! Accumulated profit: 191106.33 Trade count: 75 Losing trade! Accumulated profit: 185373.14 Trade count: 76 Winning trade! Accumulated profit: 213179.11 Trade count: 77 Winning trade! Accumulated profit: 245155.98 Trade count: 78 Losing trade! Accumulated profit: 232898.18 Trade count: 79 Losing trade! Accumulated profit: 221253.27 Trade count: 80 Winning trade! Accumulated profit: 254441.26 Trade count: 81 Winning trade! Accumulated profit: 279885.39 Trade count: 82 Winning trade! Accumulated profit: 307873.93 Trade count: 83 Winning trade! Accumulated profit: 347897.54 Trade count: 84 Winning trade! Accumulated profit: 389645.24 Trade count: 85 Winning trade! Accumulated profit: 432506.22 Trade count: 86 Winning trade! Accumulated profit: 488732.03 Trade count: 87 Losing trade! Accumulated profit: 478957.39 Trade count: 88 Winning trade! Accumulated profit: 541221.85 Trade count: 89 Losing trade! Accumulated profit: 519572.97 Trade count: 90 Losing trade! Accumulated profit: 509181.51 Trade count: 91 Winning trade! Accumulated profit: 580466.92 Trade count: 92 Winning trade! Accumulated profit: 644318.29 Trade count: 93 Losing trade! Accumulated profit: 612102.37 Trade count: 94 Winning trade! Accumulated profit: 673312.61 Trade count: 95 Losing trade! Accumulated profit: 646380.1 Trade count: 96 Winning trade! Accumulated profit: 736873.32 Trade count: 97 Winning trade! Accumulated profit: 832666.85 Trade count: 98 Winning trade! Accumulated profit: 932586.87 Trade count: 99 Winning trade! Accumulated profit: 1044497.3 Trade count: 100 . Find an example of a simulation in a software/game you use, screenshot, and explain how it is a simulation Blender includes advanced physics simulation in the form of the Bullet Physics Engine | allows the user to create realistic scenarios of situations that may be hard to simulate in real life | For ex: water moving, ruberg gold machines, crashes, ect. link to a few of my own examples of simulations within blender | . | . | . .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/13/simulations.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/13/simulations.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Unit 3 Sections 14 and 15",
            "content": "Vocab . Libraries: collection of precompiled codes that can be used later on in a program for sme specific well-defined operations | API: contains specific direction for how the procedures in a library can behave or be used | . Libraries and Random Values . Libraries collection of precompiled codes that can be used later on in a program for some specific well-defined operations. | precompiled codes can be referred to as modules. Each module contains bundles of code that can be used repeatedly in different programs. | may also contain documentation, configuration data, message templates, classes, and values, etc. | makes Python Programming simpler and convenient for the programmer | ex: Pillow, Tensor Flow, Matplotlib | . | APIs application program interface, contains specific direction for how the procedures in a library can behave or be used | acts as a gateway for the imported procedures from a library to interact with the rest of your code | . | . import numpy as np new_matrix = np.array([[1, 2, 3],[4, 5, 6],[7, 8, 9]]) print (new_matrix) . [[1 2 3] [4 5 6] [7 8 9]] . Numpy to find derivatives . import numpy as np # defining polynomial function var = np.poly1d([2, 0, 1]) print(&quot;Polynomial function, f(x): n&quot;, var) # calculating the derivative derivative = var.deriv() print(&quot;Derivative, f(x)&#39;=&quot;, derivative) # calculates the derivative of after # given value of x print(&quot;When x=5 f(x)&#39;=&quot;, derivative(5)) . Polynomial function, f(x): 2 2 x + 1 Derivative, f(x)&#39;= 4 x When x=5 f(x)&#39;= 20 . Random Values Random number generation (RNG) produces a random number procedure with RNG can return different values even if the parameters do not change | . | . | . import random def dice(n): sum = 0 while n &gt; 0: sum = sum + random.randint(1,6) n = n -1 return sum dice(5) . 18 . HW . Find two other libraries and explain their function and how it helps programmers code | . Requests . allows you to send HTTP/1.1 requests extremely easily | coders don&#39;t have to manually add query strings to URLs, form encode PUT and POST data | creates more efficient ways to: Make requests using the most common HTTP methods | Customize your requests’ headers and data, using the query string and message body | Inspect data from your requests and responses | Make authenticated requests | Configure your requests to help prevent your application from backing up or slowing down | . | . | Theano . allows tou to define, optimize, and efficiently evaluate mathematical expressions involving multi-dimensional arrays | helps you perform data intensive computations up to 140x faster | can compute derivatives for functions of one or many inputs | evaluates expressions faster | . | Write a procedure that generates n random numbers, then sorts those numbers into lists of even and odd numbers (JS or Python, Python will be easier). | import random list = [] n = int(input(&quot;How many numbers would you like to generate?&quot;)) min = int(input(&quot;What is the smallest number you would like to generate?&quot;)) max = int(input(&quot;What is the biggest number you would like to generate?&quot;)) num = [random.randint(min, max) for v in range(n)] #generating 100 random numbers in the range of 0-200 (in this case my n random numbers is 100. Im setting a range to prevent ridiculous numbers) list.extend(num) def splitevenodd(list): evenlist = [] oddlist = [] for i in list: if (i % 2 == 0): evenlist.append(i) else: oddlist.append(i) print(&quot;Even list:&quot;, evenlist) print(&quot;Odd list:&quot;, oddlist) splitevenodd(list) . Even list: [34, 50, 80, 24, 50, 16, 98, 34, 88, 72] Odd list: [27, 83, 87, 43, 63, 9, 35, 85, 5, 79, 85, 7, 21, 81, 59] . Using NumPy and only coding in python cell, find the answer to the following questions: a. What is the derivative of 2x^5 - 6x^2 + 24x? b. What is the derivative of (13x^4 + 4x^2) / 2 when x = 9? | import numpy as np # defining polynomial function eq1 = np.poly1d([2, 0, 0, 6, 24, 0]) print(&quot;f(x)= n&quot;, eq1) # calculating the derivative derivative = eq1.deriv() print(&quot;The derivative of f(x)= n&quot;, derivative) #-- eq2 = np.poly1d([6.5, 0, 2, 0, 0]) #i simplified your derivative which shud be fine right? print(&quot;g(x)= n&quot;, eq2) derivative2 = eq2.deriv() print(&quot;The derivative of 13x^4 + 4x^2 / 2 (g(x)) when x = 9 is: n&quot;, derivative2(9)) . f(x)= 5 2 2 x + 6 x + 24 x The derivative of f(x)= 4 10 x + 12 x + 24 g(x)= 4 2 6.5 x + 2 x The derivative of 13x^4 + 4x^2 / 2 (g(x)) when x = 9 is: 18990.0 . Suppose you have a group of 10 dogs and 10 cats, and you want to create a random order for them. Show how random number generation could be used to create this random order. | import random dogs = [&quot;bob&quot;, &quot;mark&quot;, &quot;lucy&quot;, &quot;tod&quot;, &quot;frank&quot;, &quot;lily&quot;, &quot;cookie&quot;, &quot;oreo&quot;, &quot;ollie&quot;, &quot;charlie&quot;] cats = [&quot;luna&quot;, &quot;ginger&quot;, &quot;mochi&quot;, &quot;pluto&quot;, &quot;jeff&quot;, &quot;skippy&quot;, &quot;lemon&quot;, &quot;boba&quot;, &quot;chase&quot;, &quot;louis&quot;] #list of 10 dog and cat names def randomOrder(animals): list = [] random.shuffle(animals) result = f&#39;{animals}&#39; print(&quot;New Random Order: &quot; + result) randomOrder(dogs) randomOrder(cats) . New Random Order: [&#39;mark&#39;, &#39;frank&#39;, &#39;lucy&#39;, &#39;bob&#39;, &#39;tod&#39;, &#39;lily&#39;, &#39;oreo&#39;, &#39;charlie&#39;, &#39;cookie&#39;, &#39;ollie&#39;] New Random Order: [&#39;skippy&#39;, &#39;pluto&#39;, &#39;chase&#39;, &#39;mochi&#39;, &#39;ginger&#39;, &#39;louis&#39;, &#39;luna&#39;, &#39;lemon&#39;, &#39;boba&#39;, &#39;jeff&#39;] .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/12/lib-rand-values.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/12/lib-rand-values.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Unit 3 Sections 12 and 13",
            "content": "Vocab . Procedural Abstraction: provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it | Parameters: input values of a procedure | Arguments: specify the values of the parameters when a procedure is called | . Calling and Developing Procedures . procedure: named group of programming instructions that may have parameters and return values can be referred to as method or function | . | Parameters: input values of a procedure | Arguments: specify the values of the parameters when a procedure is called | Procedure calls interrupts the sequential execution of statements causing the program to execute the statements within the procedure before continuing. One the last statement in the procedure (or a return statement) has executed, flow or control is returned to the point immediately following where the procedure was called. | consider whether the call returns data or a block of statements -block of statements: call the procedure by referring to the procedure name and inputting the arguments Data(boolean or value): assign that value to a variable | . | . | . Problem 1 convert pseudo code to python | procedure convertFahrenheit converts fahrenheit to celsius | . | . def convertFahrenheit(temperature): celsius = temperature - 32 celsius = celsius * 0.56 return celsius outsideTemp = input(&quot;what is the temperature outside?&quot;) outsideTemp = (convertFahrenheit(int(outsideTemp))) print(outsideTemp) . -13.440000000000001 . Developing procedures Two Types of Procedures one that returns a value | on that executes a block of statements | . | important to pick a descriptive name | steps: picking a good name, thinking of parameters, making a flowchart, develop procedure | . | . Writing Procedures Activity | . quizGrade = 32 def currentGrade(currentPoints): currentGrade = currentPoints / 40 currentGrade = currentGrade * 100 return currentGrade newPoints = int(input(&quot;how many points do you currently have?&quot;)) newPercent = (currentGrade(int(newPoints))) if (newPoints &gt; quizGrade): newquizGrade = newPercent print(&quot;your new grade is: &quot; + str(newquizGrade)) else: print(&quot;your score is still &quot; + str(quizGrade)) . your new grade is: 100.0 . Procedural Abstraction one type of abstraction is procedural: provides a name for a process and allows a procedure to be used only knowing what it does and not how it does it helpful for managing complexity -Subdivision of a program into separate subprograms is called modularity | . | may extract shared features to generalize functionality instead of duplicating code allows for program reuse, which helps manage complexity | . | naming and calling a pre-written procedure | include the right arguments so the procedure can do what its supposed to do | . | . HW . Write and call a python procedure about something which can help you in school, for example the teacher’s function we spoke about earlier. | Points will be awarded based on creativity and functionality | . AP English Vocab study database search/add/delete functions add/delete terms. | quickly search for terms already in the database | . | all three functions are called in the main function which is called at the bottom of the code cell | . | . infoDb = [] infoDb.append({ &quot;Word&quot;: &quot;Pristine&quot;, &quot;Definition&quot;: &quot;Pure, clean&quot;, }) infoDb.append({ &quot;Word&quot;: &quot;Expiation&quot;, &quot;Definition&quot;: &quot;Atonement&quot;, }) def print_data2(d_rec): #formatting print(&quot;Word:&quot;, d_rec[&quot;Word&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Definition:&quot;, d_rec[&quot;Definition&quot;]) # t is a tab indent print() def data_entry(): #defining the function that asks for user input Word = input(&quot;What vocab word would you like to save in the database?&quot;) Definition = input(&quot;What is the definition of the vocab word?&quot;) infoDb.append({ #appends the user input to the dictionary &quot;Word&quot;: Word, &quot;Definition&quot;: Definition, }) def search_data(word): for record in infoDb: if record[&quot;Word&quot;] == word: #compares the already existing word to the word inputted with the word variable return record return NULL def data_delete(word): record = search_data(word) #defines record as the word inputted with the search function if (record != NULL): #if the record doesn&#39;t equal null (does it exist?) then the next line removes it infoDb.remove(record) print(word, &quot;has been deleted!&quot;) else: print(&quot;Record not found!&quot;) def main(): Continue = True #defining continue as true while Continue: lol = input(&quot;What would you like to do (add/search/delete, type no if you want to exit)?&quot;) if lol == &quot;no&quot;: print(&quot;Come back again!&quot;) Continue = False elif lol == &quot;add&quot;: data_entry() elif lol == &quot;search&quot;: word = input(&quot;What word do you want to search?&quot;) record = search_data(word) #defines record as the input &quot;word&quot; and runs it through the search function print_data2(record) elif lol == &quot;delete&quot;: word = input(&quot;What word do you want to delete&quot;) data_delete(word) else: print(&quot;Invalid input. Please try again&quot;) length = len(infoDb) #defines length as the number of records print(&quot;Total Number of Words: &quot;, length) for record in infoDb: print_data2(record) main() . Word: Pristine Definition: Pure, clean Come back again! Total Number of Words: 3 Word: Pristine Definition: Pure, clean Word: Expiation Definition: Atonement Word: veneration Definition: respect .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/08/devlop-procedures.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/08/devlop-procedures.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Unit 3 Sections 9 and 11",
            "content": "Vocab . Algorithms: Process or set of rules to followed through code | condition: is a boolean expression when an expression outputs either true or false | boolean values: are another type of data in programming languages. can only hold true or false | Selection: process used in algorithms where a conditional if statement leads to one of two outcomes | Iteration: process that allows certain things to happen until a condition is satisfied | Binary Search: search algorithm that finds the position of a target value within a sorted array. | Bits: most basic unit of information in computing and digital communications | byte: a group of binary digits or bits (usually eight) operated on as a unit | hexadecimal: relating to or using a system of numerical notation that has 16 rather than 10 as its base. | . Developing Algorithms and Binary Search . Algorithms Process or set of rules to followed through code | there are set limitations | can be written in different ways and still accomplish th same tasks | . | . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) else: if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) else: print(&quot;It is too cold outside!&quot;) . Sure I will play outside! . temp = int(input(&quot;Select a temperature from 0 to 99 degrees F&quot;)) if (temp &gt;= 90): print(&quot;It&#39;s too hot outside!&quot;) if (temp &gt;= 65): print(&quot;Sure I will play outside!&quot;) if (temp &lt; 65): print(&quot;It is too cold outside!&quot;) . It&#39;s too hot outside! Sure I will play outside! . Conditionals vs. Booleans condition is a boolean expression when an expression outputs either true or false | boolean values are another type of data in programming languages. can only hold true or false | . | . IsHoliday = False IsWeekday = True if IsHoliday: driveWork = True else: if IsWeekday: driveWork = True else: driveWork = False print(driveWork) . True . . sum = 1 counter = 3 loop = 0 while (loop &lt; 4): sum = sum + counter counter = counter + 2 loop = loop + 1 else: print(sum) . 25 . sum = 0 counter = 9 while (counter &gt;= 1): sum = sum + counter counter = counter - 2 print(sum) . 25 . Selection process used in algorithms where a conditional if statement leads to one of two outcomes | . | Iteration process that allows certain things to happen until a condition is satisfied | . | . Algorithm to Start (Determining Whether a Number is Even or Odd) | . Binary Search search algorithm that finds the position of a target value within a sorted array. | Binary search compares the target value to the middle element of the array. | An algorithm for iterating to find a value inside a data set | starts in the middle of a data set of numbers and eliminates half the data. This process repeats until the desired value is found or until all elements have been eliminated. | In order to use binary search effectively and properly, data must be stored in order | COLLEGE BOARD INDEX STARTS AT 1 NOT 0 | . | . def BinarySearch(array, x, low, high): # Repeat until the pointers low and high meet each other while low &lt;= high: mid = low + (high - low)//2 # find the middle (taking the higest index number plus the lowest and divided by two) if array[mid] == x: # if desired number is the middle is found return desired number (middle number) return mid elif array[mid] &lt; x: low = mid + 1 else: high = mid - 1 return -1 array = [3, 4, 5, 6, 7, 8, 9] x = 4 result = BinarySearch(array, x, 0, len(array)-1) if result != -1: print(&quot;Element is present at index &quot; + str(result)) else: print(&quot;Not found&quot;) . HW . Binary Search with Iteration Compare x with the middle element. | If x matches with the middle element, we return the mid index. | Else if x is greater than the mid element, then x can only lie in the right (greater) half sub-array after the mid element. Then we apply the algorithm again for the right half. | Else if x is smaller, the target x must lie in the left (lower) half. So we apply the algorithm for the left half. | . | . def binary_search(arr, x): low = 0 high = len(arr)-1 mid = 0 if low&lt;=high: mid = (low + high) // 2 #integer part if x == arr[mid]: return mid elif x &lt; arr[mid]: high = mid - 1 return high else: low = mid + 1 return low else: return -1 arr = [1,2,3,4,5,6,7,8,9,10,11] x = 11 result = binary_search(arr, x) if result != -1: print(&quot;Found at position : &quot;,str(result)) else: print(&quot;Not in the array!&quot;) . Found at position : 6 . FlowChart for Situation You&#39;re playing a short game using a random number generator from 1 to 20 | On each turn, a player will generate 3 random numbers | They get to keep the highest number that they generate as their score | . | . Link to Google Drawing . . import random Num = [] Score = 0 num1, num2, num3 = random.sample(range(1, 20), 3) #generates a random number and equates it to num1, num2, and num3 Num.extend([str(num1), str(num2), str(num3)]) #adds num1, num2, and num3 to the list ‘Num’ for i in Num: #iterates through each number in the list Num newScore = (max(map(int, Num))) #map makes the list a list of integers. uses max syntax to find the largest number in the list Num. print(&quot;You rolled the numbers &quot; + str(Num) + &quot;. Your score is: &quot; + str(newScore)) ##prints new score . You rolled the numbers [&#39;12&#39;, &#39;2&#39;, &#39;4&#39;]. Your score is: 12 .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/06/algo-binary.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/06/algo-binary.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Unit 3 Sections 8 and 10",
            "content": "Vocab . Lists: sequence of variables | Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | . Boolean Iteration and Lists . Lists sequence of variables | used to store multiple items into a single variable | changeable, allow duplicates | can hold integers, strings, or booleans | . | Lists are 1/4 types of data collection types in python Tuple: collection that is ordered, unchangeable, allows duplicates | Set: collection that is unordered, unchangeable, doesn&#39;t allow duplicates | Dictionary: collection that is ordered, changeable, doesn&#39;t allow duplicates | . | Index: a term used to sort data in order to reference to an element in a list (allows for duplicates) | Elements: the values in the list assigned to an index | Iteration: repetition of a process or utterance applied to the result or taken from a previous statement | Loops: automate the iteration process | . fruits = [&quot;apple&quot;, &quot;grape&quot;, &quot;strawberry&quot;] index = 1 print (fruits[index]) . grape . Methods in Lists . Method Definition Example . append() | adds element to the end of the list | fruits.append(&quot;watermelon&quot;) | . index() | returns the index of the first element with the specified value | fruits.index(&quot;apple&quot;) | . insert() | adds element at given position | fruits.insert(1, &quot;watermelon&quot;) | . remove() | removes the first item with the specified value | fruits.remove(&quot;strawberry&quot;) | . reverse() | reverses the list order | fruits.reverse() | . sort() | sorts the list | fruits.sort() | . count() | returns the amount of elements with the specified value | fruits.count(&quot;apple&quot;) | . copy() | returns a copy of the list | fruits.copy() | . clear() | removes the elements from the list | fruits.clear() | . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # change the value &quot;soccer&quot; to &quot;hockey&quot; sports.remove(&quot;soccer&quot;) sports.insert(1, &quot;hockey&quot;) print (sports) . [&#39;football&#39;, &#39;hockey&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . sports = [&quot;football&quot;, &quot;soccer&quot;, &quot;baseball&quot;, &quot;basketball&quot;] # add &quot;golf&quot; as the 3rd element in the list sports.insert(2, &quot;golf&quot;) print (sports) . [&#39;football&#39;, &#39;soccer&#39;, &#39;golf&#39;, &#39;baseball&#39;, &#39;basketball&#39;] . Iteration repetition of a process or utterance applied to the result or taken from a previous statement | methods include using a &quot;for loop&quot;, using a &quot;for loop and range()&quot;, using a &quot;while loop&quot;, and using comprehension | Lists, tuples, dictionaries, and sets are iterable objects. They are the &#39;containers&#39; that store the data to iterate | Each of these containers are able to iterate with the iter() command. | 2 types Definite: clarifies how many times the loop is going to run | Indefinite: specifies a condition that must be met | . | . | . Loops automates the iteration process | . | . list = [&quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # using a for loop for i in list: #for item in the list, print the item print(i) . Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Alpha&quot;, &quot;Bravo&quot;, &quot;Tango&quot;, &quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Taking the length of the list lengthList = len(list) # Iteration using the amount of items in the list for i in range(lengthList): print(list[i]) . Alpha Bravo Tango Uniform Victor Whiskey X-ray Yankee Zulu . list = [&quot;Uniform&quot;, &quot;Victor&quot;, &quot;Whiskey&quot;, &quot;X-ray&quot;, &quot;Yankee&quot;, &quot;Zulu&quot;] # Once again, taking the length of the list lengthList = len(list) # Setting the variable we are going to use as 0 i=0 # Iteration using the while loop # Argument saying WHILE a certain variable is a certain condition, the code should run while i &lt; lengthList: print(list[i]) i += 1 . Uniform Victor Whiskey X-ray Yankee Zulu . 2D Iterations list of lists | . | . keypad = [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&quot; &quot;, 0, &quot; &quot;]] . Printing a 2D array | . def print_matrix1(matrix): for i in range(len(matrix)): # outer for loop. This runs on i which represents the row. range(len(matrix)) is in order to iterate through the length of the matrix for j in range(len(matrix[i])): # inner for loop. This runs on the length of the i&#39;th row in the matrix (j changes for each row with a different length) print(matrix[i][j], end=&quot; &quot;) # [i][j] is the 2D location of that value in the matrix, kinda like a coordinate pair. [i] iterates to the specific row and [j] iterates to the specific value in the row. end=&quot; &quot; changes the end value to space, not a new line. print() # prints extra line. this is in the outer loop, not the inner loop, because it only wants to print a new line for each row . print(&quot;Raw matrix (list of lists): &quot;) print(keypad) print(&quot;Matrix printed using nested for loop iteration:&quot;) print_matrix1(keypad) print() . Raw matrix (list of lists): [[1, 2, 3], [4, 5, 6], [7, 8, 9], [&#39; &#39;, 0, &#39; &#39;]] Matrix printed using nested for loop iteration: 1 2 3 4 5 6 7 8 9 0 . def print_matrix2(matrix): for row in matrix: # Iterates through each &quot;row&quot; of matrix. Row is a dummy variable, it could technically be anything. It iterates through each value of matrix and each value is it&#39;s own list. in this syntax the list is stored in &quot;row&quot;. for col in row: # Iterates through each value in row. Again col, column, is a dummy variable. Each value in row is stored in col. print(col, end=&quot; &quot;) # Same as 1 print() # Same as 1 print_matrix2(keypad) . 1 2 3 4 5 6 7 8 9 0 . HW . def print_matrix3(matrix): for row in matrix: print(*row, end=&quot; &quot;) print() print_matrix3(keypad) . 1 2 3 4 5 6 7 8 9 0 . Print what month you were born and how old you are by iterating through the keyboard (don&#39;t just write a string). . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] output = &quot;MAY16&quot; for char in output: #each item in the output is a character for row in keyboard: #each item in the keyboard is a row for key in row: #each item in the row is a key if str(key) == char: #if the key matches each character in output print(key, end=&#39;&#39;) break #ends the loop. back to first loop . MAY16 . Use the list below to turn the first letter of any word (using input()) into its respective NATO phonetic alphabet word . Ex: list -&gt; lima india sierra tango . words = [&quot;alfa&quot;, &quot;bravo&quot;, &quot;charlie&quot;, &quot;delta&quot;, &quot;echo&quot;, &quot;foxtrot&quot;, &quot;golf&quot;, &quot;hotel&quot;, &quot;india&quot;, &quot;juliett&quot;, &quot;kilo&quot;, &quot;lima&quot;, &quot;mike&quot;, &quot;november&quot;, &quot;oscar&quot;, &quot;papa&quot;, &quot;quebec&quot;, &quot;romeo&quot;, &quot;sierra&quot;, &quot;tango&quot;, &quot;uniform&quot;, &quot;victor&quot;, &quot;whiskey&quot;, &quot;xray&quot;, &quot;yankee&quot;, &quot;zulu&quot;] inp = input().lower() letters = [] for letter in inp: for word in words: if word.startswith(letter): print(word) break . victor india victor india alfa november . Challenge . Change all of the letters that you DIDN&#39;T print above to spaces, &quot; &quot;, and then print the full keyboard. (the things you did print should remain in the same spot) . | Alternative Challenge: If you would prefer, animate it using some form of delay so it flashes one of your letters at a time on the board in order and repeats. (this one may be slightly more intuitive) . | . keyboard = [[&quot;`&quot;, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, &quot;-&quot;, &quot;=&quot;], [&quot;Q&quot;, &quot;W&quot;, &quot;E&quot;, &quot;R&quot;, &quot;T&quot;, &quot;Y&quot;, &quot;U&quot;, &quot;I&quot;, &quot;O&quot;, &quot;P&quot;, &quot;[&quot;, &quot;]&quot;], [&quot;A&quot;, &quot;S&quot;, &quot;D&quot;, &quot;F&quot;, &quot;G&quot;, &quot;H&quot;, &quot;J&quot;, &quot;K&quot;, &quot;L&quot;, &quot;;&quot;, &quot;&#39;&quot;], [&quot;Z&quot;, &quot;X&quot;, &quot;C&quot;, &quot;V&quot;, &quot;B&quot;, &quot;N&quot;, &quot;M&quot;, &quot;,&quot;, &quot;.&quot;, &quot;/&quot;]] output = &quot;MAY16&quot; for row in keyboard: #each item in the keyboard is a row for key in row: #each item in the row is a key if str(key) in output: #check if key is in output print(key, end=&#39;&#39;) else: print(&quot; &quot;, end=&#39;&#39;) print(&quot; n&quot;) . 1 6 Y A M .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/05/bool-itera-lists.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/05/bool-itera-lists.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Unit 3 Sections 5-7",
            "content": "Vocab . Boolean: a data type with two possible values: true or false | Logical Operators: these types of operators don&#39;t necessarily deal with equivalent/non-equivalent values | Conditionals Selection: Uses a condition that evaluates to true or false | determines which part of an algorithm are executed based on a condition being true or false | Algorithm is a finite set of instructions that accomplish a specific task | . | Nested Conditionals: consist of conditional statements within other conditional statements | . Boolean Expression, Conditionals, Nested Conditionals . Boolean a data type with two possible values: true or false | boolean quantities are restricted to a singular bit (can only be either 1 or 0) | . | . Relational Operators The AP exam will provide a ref sheet with these operators: | . | . grade1 = 90 grade2 = 65 grade3 = 60 grade4 = 75 grade5 = 95 totalGrade = grade1 + grade2 + grade3 + grade4 + grade5 avgGrade = totalGrade/5 if avgGrade &gt; 80: print(&quot;The avf grade was &quot; + avgGrade) else: print(&quot;the avg grade was not greater than 80 :(. It was &quot; + str(avgGrade)) . Logical Operators these types of operators don&#39;t necessarily deal with equivalent/non-equivalent values. | Instead they work on operands to produce a singular boolean result | . AND: returns TRUE if the operands around it are TRUE | OR: returns TRUE if at least one operand is TRUE | NOT: returns TRUE if the following boolean is FALSE | | . print(&quot;1 &gt; 2 or 5 &lt; 12:&quot;, 1 &gt; 2 or 5 &lt; 12) # Output TRUE using OR ^ # Output FALSE using NOT print(&quot;7 &gt; 8:&quot;, not 7 &gt; 8) # Output FALSE using AND print(&quot;10 &gt; 20:&quot;, 10 &gt; 20 and False) . Conditionals Selection: Uses a condition that evaluates to true or false | determines which part of an algorithm are executed based on a condition being true or false | Algorithm is a finite set of instructions that accomplish a specific task | . | . Conditional Statements also known as if statements | . | . x = 20 y = 10 if x &gt; y: print(&quot;x is greater than y&quot;) else: print(&quot;x is not greater than y&quot;) . num1 = 100 num2 = 100 sum = num1 + num2 if sum == 200: print(sum) else: print(sum) . Nested Conditionals consist of conditional statements within other conditional statements | uses &quot;if else&quot; statements within &quot;if else&quot; statements | . | . HW . Write a program that fits these conditions using nested conditionals: If the product is expired, print &quot;this product is no good&quot; | If the cost is above 50 dollars, and the product isn&#39;t expired, print &quot;this product is too expensive&quot; | If the cost is more than 25 dollars but under 50, and the product isn&#39;t expired, print &quot;this is a regular product&quot; | If the cost is under 25 dollars, print &quot;this is a cheap product&quot; | . | . infoP = [] infoP.append({ &quot;Product&quot;: &quot;Cheese&quot;, &quot;Expired&quot;: True, &quot;Cost&quot;: 15, }) infoP.append({ &quot;Product&quot;: &quot;Wine&quot;, &quot;Expired&quot;: False, &quot;Cost&quot;: 75, }) def print_info(p_rec): if (p_rec[&quot;Expired&quot;]): print(&quot; t&quot;, &quot;This product is no good&quot;) else: if (p_rec[&quot;Cost&quot;] &gt; 50): print(&quot; t&quot;, &quot;This product is too expensive&quot;) elif (p_rec[&quot;Cost&quot;] &gt; 25 and p_rec[&quot;Cost&quot;] &lt;= 50): print(&quot; t&quot;, &quot;This is a regular product&quot;) else: print(&quot; t&quot;, &quot;This is a cheap product&quot;) def print_data(p_rec): #formatting print(&quot; t&quot;, &quot;Product:&quot;, p_rec[&quot;Product&quot;]) print(&quot; t&quot;, &quot;Expired:&quot;, p_rec[&quot;Expired&quot;]) print(&quot; t&quot;, &quot;Cost:&quot;, p_rec[&quot;Cost&quot;]) print_info(p_rec) print(&quot; n&quot;) def data_entry(): #defining the function that asks for user input product = input(&quot;What is the product? (one word)&quot;) expired_string = input(&quot;Is it expired? (True or False)&quot;) cost = input(&quot;How much did it cost(dont include $, round to nearest whole number)&quot;) if (expired_string == &quot;True&quot;): expired = True else: expired = False infoP.append({ #appends the user input to the dictionary &quot;Product&quot;: product, &quot;Expired&quot;: expired, &quot;Cost&quot;: int(cost), }) def main(): Continue = True #defining continue as true while Continue: inp = input(&quot;Would you like to add a product to the database, type no if you want to exit)?&quot;) if inp == &quot;no&quot;: print(&quot;Come back again!&quot;) Continue = False elif inp == &quot;add&quot;: data_entry() else: print(&quot;Invalid input. Please try again&quot;) length = len(infoP) #defines length as the number of records print(&quot;Total Number of Records: &quot;, length) for record in infoP: print_data(record) main() . Come back again! Total Number of Records: 3 Product: Cheese Expired: True Cost: 15 This product is no good Product: Wine Expired: False Cost: 75 This product is too expensive Product: pie Expired: False Cost: 15 This is a cheap product . Create a multiple choice quiz that ... uses Boolean expressions | uses Logical operators | uses Conditional statements | prompts quiz-taker with multiple options (only one can be right) | has at least 3 questions | . | . import getpass def question_with_response(prompt): #defines question_with_response print(&quot;Question: &quot; + prompt) #prints the question to the user msg = input() #takes the user&#39;s input return msg #returns the user&#39;s input as a printed answer def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser()) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) #str(questions) turns the number 3 that is = to questions into a string that can be printed rsp = question_with_response(&quot;Have humans ever reached the moon? False True&quot;) #asks the question in terminal if (rsp == &quot;True&quot;): print(rsp + &quot; is correct!&quot;) #prints &quot;is correct&quot; if the rsp was correct correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many hearts does an octopus have? a. 8 b. 4 c. 3 d. 1&quot;) if rsp == &quot;c&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Which of the following countries have won the world cup?(Type your answer separated by &#39;,&#39;) a. Brazil b. France c. Japan d. China&quot;) # rsp = &quot;a,b&quot; if (&quot;a&quot; in rsp) and (&quot;b&quot; in rsp) and (&quot;c&quot; not in rsp) and (&quot;d&quot; not in rsp): print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(&quot;You got &quot; + str(correct) + &quot; out of 3&quot;) . Hello, vivian You will be asked 3 questions. Question: Have humans ever reached the moon? False True True is correct! Question: How many hearts does an octopus have? a. 8 b. 4 c. 3 d. 1 c is correct! Question: Which of the following countries have won the world cup?(Type your answer separated by &#39;,&#39;) a. Brazil b. France c. Japan d. China a,b is correct! You got 3 out of 3 .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/05/bool-express-conditional.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/05/bool-express-conditional.html",
            "date": " • Dec 5, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Unit 3 Sections 3-4",
            "content": "Vocab . algorithms: set of instructions that can accomplish a specific task | Pseudocode: A blend of human language and coding format. | Strings: A string is a collection of characters. character can be anything from numbers, letters, spaces, | String concatenation: combining 2 or more strings to make a new strings in order to create a new string | Substrings: A substring is a part of and already existing string. | . Mathematical Expressions and Strings . algorithms set of instructions that can accomplish a specific task | Arithmetic operations in programming are performed in the same order as operations in mathematics | Three different types sequence: Algorithms do tasks in the order of specification | selection: select two diff outcomes based on one decision | iteration: if a certain condition is proved true then a second step will be repeated | . | can be represented in two ways Pseudocode: A blend of human language and coding format. | flow charts | . | . | . Different way variables are stored Numerical value stored in a variable | Value of another variable stored in a variable | Result of an operation stored in a variable | Result of a procedure call stored in a variable | . | . score = 0 # 1 score = newScore # 2 score = newScore + 2 # 3 avgScore = allscores(20, 60, 80) # 4 . Strings A string is a collection of characters. character can be anything from numbers, letters, spaces, special symbols, etc. | len() to find the length of a string | lower() to convert to lowercase | len() returns the length of a string | . | String Concatenation String concatenation is combining 2 or more strings to make a new strings in order to create a new string | concat() returns a string made up of the concatenated strings | concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster | . | Substrings A substring is a part of and already existing string. | substring() returns the characters from the string begining at the first position to the last. Ex: (&quot;abcdefghijk&quot;, 2, 5) would print bced | . | . HW . Noun = &quot;Mr.Mortenson&quot; Adjective = &quot;handsome&quot; Adjective2 = &quot;Very&quot; Verb = &quot;is&quot; abrev = Noun[0:6] yoda = Adjective2 + &quot; &quot; + Adjective + &quot; &quot; + abrev + &quot; &quot; + Verb + &quot;.&quot; print(yoda) . Very handsome Mr.Mor is. . cookie = &quot;choclate&quot; cookie2 = &quot;rasin&quot; len1 = len(cookie) / 2 len2 = len(cookie2) * 45 vote1 = cookie + &quot; vote &quot; + str(len2) vote2 = cookie2 + &quot; vote &quot; + str(len1) votes = vote1 + &quot; &quot; + vote2 print(votes) . choclate vote 225 rasin vote 4.0 .",
            "url": "https://vivianknee.github.io/FastPages/student%20teaching%20portfolio/2022/12/03/math-express-strings.html",
            "relUrl": "/student%20teaching%20portfolio/2022/12/03/math-express-strings.html",
            "date": " • Dec 3, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "CollegeBoard Final MC",
            "content": ". Takeaways . On my collegeboard Final MC, my score was 43/50 | The skills that I got wrong were: 4.B: determine the result of code segments (3 wrong) | 2.B: implement and apply an algorithm (2 wrong) | 3.C: explain how abstraction manages complexity (1 wrong) | 4.A: explain how a code segment or program functions (1 wrong) | . | . Questions . Q47: What is displayed as a result of executing the code segment? . . I chose “21 40 30 40” but the answer was “21 40 30 50” | Notes I forgot about PEMDAS (order of operations) and I also just misread the question | I thought it wanted me to compute (c+d)/2 but it actually wanted me to solve c + (d/2) | . | . Q45: What are the values of count1 and count2 as a result of executing the code segment? . . I chose “count1=3, count2=2” but the answer was “count1=2, count2=3” | Notes I overlooked the fact that the value had to be &gt;0 not &gt;=0 so I thought there were 3 positive integers instead of 2. This mistake also messed up my result for count2 | . | . Q43: What is the value of result after the code segment is executed? . . I chose “6” but the answer was “15” | Notes I misread the question as asking what the result would be when “result” was &gt;5, but in actuality it was asking for the result when “x” became &gt;5 | . | . Q36: Consider the following code segment, which is intended to store ten consecutive even integers, beginning with 2, in the list evenList. Assume that evenList is initially empty. Which of the following can be used to replace “&lt;”MISSING CODE” so that the code segment works as intended? . . I chose “i ← i + 1 APPEND(evenList, 2 * i)” but the answer was “APPEND(evenList, 2 * i) i ← i + 1” | Notes This question, I understood the code but what I got wrong was the order of the lines. | If i wanted to include “2” in my eveList, I would have to have the APPEND line come first otherwise “2” would be skipped and absent from evenList | . | . Q35: what is displayed as a result of executing the code segment? . Notes I literally forgot to select two answers so I got the whole problem wrong | . | . Q23: The position of a runner in a race is a type of analog data. The runner’s position is tracked using sensors. Which of the following best describes how the position of the runner is represented digitally? . I chose “The position of the runner is determined by calculating the time difference between the start and the end of the race and making an estimation based on the runner’s average speed.” | The correct answer was “The position of the runner is sampled at regular intervals to approximate the real-word position, and a sequence of bits is used to represent each sample.” | Notes While a runner’s position could be estimated using the runner’s average speed, a more accurate representation of the position over time can be achieved using a sampling technique. | Analog data, like the runner’s position, have values that change smoothly, rather than in discrete intervals. Analog data can be approximated digitally by measuring values of the analog signal at regular intervals called samples | . | . Q6: In the following procedure, the parameter max is a positive integer. Which of the following is the most appropriate documentation to appear with the printNums procedure? . . I chose “Prints all positive odd integers that are greater than max.” but the answer was “Prints all positive odd integers that are less than or equal to max.” | Notes The function says it repeats until count &gt; max so it doesn’t make sense that printNums would display numbers greater than max. | . | .",
            "url": "https://vivianknee.github.io/FastPages/final/2022/11/04/finalmcreview.html",
            "relUrl": "/final/2022/11/04/finalmcreview.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "CollegeBoard APCSP MC Notes",
            "content": "Identifying and Correcting Errors Quiz (10/10/22) . Outline . 3 question quiz testing whether I can identify and solve different errors found in code. | Score: 3/3 | . Notes/Process . . The code doesn’t work when the last value is positive but the rest are negative. In this case the answer was [-1, 0, 1] | The procedure traverses this list and eventually encounters the positive value 1. At this point, the procedure returns true when it should return false because the list does not contain only positive values. [-1, 0, 1] | . The Internet Quiz (10/10/22) . Outline . 3 question quiz testing my knowledge of networking including topics like packets, data, and transmitting information across the internet. | Score: 3/3 | . Notes/Process . When messages are transmitted across the internet, the message is broken into packets. The packets can be received in any order and still be reassembled by the recipient’s device | One of the primary uses of the open protocol on the internet is to provide a way to standardize data transmission between different devices. | The World Wide Web is a system of linked pages, programs, and files that is accessed via a network called the Internet. | . Program Design and Development Quiz (9/26/22) . Outline . 3 question quiz testing my knowledge of coding procedures | Score: 3/3 | . Notes/Process . . count is set to 1 outside of the loop | the loop adds 2 to the variable count each time meaning it is printing odd numbers | since the loop is set to stop once the count is greater than max, this means that the function will print all positive odd integers that are less than or qual to max | . . the variable result is set to x + y | a new result variable is set to the previous result divided by x | therefore, the printed result must be (x + y)/x where x must not be 0(then it would be undefined) | . . newList is = to numList | the elements j and k are interchanged for numList and newList | since j and k are indices, they must be valid values, hence the values of j and k must both be between 1 and length(numList) | . Collaboration Quiz (9/4/22) . Outline: . 3 question quiz testing my knowledge on collaboration | Score: 3/3 | . Notes/Process . Most of the questions in this quiz were answered based on common sense. Some answers had more positive connotations than others so picking the right answer was easy. | I understood that facilitating collaboration between group members was important. | I learned that user participation should be used to advance software development | I also learned that assembling a diverse team allows for multiple perspectives. | . Program Function and Purpose Quiz (9/4/22) . Outline . 6 question quiz testing my understanding of the behavior of code | Score: 6/6 | . Notes/Process . There was a set of questions looking for what data was necessary to fulfill the task. For those questions, I used logic and reasoning to figure out what was necessary and what was not. | . . this was a pretty self explanatory if statement. | It sets y as a variable when x is less than 0 meaning if y follows the criteria , it will print the value. | if the criteria set by the variable are not met, nothing will print. | .",
            "url": "https://vivianknee.github.io/FastPages/week7/2022/10/22/collegeboardmcnotes.html",
            "relUrl": "/week7/2022/10/22/collegeboardmcnotes.html",
            "date": " • Oct 22, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Python RapidAPI",
            "content": "| JS Table | Using the JS Kernel | API | . . Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Getting an API . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the RapidAPI Hub- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &#39;x-rapidapi-key&#39;: &quot;dec069b877msh0d9d0827664078cp1a18fajsn2afac35ae063&quot;, &#39;x-rapidapi-host&#39;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } # Request Covid Data response = requests.request(&quot;GET&quot;, url, headers=headers) #print(response.text) # uncomment this line to see raw data # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . VASE Project API . This API shows publications, symptoms, treatment, funding, and grants for medical and health. . import requests url = &quot;https://diagnosis.p.rapidapi.com/api/DDxItems/GetSymptoms&quot; querystring = {&quot;AuthenticationID&quot;:&quot;DEMO_AuthenticationID&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;59ac7d2cadmsh664b50412aa531bp133fd0jsn1da9685dbdb5&quot;, &quot;X-RapidAPI-Host&quot;: &quot;diagnosis.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.json()) for symptom in response.json(): #print(symptom) stext = symptom.get(&quot;symptom&quot;) if (&quot;[&quot; not in stext): print(stext.strip() + &quot;: &quot; + symptom.get(&quot;category&quot;)) . rapid breathing: Breathing hurried respiration: Breathing hyperventilation: Breathing overbreathing: Breathing breathing faster or deeper than normal: Breathing increased breathing rate: Breathing hurried breathing: Breathing labored and unusually rapid breathing: Breathing lethargy: Catastasis confusion: Cognitive problems anxiety: Cognitive problems turmoil: Cognitive problems tumult: Cognitive problems disarray: Cognitive problems commotion: Cognitive problems agitation: Cognitive problems restlessness: Cognitive problems disorientation: Cognitive problems nervousness: Cognitive problems stupor: Catastasis coma: Catastasis easy fatigue: Catastasis shortness of breath: Breathing wheezing: Breathing dyspnea: Breathing dyspnoea: Breathing breathlessness: Breathing apnea: Breathing wheeze: Breathing labored breathing: Breathing chest tightness: Breathing sleepiness: Catastasis hand tremor: Muscles hand trembling: Muscles hand shiver: Muscles hand shudder: Muscles hand tremble: Muscles hand thrill: Muscles lightheadedness: Catastasis muscle twitching: Muscles muscular contraction: Muscles clonus: Muscles tick: Muscles teak: Muscles tic: Muscles ticking: Muscles drill: Muscles nausea: Catastasis vomiting: Catastasis vomit: Catastasis emesis: Catastasis retching: Catastasis puke: Catastasis vomitus: Catastasis numbness or tingling in the face: Muscles numbness or tingling in the hands: Muscles numbness or tingling in the feet: Muscles muscle spasms: Muscles tetany: Muscles tetanilla: Muscles muscle cramp: Muscles muscle convulsion: Muscles muscle kink: Muscles convulsions: Muscles fever: Catastasis low blood pressure: Catastasis hypotension: Catastasis blood in urine: Blood protein in the urine: Urination proteinuria: Urination blood in the stool: Blood headache: Pains migraine: Pains cephalgia: Pains cephalalgia: Pains woe: Pains encephalalgia: Pains small red dots on the skin: Skin mucosal bleeding: Blood epistaxis: Blood bleeding from the nose: Blood nose bleeding: Blood gums bleeding: Blood mouth bleeding: Blood nosebleed: Blood blackening of the skin: Skin chest pain: Pains cardiac pain: Pains angina: Pains chest pain on exertion: Pains tightness: Pains squeezing sensation of the chest: Pains coughing up blood: Blood difficulty breathing: Breathing trouble breathing: Breathing abdominal pain: Pains decreased body hair: Skin baldness: Skin hair loss: Skin alopecia: Skin calvities: Skin acomia: Skin loss of hair: Skin thinning hair: Skin balding: Skin dehydration: Catastasis diarrhea: Stools frequent bowel movements: Stools flux: Stools looseness: Stools scour: Stools intermittent diarrhea: Stools constipation: Stools fainting: Catastasis unconsciousness: Catastasis loss of consciousness: Catastasis apsychia: Catastasis faintness: Catastasis insensibility: Catastasis faint: Catastasis syncope: Catastasis swoon: Catastasis fainting-fit: Catastasis near fainting: Catastasis fatigue: Catastasis hyperpigmentation: Skin dark patches of skin: Skin darkening of the skin that&#39;s not related to sun exposure: Skin darkening of skin color: Skin discoloration: Skin freckles: Skin mottled skin: Skin joint aches: Pains muscle aches: Pains muscle pain: Pains muscle soreness: Pains low blood sugar: Catastasis muscle weakness: Muscles myasthenia: Muscles weight loss: Catastasis salt craving: Appetite foamy urine: Urination hands swelling: Skin feet swelling: Skin face swelling: Skin swelling: Skin edema: Skin hypostasis: Skin puffy face: Skin swollen face: Skin edematous face: Skin hydropic face: Skin dropsical face: Skin succulent face: Skin abdomen swelling: Abdomen redness: Skin reddening: Skin redden: Skin rubor: Skin rubeosis: Skin ruddiness: Skin skin redness: Skin pain: Pains pale skin: Skin pallor: Skin paleness: Skin whiteness: Skin pallescence: Skin feebleness: Skin pale-looking skin: Skin fast heartbeat: Heart irregular heartbeat: Heart arrhythmia: Heart arhythmia: Heart anisorhythmia: Heart abnormal heart rhythm: Heart cognitive problems: Cognitive problems loss of higher reasoning: Cognitive problems difficulties with judgment and reasoning: Cognitive problems forgetfulness: Cognitive problems learning disabilities: Cognitive problems problems with comprehension or understanding: Cognitive problems concentration difficulties: Cognitive problems decreased intelligence: Cognitive problems impaired arithmetic, organizational, and language skills: Cognitive problems problems performing multiple tasks: Cognitive problems behavioral and emotional changes: Cognitive problems delirium: Cognitive problems delusion: Cognitive problems ravings: Cognitive problems drivel: Cognitive problems rave: Cognitive problems wanderings: Cognitive problems cold extremities: Catastasis brittle nails: Tissues nail abnormalities: Tissues nail dystrophy: Tissues thickened nails: Tissues pitted or ridged nails: Tissues disfiguring nails: Tissues spoon-shaped nails: Tissues swollen tongue: Tissues enlarged tongue: Tissues sore tongue: Tissues cracks or ulcers at the corners of the mouth: Oral craving to eat unusual non-food substances such as ice or dirt: Appetite slow reflexes: Catastasis slow reaction: Catastasis loss of balance: Vestibular unsteady walking: Vestibular unsteady gait: Vestibular difficulty walking: Vestibular depression: Cognitive problems dementia: Cognitive problems aphrenia: Cognitive problems feeble-mindedness: Cognitive problems mental debility: Cognitive problems prolonged bleeding: Blood easy bruising: Skin bruise: Skin mar: Skin extravasation: Skin hematoma: Skin purplish bruises caused by bleeding under the skin: Skin increased number and severity of infections: Catastasis pulmonary hypertension: Heart increased pressure over the pulmonary artery: Heart ventricular heart failure: Heart blindness: Catastasis Loss of vision: Catastasis deafness: Catastasis facial feature abnormalities: Catastasis larger and broader facial features: Catastasis coarse facial features: Catastasis thickening of the lips tongue and nostrils: Catastasis broad nose and flared nostrils: Catastasis inability to feel pain: Pains stillbirth: Obstetric dead birth: Obstetric absence of brain: Brain malformation of brainstem: Brain absence of skull bone normally surrounding the brain: Brain neonatal death: Obstetric newborn death: Obstetric death of newborn: Obstetric loss of appetite: Appetite numbness: Catastasis pain in the lower back: Pains pain in hips: Pains stiffness in the lower back: Pains stiffness in hips: Pains reddened eyes: Eyes eye pain: Eyes pressure in eyes: Eyes pain during eye movement: Eyes optic neuritis: Eyes sensitivity to light: Eyes blurred vision: Eyes diffuse vision: Eyes indistinct vision: Eyes nebulous vision: Eyes reduced vision: Eyes vision abnormalities: Eyes disturbed vision: Eyes heart valve inflammation: Heart coughing: Breathing cough: Breathing hacking cough: Breathing persistent cough: Breathing dry cough: Breathing coughing at night: Breathing wheezing or coughing after exercise: Breathing short breath during exercise: Breathing shortness of breath with activity: Breathing trouble sleeping: Catastasis cramps: Abdomen gripe: Abdomen cramp: Abdomen griping: Abdomen bellyache: Abdomen wring: Abdomen itchy eyes: Eyes sore throat: Oral tickle in the throat: Oral itchy throat: Oral itchy roof of mouth: Oral sneezing: Breathing joint swelling: Pains joint stiffness: Pains joint redness: Pains deformed joints: Pains joint cracking: Pains joint creaking: Pains joint tenderness: Pains joint loss of flexibility: Pains joint grating sensation: Pains joint bone spurs: Pains sores: Skin boils: Skin pus in hair follicles: Skin abscesses: Skin carbuncles: Skin sty: Skin impetigo: Skin granulomas: Skin chills: Catastasis shaking chills: Catastasis chill: Catastasis rigor: Catastasis shakes: Catastasis dither: Catastasis algor: Catastasis sweating: Skin lower-than-normal body temperature: Catastasis low body temperature: Catastasis chest pain that fluctuates with breathing: Breathing sluggishness: Catastasis tardiness: Catastasis deliberation: Catastasis sloth: Catastasis heaviness: Catastasis non mentally alert: Catastasis non-vigilantly attentive: Catastasis non-watchful: Catastasis dry skin: Skin weight gain: Catastasis get fat: Catastasis muscle tenderness: Muscles muscle stiffness: Muscles muscle wasting: Muscles rigid muscles: Muscles menorrhagia: Blood sensitivity to cold: Catastasis intolerance to cold: Catastasis blood in the vomit: Blood hoarse voice: Breathing raucous voice: Breathing husky voice: Breathing throaty voice: Breathing wheezy voice: Breathing gruff voice: Breathing hoarseness: Breathing deepened voice: Breathing high cholesterol: Blood irritability: Cognitive problems irascibility: Cognitive problems petulance: Cognitive problems temper: Cognitive problems impatience: Cognitive problems peevishness: Cognitive problems sensitivity to heat: Catastasis thyroid gland enlargement: Catastasis goiter: Catastasis change in menstrual cycles: Sexual erectile dysfunction: Sexual male impotence: Sexual reduced libido: Sexual sexual dysfunction: Sexual decreased libido: Sexual decreased sexual interest: Sexual low sex drive: Sexual bulging eyes: Eyes dry eyes: Eyes irritated eyes: Eyes gritty sensation in the eyes: Eyes eyes that are burn itch or feel gritty: Eyes puffy eyelids: Eyes double vision: Eyes limited eye movements: Eyes corneal ulcer: Eyes ulcers on the cornea: Eyes ulcerative keratitis: Eyes eyesore: Eyes reddening and thickening of the skin: Skin weak urine stream: Urination decreased force in the stream of urine: Urination slow urine flow: Urination trouble urinating: Urination frequent urination: Urination urgent need to urinate: Urination urinary urgency: Urination loss of bladder control: Urination urge to urinate: Urination needing to urinate more often than normal: Urination increased frequency of urination at night: Urination not being able to completely empty the bladder: Urination continuous feeling of a full bladder: Urination urinary tract infection: Urination formation of stones in the bladder: Urination reduced kidney function: Urination dark urine: Urination dark-colored urine: Urination blood in the semen: Blood pain in the pelvic area: Pains pelvic pain: Pains pelvis pain: Pains discomfort in the pelvic area: Pains pain or discomfort of the penis or testicles: Pains pain in the groin: Pains bone pain: Pains pain when urinating: Pains burning sensation when urinating: Pains dysuria: Pains burning feeling when urinate: Pains painful urination: Pains pain in the area between the scrotum and rectum: Pains painful orgasms: Pains painful ejaculations: Pains pain during sexual intercourse: Pains pain during intercourse: Pains pyuria: Urination flank pain: Pains over the kidneys pain: Pains pain felt near the kidneys: Pains tumor: Skin soreness: Catastasis morbidity: Catastasis painfulness: Catastasis sickliness: Catastasis morbidness: Catastasis delicacy: Catastasis itching: Skin unusual discharge from the genitals: Urination heavy bleeding from small cuts or dental work: Blood swollen lymph nodes: Tissues lymphadenitis: Tissues lymph nodes swelling: Tissues swollen lymph glands: Tissues enlarged lymph nodes: Tissues enlarged liver: Tissues swollen spleen: Tissues spleen swelling: Tissues enlarged spleen: Tissues swollen kidneys: Tissues swollen testicles: Tissues testicles swelling: Tissues swelling and/or lump in one or both of the testes: Tissues seizures: Catastasis pain, numbness, weakness or coldness in legs or arms: Catastasis leg pain: Catastasis sudden numbness or weakness in arms or legs: Catastasis fluttering in chest: Heart slow heartbeat: Heart bradycardia: Heart heart murmur: Heart pale gray or blue skin color: Skin cyanosis: Skin asphyxia: Skin bluishness: Skin cyanose: Skin gray-blue skin: Skin clammy bluish-colored skin: Skin ankles swelling: Skin easily becoming short of breath during exercise or activity: Catastasis easily tiring during exercise or activity: Catastasis built-up fluid in the heart or lungs: Heart bloating of the abdomen with fluid: Abdomen bloating: Abdomen abdominal bloating: Abdomen abdominal distention: Abdomen abdominal cramps and gas: Abdomen increase in the size of abdomen: Abdomen bloating after meals: Abdomen pericarditis, which affects the tissue surrounding the heart: Heart myocarditis, which affects the muscular middle layer of the walls of the heart: Heart myocardium: Heart endocarditis, which affects the inner membrane that separates the chambers and heart valves: Heart anemia: Catastasis indigestion: Stools skin rash: Skin itchy and blistering skin: Skin blisters: Skin hives: Skin mouth sores: Oral tooth pain: Oral tooth ache: Oral dental condition: Oral bone fracture: Pains stooped posture: Catastasis curved spine: Catastasis hunched: Catastasis foul-smelling or grayish stools that may be fatty or oily: Stools stunted growth: Catastasis reduced growth rate in human development: Catastasis delayed growth or sexual development in children: Catastasis growth retardation: Catastasis growth failure: Catastasis delayed puberty: Catastasis poor growth: Catastasis changes in dental enamel: Oral flatulence: Stools meteorism: Stools flatulency: Stools tympanites: Stools aerocolia: Stools tympania: Stools jaundice: Skin clay-coloured feces: Stools clay-colored stool: Stools pale-colored stool: Stools putty-colored stool: Stools pale bowel movements: Stools tenderness in the area of liver: Pains recurring respiratory infections: Breathing repeated lung infections: Breathing barrel-shaped chest: Catastasis milky nipple discharge: Sexual milky white discharge from nipples unrelated to breastfeeding: Sexual breast milk production: Sexual galactohhrea: Sexual spontaneous flow of milk from the breast: Sexual excess facial hair: Skin greasy hair: Skin oily skin: Skin acne: Skin small red or purplish acne: Skin breakouts on the shoulders and back: Skin more frequent acne: Skin gynecomastia: Tissues bad breath: Breathing cutaneous striae in the deltopectoral area: Skin increased body hair: Skin increased length and thickness in hair (on body parts other than the head): Skin skin eruptions: Skin drastic appetite shifts: Appetite appetite changes: Appetite extreme hunger or lessened/loss of appetite: Appetite overeating or undereating: Appetite disrupted sleep patterns: Catastasis needle stick marks in the buttocks, thighs, or deltoids: Skin increased muscle size: Muscles testicular atrophy: Sexual hyperactivity: Catastasis high blood pressure: Catastasis elevated blood pressure: Catastasis hypertension: Catastasis regurgitation: Abdomen heartburn: Abdomen pyrosis: Abdomen brash: Abdomen epigastric burning: Abdomen water brash: Abdomen sour taste in mouth: Abdomen esophageal reflux: Abdomen difficulty swallowing: Abdomen painful swallowing: Abdomen odynophagia: Abdomen pink or purple stretch marks (striae) on the skin of the abdomen, thighs, breasts and arms: Skin slow skin healing: Skin slow healing of cuts; insect bites and infections: Skin poor wound healing: Skin sores that are not heal: Skin palpitations: Heart enlarged clitoris: Sexual hallucinations: Cognitive problems paranoia: Cognitive problems red urine: Urination skin swelling: Skin decreased urine output: Urination restless legs syndrome: Cognitive problems painful menstruation: Pains kidney stones: Urination renal calculi: Urination excessive thirst: Catastasis fruity-scented breath: Breathing fruity odor to the breath: Breathing smell fruity breath: Breathing fruity breath odor: Breathing abdominal pain that radiates to back: Pains abdominal pain that feels worse after eating: Pains abdominal symptoms that occur within minutes after a meal: Pains social withdrawal: Cognitive problems lack of motivation or focus: Cognitive problems absence in desire: Cognitive problems lack of enthusiasm: Cognitive problems deficiency in desire: Cognitive problems inability to urinate: Urination increased hunger: Appetite increased appetite: Appetite tender breasts: Pregnancy increased urine output: Urination excretion of an excessive amount of diluted urine: Urination excessive urine production: Urination cramping: Pregnancy no signs of pregnancy: Pregnancy loss of pregnancy symptoms: Pregnancy frequent contractions - a tightening sensation in the abdomen: Pregnancy constant low dull backache: Pregnancy sensation of pelvic or lower abdominal pressure: Pregnancy mild abdominal cramps: Pregnancy watery vaginal discharge (water breaking): Pregnancy change in vaginal discharge: Pregnancy change in color: Pregnancy odor or amount of discharge from vagina: Pregnancy shoulder pain: Pains an urge to have a bowel movement: Stools shock: Catastasis temporary loss of vision: Eyes sudden vision loss: Eyes partial loss of vision: Eyes no symptoms: Catastasis facial pain: Pains swollen blue-colored skin under the eyes: Eyes decreased sense of smell or taste: Catastasis red to brownish-gray colored patches: Skin small, raised bumps, which may leak fluid and crust over when scratched: Skin raw, sensitive skin from scratching: Skin burns or redness around the mouth and lips: Poison breath that smells like chemicals, such as gasoline or paint thinner: Poison lips or fingernails turn blue or gray: Catastasis difficulty speaking: Catastasis pain in the calf muscles when walking: Pains claudication: Pains decreased pulses in the feet: Heart weight changes including unintended loss or gain: Catastasis unexplained weight gain or loss: Catastasis changes to existing moles: Skin weak hand grip: Muscles hand weakness: Muscles purple or violet colored upper eyelids: Eyes purple-red skin rash: Skin purple skin splotches: Skin difficulty raising arms over head: Catastasis swollen tips of the fingers or toes: Tissues pain in tips of the fingers or toes: Pains red patches of skin covered with silvery scales: Skin small scaling spots: Skin buttocks pain: Pains pulsating feeling near the navel: Catastasis cold foot: Catastasis black or blue painful toe: Catastasis cold fingers and toes: Catastasis sequence of color changes in skin in response to cold or stress: Skin numb, prickly feeling or stinging pain upon warming or relief of stress: Catastasis claudication: Pains legs&#39; and feet&#39;s (arms and hands) pain affects even when you are at rest: Pains pain that may come and go in legs and feet or arms and hands: Pains inflammation along a vein just below the skin&#39;s surface (due to a blood clot in the vein): Tissues painful open sores on fingers and toes: Skin ulcers on the fingers or toes: Skin veins protrude or bulge from under the skin and feel ropey: Skin sores around varicose veins: Skin skin ulcers around varicose veins: Skin ongoing irritation, swelling, and painful rashes on the legs: Skin legs often ache and feel heavy and itchy: Pains burning or itching sensation in the legs: Pains distention of surface veins: Skin skin that feels warm to the touch: Skin skin warmth: Skin tight fitting rings or shoes: Skin infections in the extremity: Skin drainage in swollen areas: Skin heaviness of the limb: Muscles less flexibility: Muscles movement issues in an arm or leg: Muscles pain in arms, neck, jaw, shoulder or back accompanying chest pain: Heart gradual loss of peripheral vision, usually in both eyes: Eyes tunnel vision in the advanced stages: Eyes sudden onset of visual disturbance, often in low light: Eyes halos around lights: Eyes prosthetic heart valve replacement: Heart fewer PMS symptoms: Pregnancy dark hair growth in man-like places, on the lips, chest, and chin: Skin excess facial and body hair in woman: Skin excess androgen in woman: Skin severe adolescent acne in woman: Skin male-pattern baldness in woman: Skin androgenic alopecia in woman: Skin low sperm count: Sexual pain, lump, or swelling in the testicles: Sexual pain or discomfort in a testicle or the scrotum: Sexual small, firm testes: Sexual vaginal dryness: Sexual hot flashes: Sexual loss of breast fullness: Sexual increased abdominal fat: Abdomen tingling or burning in fingertips, toes and lips: Pains paresthesias: Pains twitching or spasms of muscles around mouth: Muscles patchy hair loss: Skin thinning of eyebrows: Skin loss of armpit or pubic hair: Skin stress: Cognitive problems too much exercises: Catastasis too much physical activities: Catastasis excessive exercise: Catastasis rectal pain: Pains feeling of stool urgency: Stools urgent need bowel movements: Stools bowel movements urgency: Stools feeling of constantly needing to pass stools: Stools tenesmus: Stools intestine ulcers: Abdomen having a sense of impending danger, panic or doom: Cognitive problems fear of loss of control or death: Cognitive problems feeling apprehensive: Cognitive problems feeling of extreme fright: Cognitive problems fright: Cognitive problems scare: Cognitive problems feel panic: Cognitive problems panic: Cognitive problems panic attack: Cognitive problems fear: Cognitive problems disfiguring skin sores may occur on nose, cheeks and ears: Skin trembling: Cognitive problems shiver: Cognitive problems tremors: Cognitive problems uncontrolled movements: Cognitive problems vaginal itching: Sexual fatty skin deposits over parts of the hands, elbows, knees, ankles, and around the cornea of the eye: Skin xanthomas: Skin cholesterol deposits in the eyelids: Eyes areas of skin may get darker or lighter in color: Skin skin that is abnormally dark or light: Skin nodules under skin: Skin skin thickening, stiffness, and tightness of fingers, hands, and forearm: Skin small white lumps beneath the skin, sometimes oozing a white substance that looks like toothpaste: Skin sores (ulcers) on the fingertips or toes: Skin tight and mask-like skin on the face: Skin wrist pain: Pains fingers pain: Pains problems controlling stools: Stools dry mouth: Oral mouth feels like it is full of cotton: Oral swollen salivary glands: Oral osteomalacia: Tissues malacosteon: Tissues soft bones: Tissues softening of the bones: Tissues rickets: Catastasis skeletal deformities: Tissues skeletal limb abnormalities: Tissues bowed legs: Tissues abnormally curved spine: Tissues thickened wrists and ankles: Tissues breastbone projection: Tissues abnormal bone size or shape and other skeletal irregularities: Tissues pain in the spine: Pains red, flat facial rash over the bridge of nose: Skin facial rash (&#34;butterfly rash&#34;): Skin brittle hair: Skin malaise: Catastasis poor health: Catastasis general sense of not feeling well: Catastasis feel unwell: Catastasis uneasiness: Catastasis general malaise: Catastasis vague feeling of illness: Catastasis feeling sick: Catastasis frequent complaints of illness with no apparent cause: Catastasis gangrene skin ranging from pale to blue, purple, black, bronze or red: Skin foul-smelling discharge leaking from a sore: Skin frostbite: Skin temperature regulation abnormalities: Catastasis temperature-regulating system problems: Catastasis dizziness on standing: Catastasis inability to have a bowel movement: Stools basal body temperature stays high: Pregnancy claw-like hands: Catastasis protrusion of the lower jaw so the lower teeth extend beyond the upper teeth: Oral small skin outgrowths: Skin skin tags: Skin snoring: Breathing sleep apnea: Breathing frequent brief interruptions in nighttime breathing: Breathing breathing intermittently stops during sleep: Breathing enlarged liver, heart, kidneys, spleen and other organs: Tissues increased sensitivity to the effects of alcohol: Pains pain in lymph nodes after drinking alcohol: Pains failure to release milk (in women): Sexual protruding tongue: Catastasis skin lesions on the back: Skin skin lesions on upper arms: Skin progressive loss of hearing: Catastasis carpal tunnel syndrome: Pains entrapment median neuropathy: Pains fullness: Catastasis general epigastric discomfort: Pains pain in upper middle abdomen: Pains left arm pain: Heart nail weakness: Tissues nail loss: Tissues blood underneath the nail: Blood fibro fog: Cognitive problems loss of mental clarity and problems with memory: Cognitive problems brain fog: Cognitive problems lapses in memory; word mix-ups and difficulty concentrating: Cognitive problems difficulty thinking clearly: Cognitive problems cravings for carbohydrate and chocolate: Appetite delayed reactions to physical exertion or stressful events: Cognitive problems morning stiffness: Pains diffuse swelling: Pains interstitial edema: Pains ringing ears: Ears earaches: Ears itchy ears: Ears pain in ears: Ears teeth grinding: Oral directional disorientation: Cognitive problems sensitivity to odors: Catastasis sensitivity to noise: Catastasis difficulty lifting the front part of foot and toes: Muscles tongue cramps and twitching: Muscles bullseye rash pattern: Skin chest pain under the rib cage: Pains lumps of tissue under the skin on the chest: Skin lumps of tissue in the abdomen: Skin electric-shock sensations that occur with certain head movements: Pains switch between constipation and diarrhea or mostly have one or the other: Stools diarrhea or constipation; sometimes even alternating bouts of constipation and diarrhea: Stools mucus in the stool: Stools gray hair: Skin go gray (hair): Skin loss of sensation in one or more areas of the body: Catastasis loss of fine motor skills, such as picking up objects: Muscles loss of muscle coordination: Muscles bladder and prostate gland can become inflamed: Urination thoughts of self-harm: Cognitive problems suicide: Cognitive problems red, painless skin spots on the palms and soles: Skin red, painful nodes in the pads of the fingers and toes: Skin Osler&#39;s nodes: Skin lump in neck: Pains ear infection: Ears cysts in the ear: Ears fluid that oozes from the ear: Ears pain in throat: Pains pain in neck: Pains stiff neck: Pains chalky stool: Stools bleeding from enlarged veins (varices) in the digestive tract: Blood variceal bleeding: Blood abdominal tenderness: Abdomen problems controlling urination: Urination urine leakage: Urination urine incontinence: Urination loss of urination control: Urination pain behind the eyes: Eyes cough may bring up mucus: Breathing coughing up yellow phlegm: Breathing cough that produces thick spit (sputum) and mucus: Breathing difficulty breathing when lying down: Breathing feel air hunger or drowning: Breathing feeling wakes from sleep and causes to sit up and try to catch breath: Breathing paroxysmal nocturnal dyspnea: Breathing grunting, gurgling, or wheezing sounds with breathing: Breathing weak, rapid, and thready pulse: Heart S3 gallop: Heart exophthalmos: Eyes visible pulsation of eyes: Eyes distention of neck veins: Skin sharp, piercing chest pain over the center or left side of your chest: Pains intestinal blockage: Abdomen bluish discoloration of the fingers: Catastasis afraid of gaining weight: Cognitive problems changed ability to feel pain, touch, pressure, or different temperatures: Catastasis difficulty writing or reading: Cognitive problems numbness or tingling on one side of the body: Muscles back pain between shoulder blades: Pains pain in right shoulder: Pains anal itching: Stools bright red blood on toilet tissue, stool, or in the toilet bowl: Stools painless bleeding during bowel movements: Stools lump near anus, which may be sensitive or painful: Stools swelling around your anus: Stools leakage of feces: Stools pain during bowel movements: Pains pain is often sudden, severe and located in the lower left side of the abdomen: Pains pain in upper arms: Pains stiffness in affected areas, particularly in the morning or after being inactive for a long time, such as a long car ride: Pains scalp tenderness: Pains scalp sensitivity: Pains scalp pain: Pains tenderness of the scalp: Pains pain in the jaw when repetitively chewing: Pains slowed movement: Catastasis bradykinesia: Catastasis decreased ability to perform unconscious movements: blinking, smiling or swinging arms when walking: Catastasis paroxysms (fits) of many, rapid coughs followed by a high-pitched &#34;whoop&#34;: Breathing paroxysms of intense coughing lasting up to several minutes occasionally followed by a loud whoop: Breathing painful and prolonged erection: Sexual small size at birth: Catastasis low birth weight: Catastasis blisters or ulcers on genitals: Skin sudden, sharp chest pain on the same side as the affected lung: Breathing chest pain doesn&#39;t worsen when breathe in and out: Breathing pathognomonic enanthem: Tissues wide or web-like neck: Turner Syndrome receding or small lower jaw: Turner Syndrome high, narrow roof of the mouth (palate): Turner Syndrome low-set ears: Turner Syndrome low hairline at the back of the head: Turner Syndrome drooping eyelids: Turner Syndrome broad chest with widely spaced nipples: Turner Syndrome short fingers and toes: Turner Syndrome arms that turn outward at the elbows (cubitus valgus): Turner Syndrome fingernails turned upward: Turner Syndrome inability to conceive a child without fertility treatment: Turner Syndrome short stature: Catastasis difficulty in social situations, such as problems understanding other people&#39;s emotions or reactions: Cognitive problems redness, throbbing and burning pain in the hands and feet: Pains impaired growth of body hair: Sexual decrease in beard and body hair growth: Sexual decrease in muscle mass: Muscles impaired growth of the penis and testicles: Sexual sudden collection of fluid in the scrotum: Sexual infertility: Sexual tongue biting: Tissues drooling and froth in mouth after night sleep: Catastasis person forgets what has happened at night sleep: Catastasis shaking of body or particular limb in sleep: Catastasis teeth clenching at night sleep: Catastasis muscle spasms resulting in jerks and twitches at night sleep: Muscles increase in daytime drowsiness: Catastasis wake up with headache after night sleep: Catastasis headache when getting up: Catastasis unwanted erection lasting more than four hours: Sexual rigid penile shaft, but usually soft tip of penis (glans): Sexual erection not related to sexual stimulation or persistent after stimulation: Sexual loose teeth when it would not expected or swollen gums: Oral .",
            "url": "https://vivianknee.github.io/FastPages/week7/rapidapi",
            "relUrl": "/week7/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Javascript and HTML",
            "content": "| JS Table | Using the JS Kernel | API | . Using HTML fragments and Javascript to build a table. . Click Me! .",
            "url": "https://vivianknee.github.io/FastPages/frontend/jsTable",
            "relUrl": "/frontend/jsTable",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Using the Javascript Kernel",
            "content": "| JS Table | Using the JS Kernel | API | . . console.log output . &quot;Good Luck!&quot; is a parameter and console.log is a function the outputs the parameter into the console. . console.log(&quot;Good luck!&quot;); . Good luck! . console.log output showing use of variable . This is a sequence of code as there are two lines. msg is defined as a variable for the string which is then outputted to the console using the function console.log . var msg = &quot;Good Luck!&quot;; console.log(msg); . Good Luck! . console.log output showing use of a function . The function logIt(output) is defined within the {}. logIt(msg) is the line that calls back to the function and activates it. . function logIt(output) { console.log(output); } logIt(msg); . Good Luck! . Showing reuse of a function . I am now reusing the function in the previous cell blocks. This process is referred to as procedural abstraction . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;My name is Vivian!&quot;); logIt(&quot;Born in &quot; + 2006) . Reuse of logIT My name is Vivian! Born in 2006 . Dynamic or Loosely typed language (string, number) . Here, I define a new function to show how Javascript doesn&#39;t require me to specify what type of information will be stored in a variable in advance. Instead, the variable type is determined at runtime. . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); //&quot;typeof&quot; keyword returns the type. } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;Hello, I am graduating in&quot;); // String logItType(2024); // Number logItType([1, 2]); // Object is generic for this Array, which similar to Python List logItType(&quot;more years till I get my permit ahah&quot;) . Looking at dynamic nature of types in JavaScript string ; Hello, I am graduating in number ; 2024 object ; [ 1, 2 ] string ; more years till I get my permit ahah . Build a Person Function/Class object and JSON . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . Build a Classroom Array/List of Persons and JSON . Building an Array, &quot;var students&quot; is an array of many students | Building a Classroom, this show forEach iteration through an array and .push adding to an array | . // define a student Array of Person(s) var students = [ new Person(&quot;Vivian&quot;, &quot;vivanknee&quot;, 2024), new Person(&quot;Emma&quot;, &quot;e-shen&quot;, 2024), new Person(&quot;Amay&quot;, &quot;amayadvani&quot;, 2024), new Person(&quot;Sarah&quot;, &quot;sarahliu&quot;, 2024), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Vivian&#39;, ghID: &#39;vivanknee&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Emma&#39;, ghID: &#39;e-shen&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Amay&#39;, ghID: &#39;amayadvani&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Sarah&#39;, ghID: &#39;sarahliu&#39;, classOf: 2024, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . IJavaScript and Table formatting using toHTML method . This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter:$$.html which renders output similarly to a real website.&gt; &gt;JavaScript in the _toHTML method is broken into three parts... . Style part is building CSS inline formatting | Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. | Return part creates the HTML fragment for rendering | . The last line:$$.html is IJavaScript HTML interpreter and by passing the parameter of the _toHTML method it obtains HTML to render . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid blue;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Name&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;strong&gt;&quot; + &quot;Role&quot; + &quot;&lt;/strong&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Vivian | vivanknee | 2024 | Student | Emma | e-shen | 2024 | Student | Amay | amayadvani | 2024 | Student | Sarah | sarahliu | 2024 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://vivianknee.github.io/FastPages/week5/jsKernel",
            "relUrl": "/week5/jsKernel",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Big Idea Project",
            "content": ". Create Task Plan .",
            "url": "https://vivianknee.github.io/FastPages/markdown/week5/2022/09/21/bigidea.html",
            "relUrl": "/markdown/week5/2022/09/21/bigidea.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Personal CSP Journey",
            "content": "My Personal CSP Journey . The very first coding class I took was in middle school. It was a class provided by the school known as “exploratory”. This basically meant that for one trimester of the year, teacher would teach the class on the basics of coding. AKA Scratch. I had to dig pretty far back to find some old projects. Here is the result of my search: . . Pretty revolutionary. . My next experience in computer science was when I joined Cyberpatriot. Cyberpatriot is essentially a competition where thousands of teams compete to secure different operating systems. Along the way, I learned how to configure different security settings on a computer, how to use powershell and cmd, and even a little bit of coding. Here’s a photo of my first year doing CyberPatriot, dating all the way back to 2018 when I was a itty bitty 7th grader. . . Now, fast forward to 2022. Here I am taking AP Computer Science Principles with very little knowledge on coding. Thankfully this class forces me to take the time to sit down and understand everything. Since its also a fast paced class, I have learned how to use GitHub, how to code with python, bash, javascript, etc, and how to collaborate all within the span of a couple weeks. . Psychology Takeaways . Vivian: I learned that things like your salary or your job aren’t what necessarily make you happy, rather data shows that people who spend more time engaging in social activities feel more happy overall. This goes along with being time affluent and avoiding burnout. | Amay: A student’s life is mostly centered around learning. A student will need to show evidence of their learning in almost every lesson they attend. Concentrating on their work and employing effective study techniques are two approaches to assist students in learning. We must value our time, as Laurie Santos discussed in her address. If we value our time, we have more of it and may use it to enhance our mental health. There are various ways we may make the most of our time. For instance, we may efficiently spend our time by concentrating on our task, doing it quickly, and avoiding rushing it at the last minute. In accordance with Laurie Santos’s discourse, we should also exercise self-control and develop healthy routines.When you have the opportunity to work hard and have a break from your responsibilities, you should do so. These actions would improve your academic performance as well as your general wellbeing since they would reduce the amount of homework you have to complete at home. | Sarah: | Emma: My biggest takeaway is to focus on what I can control. If I were to not win a lottery, I should realize that it was up to chance and there was nothing I could do to make me win, I shouldn’t spend any negative emotions on a situation I have no control over. However, when it comes to pursuing happiness, I do need to take effort to do things that bring me joy and surround myself with people I love. In this way, we won’t tie our self worth to our salary, where we live, etc. because we can be content with our life in any circumstance | .",
            "url": "https://vivianknee.github.io/FastPages/markdown/week4/2022/09/16/personalcspjourney.html",
            "relUrl": "/markdown/week4/2022/09/16/personalcspjourney.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Running a Website Locally",
            "content": "Server Address: /http://localhost:4000/FastPages/ . My Process . I encountered a lot of errors during this process: . I got the error telling me that I didn&#39;t have wsl 2 installed. I had to do the whole process of installing it, then changing settings in docker for the make server command to finally work | I got an error saying that I didn&#39;t have the permission to run certain volumes so I had to run make server with &quot;sudo&quot; in front of it to bypass permissions | I got an error where when I opened the link to my website, it told me that the link didn&#39;t exist | .",
            "url": "https://vivianknee.github.io/FastPages/markdown/week4/2022/09/16/docker.html",
            "relUrl": "/markdown/week4/2022/09/16/docker.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Blogging my AppLab Quiz",
            "content": "Press this link to play my quiz! . Design &amp; Planning . First I decided on the content of my quiz: this theme is inspired by the popular game “Are you smarter than a 5th grader?” It consists of simple questions testing the range of your knowledge. . The next thing I decided to do was design the GUI/looks of my game. I decided on 5 questions, each question would have 4 answers and each answer would have an image to go along with it. This was my initial draft of the game looks. . . This is what my design looked like when it was finalized . . I also made a screen for incorrect answers and completing the entire quiz. When the user clicks a wrong answer, the code will take them to the incorrect screen and let them go to the beginning of the quiz. . 1. Program Purpose and Function . Purpose: The purpose of my program is to create a quiz that tests the user on their knowledge. I code the whole program using javascript. The code consists of user input as well as answers that can be selected. These answers are either correct or incorrect and depending on the answer selected or input given, the code will take the user to the next question or the incorrect screen. . Function: . Here is an example of my code for selectable answers. I used the blocks on event and set screen to change the screen off my game to the next question depending on the answer chosen. | . . Here is an example of my code for questions that take user input. | . . 2. Data Abstraction . I used a variable named “attempts” to store data. I set it equal to 0 at the beginning of my code to keep record of the users # of attempts at the end of the quiz. . 3. Managing Complexity . TBD . 4. Procedural Abstraction . I created a function called showResult. I called back to this function for every question I had demonstrating how I utilized the function for my quiz. . 5. Algorithm Implementation . In my code, I created a function/procedure that tells the user the result of their answer by either showing a check sign or a X sign. To do this, I first made a function called showResult. The function has 4 parameters: “result”, “nextScreen”, “image_y”, and “image_n”. The result parameter essentially states whether the correct answer was selected or not; if the result is “yes” then the function proceeds to show the element image_y and move on to the “nextScreen”. Otherwise, if result is equal to anything but “yes”, it will show the element image_n and add 1 to the attempts score. I also included a setTimeout block which hides both images initially, but when the images do show, the block makes them show for 1000ms or 1 s. Here is the actual code: . . 6. Testing/Debugging . I used trial and error to test my function. If the answer was correct, then the correct image would show. If the answer was incorrect, then the incorrect image would show. This confirmed that my function was working. In addition, if there was an error, the console log would tell me which line the error was at and I would fix it. . Challenges . One problem that I ran into was getting my code to output the final number of attempts the user needed to complete the quiz. At first, I wasn’t sure how to print strings as well as variables in one block. I also wasn’t sure how to change the text every time depending on different user performance. To solve this problem, I used multiple addition operator blocks to put multiple variables into one block. I set each variable to either a string or my attempts variable. My final code was this: . . Another problem I ran into was some error in my code that was not letting me output what I wanted to. The error that I was getting was that no matter how many incorrect attempts I made during testing, the final text always said 0. I then identified that the problem lied in the block “var = attempts + 1”. Somehow this block was not adding anything to the number of attempts causing it to always remain at 0. . But why? . I started searching google for the error as well as javascript syntax. The reason why my previous code wasn’t working was due to global variable shadowing which means that one variable shares a name with another, resulting in confusion. Since I defined the variable “attempts” as 0 in the beginning but then used the same name to add 1 to the variable, my initial variable shadowed the new one causing the variable to be lost when the function returned. After searching some more, I found that another method to add to a score variable was to use the syntax “++” in front of the variable. This is what my code looked like after the changes. . . Takeaways: . Here are some things I need to learn/apply in the future: . Learn how to effectively use lists/other collection types for quizzes or other create task ideas. Make use of lists to increase the efficiency of the code. (Data Abstraction and Managing Complexity) | An algorithm is a procedure within my function but procedural abstraction is calling back to the function and utilizing it in other sections of code | learn how to use iteration, sequencing, and selection to create an algorithm | use a list/dictionary for my answer and question pair values. Then use a for loop to loop through the dictionary using an index and confirm whether the User’s input is correct or incorrect. | .",
            "url": "https://vivianknee.github.io/FastPages/markdown/week3/2022/09/07/AppLabquiz.html",
            "relUrl": "/markdown/week3/2022/09/07/AppLabquiz.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Lists and Dictionaries",
            "content": "Variables . Variables all have a type:String, Integer, Float, List and Dictionary are some key types. . name = &quot;Vivian Ni&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer age = 16 print(&quot;age&quot;, age, type(age)) print() # variable of type float score = 3.00 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;, &quot;bash&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[3]&quot;, langs[3], type(langs[3])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name Vivian Ni &lt;class &#39;str&#39;&gt; age 16 &lt;class &#39;int&#39;&gt; score 3.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;bash&#39;] &lt;class &#39;list&#39;&gt; length 4 - langs[3] bash &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;Vivian Ni&#39;, &#39;age&#39;: 16, &#39;score&#39;: 3.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;, &#39;bash&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] Vivian Ni &lt;class &#39;str&#39;&gt; . List of Dictionaries . this code appends the dictionaries to the list, the list being infoDb. As you can see, 2 dictionaries have been appended. . infoDb = [] # Append to List a Dictionary of key/values infoDb.append({ &quot;FirstName&quot;: &quot;Vivian&quot;, &quot;LastName&quot;: &quot;Ni&quot;, &quot;DOB&quot;: &quot;May 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Fav_Movie&quot;: &quot;Inception&quot;, &quot;Email&quot;: &quot;vivianni452@gmail.com&quot;, &quot;Best_Treats&quot;: [&quot;cookies&quot;, &quot;ice cream&quot;, &quot;cake&quot;, &quot;brownies&quot;] }) infoDb.append({ &quot;FirstName&quot;: &quot;Emma&quot;, &quot;LastName&quot;: &quot;Shen&quot;, &quot;DOB&quot;: &quot;July 29&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;aimashen.2017@gmail.com&quot;, &quot;Fav_Movie&quot;: &quot;MIB&quot;, &quot;Best_Treats&quot;: [&quot;smoothies&quot;, &quot;ice cream&quot;] }) # Print the data structure print(infoDb) . [{&#39;FirstName&#39;: &#39;Vivian&#39;, &#39;LastName&#39;: &#39;Ni&#39;, &#39;DOB&#39;: &#39;May 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Fav_Movie&#39;: &#39;Inception&#39;, &#39;Email&#39;: &#39;vivianni452@gmail.com&#39;, &#39;Best_Treats&#39;: [&#39;cookies&#39;, &#39;ice cream&#39;, &#39;cake&#39;, &#39;brownies&#39;]}, {&#39;FirstName&#39;: &#39;Emma&#39;, &#39;LastName&#39;: &#39;Shen&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;aimashen.2017@gmail.com&#39;, &#39;Fav_Movie&#39;: &#39;MIB&#39;, &#39;Best_Treats&#39;: [&#39;smoothies&#39;, &#39;ice cream&#39;]}] . For Loop for output of List/Dictionary . takes the dictionaries in the list and prints them . def for_loop(): print(&quot;For loop output n&quot;) for record in infoDb: print(record) for_loop() . For loop output {&#39;FirstName&#39;: &#39;Vivian&#39;, &#39;LastName&#39;: &#39;Ni&#39;, &#39;DOB&#39;: &#39;May 13&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Fav_Movie&#39;: &#39;Inception&#39;, &#39;Email&#39;: &#39;vivianni452@gmail.com&#39;, &#39;Best_Treats&#39;: [&#39;cookies&#39;, &#39;ice cream&#39;, &#39;cake&#39;, &#39;brownies&#39;]} {&#39;FirstName&#39;: &#39;Emma&#39;, &#39;LastName&#39;: &#39;Shen&#39;, &#39;DOB&#39;: &#39;July 29&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;aimashen.2017@gmail.com&#39;, &#39;Fav_Movie&#39;: &#39;MIB&#39;, &#39;Best_Treats&#39;: [&#39;smoothies&#39;, &#39;ice cream&#39;]} . Alternate Methods of Iteration . Formatted Output of Dictionaries: Using For Loop with an Index . this code uses a for loop with the range and index syntax to print the dictionaries. It also does so in reverse order . Formatted output of Dictionary Managing data in Lists and Dictionaries is for the convenience of passing the data across the internet or preparing it to be stored into a database. Also, it is a great way to exchange data inside of our own programs. . Next, we will take the stored data and output it within our notebook. There are multiple steps to this process. . Preparing a function to format the data, the print_data() function receives a parameter called &quot;d_rec&quot; short for dictionary record. It then references different keys within [] square brackets. Preparing a function to iterate through the list, the for_loop() function uses an enhanced for loop that pull record by record out of InfoDb until the list is empty. Each time through the loop it call print_data(record), which passes the dictionary record to that function. Finally, you need to activate your function with the call to the defined function for_loop(). Functions are defined, not activated until they are called. By placing for_loop() at the left margin the function is activated. . def print_data(d_rec): #formatting print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Favorite Movie&quot;, d_rec[&quot;Fav_Movie&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print(&quot; t&quot;, &quot;Best Treats: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Best_Treats&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop with index output n&quot;) length = len(infoDb) #figures out the length of the list infoDb (which is 2 because there are 2 dictionaries in the list) ran = range(length) #defines ran as the range of the length. (this is 0 and 1 because the length is 2) for index in reversed(ran): #index is 0 and 1 so it takes the indexes of infoDb. 0 would be the first dictionary and 1 would be the second. reversed prints them as 1 0 instead of 0 1 print_data(infoDb[index]) for_loop() . For loop with index output Emma Shen Residence: San Diego Birth Day: July 29 Favorite Movie MIB Email: aimashen.2017@gmail.com Best Treats: smoothies, ice cream Vivian Ni Residence: San Diego Birth Day: May 13 Favorite Movie Inception Email: vivianni452@gmail.com Best Treats: cookies, ice cream, cake, brownies . While Loop . contains a while loop, &quot;while i &lt; len(InfoDb):&quot;. This counts through the elements in the list start at zero, and passes the record to print_data() . def while_loop(): print(&quot;While loop output n&quot;) i = 0 while i &lt; len(infoDb): #length is 2 so while i is less than, it will keep printing record = infoDb[i] #defines the record as the index of the list print_data(record) #prints that index using the formatted print function i += 1 #adds 1 and returns to the top till i is no longer &lt;2 return while_loop() . While loop output Vivian Ni Residence: San Diego Birth Day: May 13 Favorite Movie Inception Email: vivianni452@gmail.com Best Treats: cookies, ice cream, cake, brownies Emma Shen Residence: San Diego Birth Day: July 29 Favorite Movie MIB Email: aimashen.2017@gmail.com Best Treats: smoothies, ice cream . Recursion . this method calls itself repeatedly until the &quot;if i &lt; len(infoDb)&quot; is no longer true. the recursive_loop(0) is set at the start and it keeps activating a new call as recursive_loop(i + 1) . def recursive_loop(i): if i &lt; len(infoDb): #ensures the code stops after it recurses through all the indexes since length determines amount of indexes record = infoDb[i] #defines record as the index of infoDb print_data(record) #prints using the formatted print function recursive_loop(i + 1) #adds 1 to the original index and returns until i is no longer &lt;2 return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output Vivian Ni Residence: San Diego Birth Day: May 13 Favorite Movie Inception Email: vivianni452@gmail.com Best Treats: cookies, ice cream, cake, brownies Emma Shen Residence: San Diego Birth Day: July 29 Favorite Movie MIB Email: aimashen.2017@gmail.com Best Treats: smoothies, ice cream . Using Input to Add/Search/Delete Dictionaries . from asyncio.windows_events import NULL infoDb = [] infoDb.append({ &quot;FirstName&quot;: &quot;Vivian&quot;, &quot;LastName&quot;: &quot;Ni&quot;, &quot;DOB&quot;: &quot;May 13&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Fav_Movie&quot;: &quot;Inception&quot;, &quot;Email&quot;: &quot;vivianni452@gmail.com&quot;, }) infoDb.append({ &quot;FirstName&quot;: &quot;Hanli&quot;, &quot;LastName&quot;: &quot;Ni&quot;, &quot;DOB&quot;: &quot;Jan 11&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;hanlini@gmail.com&quot;, &quot;Fav_Movie&quot;: &quot;Interstellar&quot;, }) def print_data2(d_rec): #formatting print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Favorite Movie:&quot;, d_rec[&quot;Fav_Movie&quot;]) print(&quot; t&quot;, &quot;Email:&quot;, d_rec[&quot;Email&quot;]) print() def data_entry(): #defining the function that asks for user input Firstname = input(&quot;What is your firstname?&quot;) Lastname = input(&quot;What is your lastname&quot;) DOB = input(&quot;When is your birthday&quot;) Email = input(&quot;What is your Email&quot;) Movie = input(&quot;What is your favorite movie?&quot;) Residence = input(&quot;Where do you live?&quot;) infoDb.append({ #appends the user input to the dictionary &quot;FirstName&quot;: Firstname, &quot;LastName&quot;: Lastname, &quot;DOB&quot;: DOB, &quot;Email&quot;: Email, &quot;Residence&quot;: Residence, &quot;Fav_Movie&quot;: Movie, }) def search_data(firstname): for record in infoDb: if record[&quot;FirstName&quot;] == firstname: #compares the already existing name to the name inputted with the firstname variable return record return NULL def data_delete(firstname): record = search_data(firstname) #defines record as the name inputted with the search function if (record != NULL): #if the record doesn&#39;t equal null (does it exist?) then the next line removes it infoDb.remove(record) print(firstname, &quot;has been deleted!&quot;) else: print(&quot;Record not found!&quot;) def main(): Continue = True #defining continue as true while Continue: lol = input(&quot;What would you like to do (add/search/delete, type no if you want to exit)?&quot;) if lol == &quot;no&quot;: print(&quot;Come back again!&quot;) Continue = False elif lol == &quot;add&quot;: data_entry() elif lol == &quot;search&quot;: firstname = input(&quot;Who do you want to search (firstname)?&quot;) record = search_data(firstname) #defines record as the input &quot;name&quot; and runs it through the search function print_data2(record) elif lol == &quot;delete&quot;: firstname = input(&quot;Who do you want to delete(firstname)&quot;) data_delete(firstname) else: print(&quot;Invalid input. Please try again&quot;) length = len(infoDb) #defines length as the number of records print(&quot;Total Number of Records: &quot;, length) for record in infoDb: print_data2(record) main() . Hanli is deleted! Come back again! Total Number of Records: 2 Vivian Ni Residence: San Diego Birth Day: May 13 Favorite Movie Inception Email: vivianni452@gmail.com Emma Shen Residence: San Diego Birth Day: July Favorite Movie Not sure Email: aimashen.2017@gmail.com . Quiz that stores in a List of Dictionaries . questions = 5 correct = 0 print(&quot;Take this fun quiz on food!&quot;) def question_and_answer(prompt, answer): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) if answer == msg.lower(): print(&quot;Correct!&quot;) global correct correct += 1 else: print (&quot;Incorrect!&quot;) return msg Q1 = question_and_answer(&quot;Which famous soft drink was invented in 1892?? t Coca cola t pepsi t rootbeer&quot;, &quot;coca cola&quot;) Q2 = question_and_answer(&quot;What was the first food eaten in space? t applesauce t icecream t mashed potatoes&quot;, &quot;applesauce&quot;) Q3 = question_and_answer(&quot;Where were French fries invented? t France t America t Belgium&quot;, &quot;Belgium&quot;) Q4 = question_and_answer(&quot;What is the USA’s favorite flavor of ice cream? t chocolate t vanilla t strawberry&quot;, &quot;vanilla&quot;) Q5 = question_and_answer(&quot;What is the most popular pizza topping in the USA? t pepperoni t sausage t olives&quot;, &quot;pepperoni&quot;) print(f&#39;You scored {correct} /5 correct answers!&#39;) Quiz = { &quot;Question 1&quot;: Q1, &quot;Question 2&quot;: Q2, &quot;Question 3&quot;: Q3, &quot;Question 4&quot;: Q4, &quot;Question 5&quot;: Q5 } print(&quot;Here is a record of your quiz answers:&quot;,Quiz) . Take this fun quiz on food! Question: Which famous soft drink was invented in 1892?? Coca cola pepsi rootbeer Answer: coca cola Correct! Question: What was the first food eaten in space? applesauce icecream mashed potatoes Answer: applesauce Correct! Question: Where were French fries invented? France America Belgium Answer: belgium Incorrect! Question: What is the USA’s favorite flavor of ice cream? chocolate vanilla strawberry Answer: vanilla Correct! Question: What is the most popular pizza topping in the USA? pepperoni sausage olives Answer: pepperoni Correct! You scored 4 /5 correct answers! Here is a record of your quiz answers: {&#39;Question 1&#39;: &#39;coca cola&#39;, &#39;Question 2&#39;: &#39;applesauce&#39;, &#39;Question 3&#39;: &#39;belgium&#39;, &#39;Question 4&#39;: &#39;vanilla&#39;, &#39;Question 5&#39;: &#39;pepperoni&#39;} .",
            "url": "https://vivianknee.github.io/FastPages/jupyter/week2/2022/08/30/lists.html",
            "relUrl": "/jupyter/week2/2022/08/30/lists.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "School Work",
            "content": "Trimester 1 Classes . . Per 1: AP Calculus BC . . Topics Covered: Tri one is all review from calculus AB . Limits review | Using a creative one to solve for limits | Definition of a derivative | Continuity proof | Intermediate Value Theorem | . Per 2: AP English Language . . Topics Covered . We learned how to write a rhetorical precis which is a short essay analyzing rhetorical devices an author uses to get their message across | We learned about two different methods for writing a thesis: device driven or idea driven | . Taking the FRQ portion of the AP exam . Read the prompt. Annotate the rhetorical situation. This includes context, audience, and a description of the writer | Read the passage. Annotate the rhetorical devices, tone, and purpose of the essay | Write essay. (Thesis + 2 or 3 body paragraphs. Go back and add an introduction after finishing the other parts first) | Per 4: AP Chinese . . Topics Covered . Chinese Holidays including the lunar festival and spring festival | Covering tradition including food, clothing, and famous historical locations because culture is an important aspect of the AP exam | . Per 5: AP Physics . . Unit 1: Introduction and Measurements . Sig Figs A sig fig is one that is reliably known | A 0 after a decimal point but before digits that are 1-9 are insignificant ex: 0.09 has 1 sigfig | A 0 after a digit 1-9 and a decimal are significant ex: 0.90 has 2 sigfigs | A 0 at the end of a whole number with no decimal point is insignificant ex: 90 has 1 sigfig | A 0 in between digits 1-9 is significant ex: 909 has 3 sigfigs | . | Motion in One Dimension Kinematics: describes motion while ignoring the agents that caused the motion | Position: defined in terms of a frame of reference(usually the x or y axis) | Displacement: change in position during some time interval. It is solved with the equation Δx=xf-xi | Vector: quantities that need both magnitude(size or numerical value) and direction(positive or negative) to describe them | Scalar: quantities that are described by magnitude only (time, mass, speed) | . | Dimensional Analysis | .",
            "url": "https://vivianknee.github.io/FastPages/markdown/noncsp/week1/2022/08/28/school-classwork.html",
            "relUrl": "/markdown/noncsp/week1/2022/08/28/school-classwork.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Python Quiz",
            "content": "Using the Python command: print . msg = &quot;This took a lot of unnecessary sweat, blood, and tears to set up&quot; print(msg) . This took a lot of unnecessary sweat, blood, and tears to set up . Python Quiz . This code ask questions and provide answers. . import getpass, sys def question_with_response(prompt): #defines question_with_response print(&quot;Question: &quot; + prompt) #prints the question to the user msg = input() #takes the user&#39;s input return msg #returns the user&#39;s input as a printed answer def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) questions = 8 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) #str(questions) turns the number 8 that is = to questions into a string that can be printed question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What command is used to include other functions that were previously developed?&quot;) #asks the question in terminal if rsp == &quot;import&quot;: #verifies the answer by comparing user response to answer print(rsp + &quot; is correct!&quot;) #prints &quot;is correct&quot; if the rsp was correct correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What command is used to evaluate correct or incorrect response in this example?&quot;) if rsp == &quot;if&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;) if rsp == &quot;expression&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Two or more lines of code is known as a &#39;_______&#39;?&quot;) if rsp == &quot;sequence&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is it called when one groups a sequence of commands that are used repeatesdly?&quot;) if rsp == &quot;procedural abstraction&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What key word in python defines a function by defining a group of commands but not intitially running them?&quot;) if rsp == &quot;def&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What statement must you use to place variables that are defined as numbers into strings?&quot;) if rsp == &quot;str()&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What term is used to refer to the paramater which is a message output to the user to describe the input requested?&quot;) if rsp == &quot;prompt&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, vivian running /home/vivian/anaconda3/bin/python You will be asked 8 questions. Question: Are you ready to take a test? Answer: yes Question: What command is used to include other functions that were previously developed? import is correct! Question: What command is used to evaluate correct or incorrect response in this example? if is correct! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct! Question: Two or more lines of code is known as a &#39;_______&#39;? sequence is correct! Question: What is it called when one groups a sequence of commands that are used repeatesdly? procedural abstraction is correct! Question: What key word in python defines a function by defining a group of commands but not intitially running them? def is correct! Question: What statement must you use to place variables that are defined as numbers into strings? str() is correct! Question: What term is used to refer to the paramater which is a message output to the user to describe the input requested? prompt is correct! vivian you scored 8/8 .",
            "url": "https://vivianknee.github.io/FastPages/jupyter/week1/2022/08/28/python.html",
            "relUrl": "/jupyter/week1/2022/08/28/python.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "My Artwork",
            "content": "My Artwork . . Welcome to my art page! Some of the mediums I enjoy using include acrylic, watercolor, colorpencil, and digital. . Acrylic . . | | | | | | Colorpencil . . | | | | Digital . . | | | Watercolor . . | . .",
            "url": "https://vivianknee.github.io/FastPages/markdown/noncsp/week1/2022/08/24/My-Art.html",
            "relUrl": "/markdown/noncsp/week1/2022/08/24/My-Art.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Tool Check",
            "content": "python . echo Python Check test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Python Check python3 /home/vivian/.local/share/jupyter/kernels/python3 . python --version python2 --version . Python 3.9.12 Python 2.7.18 . jupyter . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /home/vivian/.local/share/jupyter/kernels/bash java /home/vivian/.local/share/jupyter/kernels/java javascript /home/vivian/.local/share/jupyter/kernels/javascript python3 /home/vivian/.local/share/jupyter/kernels/python3 . conda . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . conda list . # packages in environment at /home/vivian/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . java and javascript . echo Java Check # test for a kernel installation test=&quot;java&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Java Check java /home/vivian/.local/share/jupyter/kernels/java javascript /home/vivian/.local/share/jupyter/kernels/javascript .",
            "url": "https://vivianknee.github.io/FastPages/jupyter/2022/08/22/toolcheck.html",
            "relUrl": "/jupyter/2022/08/22/toolcheck.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "My First Post",
            "content": "Welcome to My Blog! . Goals for CSP . . Get better at different coding languages (Java, python, html, etc.) Get A&#39;s in the class for all 3 trimesters and a 5 on the AP exam :) Make sure to have fun 🤞 . | | | .",
            "url": "https://vivianknee.github.io/FastPages/markdown/week0/2022/08/22/My-First-Post.html",
            "relUrl": "/markdown/week0/2022/08/22/My-First-Post.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://vivianknee.github.io/FastPages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post46": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://vivianknee.github.io/FastPages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "APCSP Blog",
          "content": "Week Sprint Review Ticket Summary . 7 | API | Review Ticket 7 | I learned how to format and pull data from an API. I also took notes on my collegeboard MC quizzes | . 6 | Deployment | N/A | We worked with AWS | . 5 | UI Starters | Review Ticket 5 | This week we learned how to use HTML Fragments and Javascript to create objects, arrays, and datatables. Here is me using Javascript with Jupyter notebook and the kernel. I also made a separate javascript table to show what books I like. Finally, I made a frontend table using HTML. | . 4 | Python Web Server Project | Review Ticket 4 | In the video I made for week 4, I go over my CSP Journey and takeaways from the psychology video as well as the process I took to do my local server | . 3 | Creative Development | Review Ticket 3 | This week, we focused on creating a sample create task in preparation for the AP exam using javascript and code.org app lab. Here is the blog I wrote during the process. | . 2 | Data Abstraction | Review Ticket 2 | This week we started learning about Lists, Dictionaries, and Iterations and how to store data with them. We learned how to print and format dictionaries as well as do other more advanced things with them. In addition, we also messed around with html and the themes of our website. For example we applied a dark mode css file which changed the entire look of the site. | . 1 | Intro to Python | Review Ticket 1 | This week was super busy and more code heavy. Specifically, we began using python and bash. Using python, we made a Python Quiz and with bash we created a Bash Tool Check. The bash tool check made sure that we had all the necessary programs installed. This week was also an opportunity to personalize our website so I made a page consisting of My Art with Images and Tables. Finally, we had to show proof of our blogging both in csp which I did through APCSP Vocab and for Schoolwork outside of csp. | . 0 | Tool Setup | Review Ticket 0 | We learned how to make our first markdown posts and jupyter notebooks. My first makedown post was my About Me and my First Post. In order to do this, we had to set up wsl, vscode, and download numerous other programs like anaconda, bash, python, and more. | .",
          "url": "https://vivianknee.github.io/FastPages/_pages/002apcspblog.html",
          "relUrl": "/_pages/002apcspblog.html",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Student Lessons",
          "content": "Lesson Material Notebook . Unit 3 Sections 3-4 | Mathematical Expressions and Strings | Notes and HW | . Unit 3 Sections 5-7 | Boolean Expression, Conditionals, Nested Conditionals | Notes and HW | . Unit 3 Sections 8&amp;10 | Boolean Iteration and Lists | Notes and HW | . Unit 3 Sections 9&amp;11 | Developing Algorithms and Binary Search | Notes and HW | . Unit 3 Sections 12&amp;13 | Calling and Developing Procedures | Notes and HW | . Unit 3 Sections 14&amp;15 | Libraries and Random Values | Notes and HW | . Unit 3 Sections 16 | Simulations | Notes and HW | . Unit 3 Sections 17&amp;18 | Algorithm Efficiency and Undecidable Problems | Notes and HW | .",
          "url": "https://vivianknee.github.io/FastPages/_pages/003lessons.html",
          "relUrl": "/_pages/003lessons.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by Vivian . Who am I? . . . My name is Vivian and I am a junior at Del Norte High School. I love going to the beach, reading a good book, and walking my dog. I believe that peanut butter cookies are the best cookie (no rebuttal). Some of my hobbies include graphic design, digital art, and cybersecurity :) . What I&#39;m Passionate About . . I am part of the CyberAegis team and participate in Cyberpatriot competitions I enjoy graphic design and marketing and am a marketing coordinator for SAGE, a nonprofit organization I enjoy doing research on subjects I&#39;m interested in. I recently attended a research program at UCSD . | | | .",
          "url": "https://vivianknee.github.io/FastPages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocab",
          "content": "AP CSP Vocabulary Notes . Vocabulary . input = instructions you give to a computer | sequence = several lines of code together | output = the information the computer gives to you | key (name) --&gt; value (Vivian) | Variables: a way to name, store, data and reference data. Lists and Dictionaries are variables with extended features for storing and retrieving data. Lists, think of [] square brackets, are a way of grouping data in an ordered sequence | Dictionaries, think of {} curly braces, are a way of grouping data into in key-value relationships | . | Concatenation: the operation of joining two strings together | static text: text that does not change. for example, a string | . Linux/Ubuntu Commands . pwd = print working directory | mkdir = make directory | cd = change directory | ls = list directory &lt;/ul&gt; | | .",
          "url": "https://vivianknee.github.io/FastPages/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  

  

  
      ,"page6": {
          "title": "Frontend",
          "content": "| JS Table | Using the JS Kernel | API | .",
          "url": "https://vivianknee.github.io/FastPages/_pages/Frontend.html",
          "relUrl": "/_pages/Frontend.html",
          "date": ""
      }
      
  

  

  
  

  

  
  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://vivianknee.github.io/FastPages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}